<!--
THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF 
ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO 
THE IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A 
PARTICULAR PURPOSE.  
Copyright (c) Microsoft Corporation. All rights reserved.
-->

<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:text="clr-namespace:Microsoft.Xbox.Tools.Shared.Text"
                    xmlns:sys="clr-namespace:System;assembly=mscorlib"
                    xmlns:shared="clr-namespace:Microsoft.Xbox.Tools.Shared">

    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="SharedResources.xaml" />
        <ResourceDictionary Source="TreeGridStyles.xaml" />
    </ResourceDictionary.MergedDictionaries>

    <shared:BooleanToObjectConverter x:Key="BooleanFalseToHiddenConverter" TrueValue="{x:Static Visibility.Visible}" FalseValue="{x:Static Visibility.Hidden}" />
    <shared:BooleanToObjectConverter x:Key="BooleanTrueToHiddenConverter" TrueValue="{x:Static Visibility.Hidden}" FalseValue="{x:Static Visibility.Visible}" />
    <shared:ColorOrBrushToContrastingBlackWhiteConverter x:Key="ContrastingBlackWhiteConverter" />
    <shared:StringFormatConverter x:Key="CloseActiveDocumentConverter" StringFormat="Close {0} (Ctrl+F4)" />
    <shared:DocumentCategoryCountToVisibilityConverter x:Key="DocumentCategoryCountToVisibilityConverter" />
    <BooleanToVisibilityConverter x:Key="b2v" />

    <Style x:Key="ScrollBarLineButton" TargetType="{x:Type RepeatButton}">
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="OverridesDefaultStyle" Value="true" />
        <Setter Property="Focusable" Value="false" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RepeatButton}">
                    <Border x:Name="Border" Margin="1" BorderThickness="1" Background="{shared:ThemeBinding ControlBackgroundBrush}">
                        <Path x:Name="Arrow" HorizontalAlignment="Center" VerticalAlignment="Center" Fill="{shared:ThemeBinding ControlForegroundBrush}"
                  Data="{Binding Content, RelativeSource={RelativeSource TemplatedParent}}"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="Border" Property="Background" Value="{Binding Theme.ControlHoverBackgroundBrush, Source={x:Static shared:Theme.Instance}}" />
                            <Setter TargetName="Arrow" Property="Fill" Value="{Binding Theme.ControlHoverForegroundBrush, Source={x:Static shared:Theme.Instance}}" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="Border" Property="Background" Value="{Binding Theme.ControlPressedBackgroundBrush, Source={x:Static shared:Theme.Instance}}" />
                            <Setter TargetName="Arrow" Property="Fill" Value="{Binding Theme.ControlPressedForegroundBrush, Source={x:Static shared:Theme.Instance}}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ScrollBarPageButton" TargetType="{x:Type RepeatButton}">
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="OverridesDefaultStyle" Value="true" />
        <Setter Property="IsTabStop" Value="false" />
        <Setter Property="Focusable" Value="false" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RepeatButton}">
                    <Border Background="Transparent" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ScrollBarThumb" TargetType="{x:Type Thumb}">
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="OverridesDefaultStyle" Value="true" />
        <Setter Property="IsTabStop" Value="false" />
        <Setter Property="Focusable" Value="false" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Thumb}">
                    <Border x:Name="border" Background="{shared:ThemeBinding ScrollBarThumbBrush}" />
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="border" Property="Background" Value="{Binding Path=Theme.ScrollBarThumbHoverBrush, Source={x:Static shared:Theme.Instance}}" />
                        </Trigger>
                        <Trigger Property="IsDragging" Value="True">
                            <Setter TargetName="border" Property="Background" Value="{Binding Path=Theme.ScrollBarThumbPressedBrush, Source={x:Static shared:Theme.Instance}}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <ControlTemplate x:Key="VerticalScrollBar" TargetType="{x:Type ScrollBar}">
        <Grid>
            <Grid.RowDefinitions>
                <RowDefinition MaxHeight="16" />
                <RowDefinition Height="*" />
                <RowDefinition MaxHeight="16" />
            </Grid.RowDefinitions>
            <Border Grid.RowSpan="3" Background="{shared:ThemeBinding ControlBackgroundBrush}" />
            <RepeatButton Grid.Row="0" Style="{StaticResource ScrollBarLineButton}" Height="16" Command="ScrollBar.LineUpCommand" Content="M 0 4 L 8 4 L 4 0 Z"  />
            <Track x:Name="PART_Track" Grid.Row="1" IsDirectionReversed="true">
                <Track.DecreaseRepeatButton>
                    <RepeatButton Style="{StaticResource ScrollBarPageButton}" Command="ScrollBar.PageUpCommand" />
                </Track.DecreaseRepeatButton>
                <Track.Thumb>
                    <Thumb Style="{StaticResource ScrollBarThumb}" Margin="1,0,1,0" />
                </Track.Thumb>
                <Track.IncreaseRepeatButton>
                    <RepeatButton Style="{StaticResource ScrollBarPageButton}" Command="ScrollBar.PageDownCommand" />
                </Track.IncreaseRepeatButton>
            </Track>
            <RepeatButton Grid.Row="3" Style="{StaticResource ScrollBarLineButton}" Height="16" Command="ScrollBar.LineDownCommand" Content="M 0 0 L 4 4 L 8 0 Z" />
        </Grid>
    </ControlTemplate>

    <ControlTemplate x:Key="HorizontalScrollBar" TargetType="{x:Type ScrollBar}">
        <Grid>
            <Grid.ColumnDefinitions>
                <ColumnDefinition MaxWidth="16" />
                <ColumnDefinition Width="*" />
                <ColumnDefinition MaxWidth="16" />
            </Grid.ColumnDefinitions>
            <Border Grid.ColumnSpan="3" Background="{shared:ThemeBinding ControlBackgroundBrush}" />
            <RepeatButton Grid.Column="0" Style="{StaticResource ScrollBarLineButton}" Width="16" Command="ScrollBar.LineLeftCommand" Content="M 4 0 L 4 8 L 0 4 Z" />
            <Track x:Name="PART_Track" Grid.Column="1" IsDirectionReversed="False">
                <Track.DecreaseRepeatButton>
                    <RepeatButton Style="{StaticResource ScrollBarPageButton}" Command="ScrollBar.PageLeftCommand" />
                </Track.DecreaseRepeatButton>
                <Track.Thumb>
                    <Thumb Style="{StaticResource ScrollBarThumb}" Margin="0,1,0,1" />
                </Track.Thumb>
                <Track.IncreaseRepeatButton>
                    <RepeatButton Style="{StaticResource ScrollBarPageButton}" Command="ScrollBar.PageRightCommand" Foreground="{TemplateBinding Foreground}"/>
                </Track.IncreaseRepeatButton>
            </Track>
            <RepeatButton Grid.Column="3" Style="{StaticResource ScrollBarLineButton}" Width="16" Command="ScrollBar.LineRightCommand" Content="M 0 0 L 4 4 L 0 8 Z" />
        </Grid>
    </ControlTemplate>

    <Style x:Key="{x:Type ScrollBar}" TargetType="{x:Type ScrollBar}">
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="OverridesDefaultStyle" Value="true" />
        <Style.Triggers>
            <Trigger Property="Orientation" Value="Horizontal">
                <Setter Property="Width" Value="Auto" />
                <Setter Property="Height" Value="16" />
                <Setter Property="Template" Value="{StaticResource HorizontalScrollBar}" />
            </Trigger>
            <Trigger Property="Orientation" Value="Vertical">
                <Setter Property="Width" Value="16" />
                <Setter Property="Height" Value="Auto" />
                <Setter Property="Template" Value="{StaticResource VerticalScrollBar}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="OuterBorderFVS">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Rectangle StrokeThickness="1" Stroke="{shared:ThemeBinding DarkFocusVisualBrush}"
                     Margin="-2" StrokeDashArray="2 3" SnapsToDevicePixels="True" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="InnerBorderDarkFVS">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Rectangle StrokeThickness="1" Stroke="{shared:ThemeBinding DarkFocusVisualBrush}"
                     Margin="1" StrokeDashArray="2 3" SnapsToDevicePixels="True" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="InnerBorderLightFVS">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Rectangle StrokeThickness="1" Stroke="{shared:ThemeBinding LightFocusVisualBrush}"
                     Margin="1" StrokeDashArray="2 3" SnapsToDevicePixels="True" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type Button}">
        <Setter Property="FocusVisualStyle" Value="{StaticResource OuterBorderFVS}" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="Background" Value="{Binding Path=Theme.ControlBackgroundBrush, Source={x:Static shared:Theme.Instance}}" />
        <Setter Property="Foreground" Value="{Binding Path=Theme.ControlForegroundBrush, Source={x:Static shared:Theme.Instance}}" />
        <Setter Property="Padding" Value="{Binding Path=Theme.ButtonPadding, Source={x:Static shared:Theme.Instance}}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border x:Name="border"
                  BorderThickness="{shared:ThemeBinding ControlBorderThickness}"
                  Padding="{TemplateBinding Padding}"
                  Background="{TemplateBinding Background}"
                  BorderBrush="{shared:ThemeBinding ControlBorderBrush}" >
                        <ContentControl x:Name="presenter" Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}" ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}"
                            HorizontalAlignment="Center" VerticalAlignment="Center" IsTabStop="False" Focusable="False"
                            Foreground="{TemplateBinding Foreground}">
                            <ContentControl.Template>
                                <ControlTemplate TargetType="{x:Type ContentControl}">
                                    <ContentPresenter RecognizesAccessKey="True" />
                                </ControlTemplate>
                            </ContentControl.Template>
                        </ContentControl>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsKeyboardFocused" Value="True">
                            <Setter TargetName="border" Property="Background" Value="{Binding Path=Theme.ControlFocusedBackgroundBrush, Source={x:Static shared:Theme.Instance}}" />
                            <Setter TargetName="border" Property="BorderBrush" Value="{Binding Path=Theme.ControlFocusedBorderBrush, Source={x:Static shared:Theme.Instance}}" />
                            <Setter Property="Foreground" Value="{Binding Path=Theme.ControlFocusedForegroundBrush, Source={x:Static shared:Theme.Instance}}" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="border" Property="Background" Value="{Binding Path=Theme.ControlHoverBackgroundBrush, Source={x:Static shared:Theme.Instance}}" />
                            <Setter TargetName="border" Property="BorderBrush" Value="{Binding Path=Theme.ControlHoverBorderBrush, Source={x:Static shared:Theme.Instance}}" />
                            <Setter Property="Foreground" Value="{Binding Path=Theme.ControlHoverForegroundBrush, Source={x:Static shared:Theme.Instance}}" />
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True" />
                                <Condition Property="IsKeyboardFocused" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="border" Property="Background" Value="{Binding Path=Theme.ControlFocusedHoverBackgroundBrush, Source={x:Static shared:Theme.Instance}}" />
                            <Setter TargetName="border" Property="BorderBrush" Value="{Binding Path=Theme.ControlFocusedHoverBorderBrush, Source={x:Static shared:Theme.Instance}}" />
                            <Setter Property="Foreground" Value="{Binding Path=Theme.ControlFocusedHoverForegroundBrush, Source={x:Static shared:Theme.Instance}}" />
                        </MultiTrigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="border" Property="Background" Value="{Binding Path=Theme.ControlPressedBackgroundBrush, Source={x:Static shared:Theme.Instance}}" />
                            <Setter TargetName="border" Property="BorderBrush" Value="{Binding Path=Theme.ControlPressedBorderBrush, Source={x:Static shared:Theme.Instance}}" />
                            <Setter Property="Foreground" Value="{Binding Path=Theme.ControlPressedForegroundBrush, Source={x:Static shared:Theme.Instance}}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="border" Property="Background" Value="{Binding Path=Theme.ControlDisabledBackgroundBrush, Source={x:Static shared:Theme.Instance}}" />
                            <Setter TargetName="border" Property="BorderBrush" Value="{Binding Path=Theme.ControlDisabledBorderBrush, Source={x:Static shared:Theme.Instance}}" />
                            <Setter Property="Foreground" Value="{Binding Path=Theme.ControlDisabledForegroundBrush, Source={x:Static shared:Theme.Instance}}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type ToggleButton}">
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="FocusVisualStyle" Value="{StaticResource OuterBorderFVS}" />
        <Setter Property="Padding" Value="{Binding Path=Theme.ButtonPadding, Source={x:Static shared:Theme.Instance}}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border x:Name="border"
                  BorderThickness="{shared:ThemeBinding ControlBorderThickness}"
                  Padding="{TemplateBinding Padding}"
                  Background="{shared:ThemeBinding ControlBackgroundBrush}"
                  BorderBrush="{shared:ThemeBinding ControlBorderBrush}" >
                        <ContentControl x:Name="presenter" Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}" ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}"
                            HorizontalAlignment="Center" VerticalAlignment="Center" IsTabStop="False" Focusable="False"
                            Foreground="{shared:ThemeBinding ControlForegroundBrush}">
                            <ContentControl.Template>
                                <ControlTemplate TargetType="{x:Type ContentControl}">
                                    <ContentPresenter RecognizesAccessKey="True" />
                                </ControlTemplate>
                            </ContentControl.Template>
                        </ContentControl>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter TargetName="border" Property="Background" Value="{Binding Path=Theme.ToggleButtonCheckedBackgroundBrush, Source={x:Static shared:Theme.Instance}}" />
                            <Setter TargetName="border" Property="BorderBrush" Value="{Binding Path=Theme.ToggleButtonCheckedBorderBrush, Source={x:Static shared:Theme.Instance}}" />
                            <Setter TargetName="presenter" Property="Foreground" Value="{Binding Path=Theme.ToggleButtonCheckedForegroundBrush, Source={x:Static shared:Theme.Instance}}" />
                        </Trigger>
                        <Trigger Property="IsKeyboardFocused" Value="True">
                            <Setter TargetName="border" Property="Background" Value="{Binding Path=Theme.ControlFocusedBackgroundBrush, Source={x:Static shared:Theme.Instance}}" />
                            <Setter TargetName="border" Property="BorderBrush" Value="{Binding Path=Theme.ControlFocusedBorderBrush, Source={x:Static shared:Theme.Instance}}" />
                            <Setter TargetName="presenter" Property="Foreground" Value="{Binding Path=Theme.ControlFocusedForegroundBrush, Source={x:Static shared:Theme.Instance}}" />
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsChecked" Value="True" />
                                <Condition Property="IsKeyboardFocused" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="border" Property="Background" Value="{Binding Path=Theme.ToggleButtonFocusedCheckedBackgroundBrush, Source={x:Static shared:Theme.Instance}}" />
                            <Setter TargetName="border" Property="BorderBrush" Value="{Binding Path=Theme.ToggleButtonFocusedCheckedBorderBrush, Source={x:Static shared:Theme.Instance}}" />
                            <Setter TargetName="presenter" Property="Foreground" Value="{Binding Path=Theme.ToggleButtonFocusedCheckedForegroundBrush, Source={x:Static shared:Theme.Instance}}" />
                        </MultiTrigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="border" Property="Background" Value="{Binding Path=Theme.ControlHoverBackgroundBrush, Source={x:Static shared:Theme.Instance}}" />
                            <Setter TargetName="border" Property="BorderBrush" Value="{Binding Path=Theme.ControlHoverBorderBrush, Source={x:Static shared:Theme.Instance}}" />
                            <Setter TargetName="presenter" Property="Foreground" Value="{Binding Path=Theme.ControlHoverForegroundBrush, Source={x:Static shared:Theme.Instance}}" />
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsChecked" Value="True" />
                                <Condition Property="IsMouseOver" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="border" Property="Background" Value="{Binding Path=Theme.ToggleButtonHoverCheckedBackgroundBrush, Source={x:Static shared:Theme.Instance}}" />
                            <Setter TargetName="border" Property="BorderBrush" Value="{Binding Path=Theme.ToggleButtonHoverCheckedBorderBrush, Source={x:Static shared:Theme.Instance}}" />
                            <Setter TargetName="presenter" Property="Foreground" Value="{Binding Path=Theme.ToggleButtonHoverCheckedForegroundBrush, Source={x:Static shared:Theme.Instance}}" />
                        </MultiTrigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="border" Property="Background" Value="{Binding Path=Theme.ControlPressedBackgroundBrush, Source={x:Static shared:Theme.Instance}}" />
                            <Setter TargetName="border" Property="BorderBrush" Value="{Binding Path=Theme.ControlPressedBorderBrush, Source={x:Static shared:Theme.Instance}}" />
                            <Setter TargetName="presenter" Property="Foreground" Value="{Binding Path=Theme.ControlPressedForegroundBrush, Source={x:Static shared:Theme.Instance}}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="border" Property="Background" Value="{Binding Path=Theme.ControlDisabledBackgroundBrush, Source={x:Static shared:Theme.Instance}}" />
                            <Setter TargetName="border" Property="BorderBrush" Value="{Binding Path=Theme.ControlDisabledBorderBrush, Source={x:Static shared:Theme.Instance}}" />
                            <Setter TargetName="presenter" Property="Foreground" Value="{Binding Path=Theme.ControlDisabledForegroundBrush, Source={x:Static shared:Theme.Instance}}" />
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsChecked" Value="True" />
                                <Condition Property="IsEnabled" Value="False" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="border" Property="Background" Value="{Binding Path=Theme.ToggleButtonDisabledCheckedBackgroundBrush, Source={x:Static shared:Theme.Instance}}" />
                            <Setter TargetName="border" Property="BorderBrush" Value="{Binding Path=Theme.ToggleButtonDisabledCheckedBorderBrush, Source={x:Static shared:Theme.Instance}}" />
                            <Setter TargetName="presenter" Property="Foreground" Value="{Binding Path=Theme.ToggleButtonDisabledCheckedForegroundBrush, Source={x:Static shared:Theme.Instance}}" />
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type Label}" BasedOn="{StaticResource {x:Type Label}}">
        <Setter Property="Foreground" Value="{Binding Path=Theme.ControlForegroundBrush, Source={x:Static shared:Theme.Instance}}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Label}">
                    <AccessText Text="{TemplateBinding Content}" Foreground="{TemplateBinding Foreground}" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type GroupBox}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type GroupBox}">
                    <DockPanel>
                        <Border DockPanel.Dock="Top" Background="{shared:ThemeBinding GroupBoxHeaderBackgroundBrush}">
                            <ContentControl Foreground="{shared:ThemeBinding GroupBoxHeaderForegroundBrush}" Margin="{shared:ThemeBinding GroupBoxHeaderPadding}" Focusable="False"
                              FontFamily="{shared:ThemeBinding GroupBoxHeaderFontFamily}" FontSize="{shared:ThemeBinding GroupBoxHeaderFontSize}"
                              FontWeight="{shared:ThemeBinding GroupBoxHeaderFontWeight}" FontStyle="{shared:ThemeBinding GroupBoxHeaderFontStyle}">
                                <ContentPresenter ContentSource="Header" />
                            </ContentControl>
                        </Border>
                        <ContentPresenter Margin="{shared:ThemeBinding GroupBoxContentPadding}" ContentSource="Content" />
                    </DockPanel>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type TextBox}">
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="BorderThickness" Value="{Binding Path=Theme.TextBoxBorderThickness, Source={x:Static shared:Theme.Instance}}"/>
        <Setter Property="Padding" Value="{Binding Path=Theme.TextBoxContentMargin, Source={x:Static shared:Theme.Instance}}" />
        <Setter Property="Foreground" Value="{Binding Path=Theme.ControlForegroundBrush, Source={x:Static shared:Theme.Instance}}" />
        <Setter Property="Background" Value="{Binding Path=Theme.ControlBackgroundBrush, Source={x:Static shared:Theme.Instance}}" />
        <Setter Property="SelectionBrush" Value="{Binding Path=Theme.TextBoxSelectionBrush, Source={x:Static shared:Theme.Instance}}" />
        <Setter Property="SelectionOpacity" Value="{Binding Path=Theme.TextBoxSelectionOpacity, Source={x:Static shared:Theme.Instance}}" />
        <Setter Property="IsReadOnlyCaretVisible" Value="True" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBox}">
                    <Grid x:Name="RootElement">
                        <Border x:Name="Border"
                    BorderThickness="{TemplateBinding BorderThickness}"
                    Background="{TemplateBinding Background}"
                    BorderBrush="{shared:ThemeBinding ControlBorderBrush}">
                            <ScrollViewer x:Name="PART_ContentHost" Padding="{shared:ThemeBinding TextBoxContentMargin}" BorderThickness="0" IsTabStop="False"
                            Foreground="{shared:ThemeBinding ControlForegroundBrush}"
                            Background="Transparent" />
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsKeyboardFocused" Value="True">
                            <Setter TargetName="Border" Property="BorderBrush" Value="{Binding Path=Theme.ControlFocusedBorderBrush, Source={x:Static shared:Theme.Instance}}" />
                            <Setter Property="Foreground" Value="{Binding Path=Theme.ControlFocusedForegroundBrush, Source={x:Static shared:Theme.Instance}}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="Border" Property="Background" Value="{Binding Path=Theme.ControlDisabledBackgroundBrush, Source={x:Static shared:Theme.Instance}}" />
                            <Setter TargetName="Border" Property="BorderBrush" Value="{Binding Path=Theme.ControlDisabledBorderBrush, Source={x:Static shared:Theme.Instance}}" />
                            <Setter Property="TextElement.Foreground" Value="{Binding Path=Theme.ControlDisabledForegroundBrush, Source={x:Static shared:Theme.Instance}}" />
                            <Setter Property="Foreground" Value="{Binding Path=Theme.ControlDisabledForegroundBrush, Source={x:Static shared:Theme.Instance}}" />
                        </Trigger>
                        <Trigger Property="IsReadOnly" Value="True">
                            <Setter Property="TextElement.Foreground" Value="{Binding Path=Theme.ControlDisabledForegroundBrush, Source={x:Static shared:Theme.Instance}}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Validation.ErrorTemplate">
            <Setter.Value>
                <ControlTemplate>
                    <Grid>
                        <Border BorderThickness="1" BorderBrush="Red">
                            <AdornedElementPlaceholder x:Name="adorner" />
                        </Border>
                        <Popup x:Name="popup" IsOpen="True" AllowsTransparency="True" Placement="Bottom" PopupAnimation="Fade">
                            <Border Padding="6,2" BorderBrush="Black" BorderThickness="1" Background="White">
                                <DockPanel>
                                    <Image DockPanel.Dock="Left" Margin="2" Width="16" Height="16" Source="Resources\Error.png" VerticalAlignment="Top" />
                                    <TextBlock Text="{Binding Path=AdornedElement.(Validation.Errors)[0].ErrorContent, ElementName=adorner}" Margin="6,0" MaxWidth="200" TextWrapping="Wrap" VerticalAlignment="Center" />
                                </DockPanel>
                            </Border>
                        </Popup>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger SourceName="adorner" Property="IsVisible" Value="False">
                            <Setter TargetName="popup" Property="IsOpen" Value="False" />
                        </Trigger>
                        <DataTrigger Binding="{Binding Path=AdornedElement.IsKeyboardFocused, ElementName=adorner}" Value="False">
                            <Setter TargetName="popup" Property="IsOpen" Value="False" />
                        </DataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type shared:OutputView}" BasedOn="{StaticResource {x:Type TextBox}}">
        <Setter Property="FontFamily" Value="Consolas" />
        <Setter Property="AcceptsReturn" Value="True" />
        <Setter Property="AcceptsTab" Value="True" />
        <Setter Property="IsReadOnly" Value="True" />
        <Setter Property="IsReadOnlyCaretVisible" Value="True" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="VerticalScrollBarVisibility" Value="Auto" />
        <Setter Property="HorizontalScrollBarVisibility" Value="Auto" />
    </Style>

    <Style TargetType="{x:Type CheckBox}">
        <Setter Property="SnapsToDevicePixels" Value="true" />
        <Setter Property="OverridesDefaultStyle" Value="true" />
        <Setter Property="FocusVisualStyle" Value="{StaticResource OuterBorderFVS}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type CheckBox}">
                    <BulletDecorator Background="Transparent">
                        <BulletDecorator.Bullet>
                            <Border x:Name="Border" Width="13" Height="13" CornerRadius="0" BorderThickness="1"
                      BorderBrush="{shared:ThemeBinding ControlBorderBrush}"
                      Background="Transparent">
                                <Grid>
                                    <Path x:Name="CheckMark" Visibility="Collapsed" Width="7" Height="7" StrokeThickness="2" Data="M 0 0 L 7 7 M 0 7 L 7 0"
                        Stroke="{shared:ThemeBinding ControlForegroundBrush}" />
                                    <Path x:Name="IndeterminateMark" Visibility="Collapsed" Width="7" Height="7" Data="M 0 0 L 0 7 L 7 7 L 7 0 Z"
                        Fill="{shared:ThemeBinding ControlForegroundBrush}" />
                                </Grid>
                            </Border>
                        </BulletDecorator.Bullet>
                        <ContentControl x:Name="presenter" VerticalAlignment="Center" HorizontalAlignment="Left" Foreground="{shared:ThemeBinding ControlForegroundBrush}"
                            IsTabStop="False" Focusable="False">
                            <ContentPresenter Margin="{shared:ThemeBinding CheckBoxContentMargin}" RecognizesAccessKey="True" />
                        </ContentControl>
                    </BulletDecorator>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter TargetName="CheckMark" Property="Visibility" Value="Visible" />
                        </Trigger>
                        <Trigger Property="IsChecked" Value="{x:Null}">
                            <Setter TargetName="IndeterminateMark" Property="Visibility" Value="Visible" />
                        </Trigger>
                        <Trigger Property="IsKeyboardFocused" Value="True">
                            <Setter TargetName="Border" Property="Background" Value="{Binding Path=Theme.ControlFocusedBackgroundBrush, Source={x:Static shared:Theme.Instance}}" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="Border" Property="Background" Value="{Binding Path=Theme.ControlHoverBackgroundBrush, Source={x:Static shared:Theme.Instance}}" />
                            <Setter TargetName="Border" Property="BorderBrush" Value="{Binding Path=Theme.ControlHoverBorderBrush, Source={x:Static shared:Theme.Instance}}" />
                            <Setter TargetName="CheckMark" Property="Stroke" Value="{Binding Path=Theme.ControlHoverForegroundBrush, Source={x:Static shared:Theme.Instance}}" />
                            <Setter TargetName="IndeterminateMark" Property="Fill" Value="{Binding Path=Theme.ControlHoverForegroundBrush, Source={x:Static shared:Theme.Instance}}" />
                            <Setter TargetName="presenter" Property="Foreground" Value="{Binding Path=Theme.ControlHoverForegroundBrush, Source={x:Static shared:Theme.Instance}}" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="Border" Property="Background" Value="{Binding Path=Theme.ControlPressedBackgroundBrush, Source={x:Static shared:Theme.Instance}}" />
                            <Setter TargetName="Border" Property="BorderBrush" Value="{Binding Path=Theme.ControlPressedBorderBrush, Source={x:Static shared:Theme.Instance}}" />
                            <Setter TargetName="CheckMark" Property="Stroke" Value="{Binding Path=Theme.ControlPressedForegroundBrush, Source={x:Static shared:Theme.Instance}}" />
                            <Setter TargetName="IndeterminateMark" Property="Fill" Value="{Binding Path=Theme.ControlPressedForegroundBrush, Source={x:Static shared:Theme.Instance}}" />
                            <!--<Setter TargetName="presenter" Property="Foreground" Value="{Binding Path=Theme.ControlPressedForegroundBrush, Source={x:Static shared:Theme.Instance}}" />-->
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="Border" Property="Background" Value="{Binding Path=Theme.ControlDisabledBackgroundBrush, Source={x:Static shared:Theme.Instance}}" />
                            <Setter TargetName="Border" Property="BorderBrush" Value="{Binding Path=Theme.ControlDisabledBorderBrush, Source={x:Static shared:Theme.Instance}}" />
                            <Setter TargetName="CheckMark" Property="Stroke" Value="{Binding Path=Theme.ControlDisabledForegroundBrush, Source={x:Static shared:Theme.Instance}}" />
                            <Setter TargetName="IndeterminateMark" Property="Fill" Value="{Binding Path=Theme.ControlDisabledForegroundBrush, Source={x:Static shared:Theme.Instance}}" />
                            <Setter TargetName="presenter" Property="Foreground" Value="{Binding Path=Theme.ControlDisabledForegroundBrush, Source={x:Static shared:Theme.Instance}}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ExpanderToggleButtonStyle" TargetType="{x:Type ToggleButton}">
        <Setter Property="SnapsToDevicePixels" Value="true" />
        <Setter Property="OverridesDefaultStyle" Value="true" />
        <Setter Property="FocusVisualStyle" Value="{StaticResource OuterBorderFVS}" />
        <Setter Property="Foreground" Value="{Binding Path=Theme.ControlForegroundBrush, Source={x:Static shared:Theme.Instance}}" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <BulletDecorator Background="{TemplateBinding Background}">
                        <BulletDecorator.Bullet>
                            <Grid Width="15" Height="15" Background="Transparent">
                                <Path x:Name="ExpandPath" HorizontalAlignment="Center" VerticalAlignment="Center" Margin="1,1,1,1"
                      Fill="{TemplateBinding Foreground}" Data="M 4 0 L 8 4 L 4 8 Z" RenderTransformOrigin="0.5,0.5" />
                            </Grid>
                        </BulletDecorator.Bullet>
                        <ContentPresenter x:Name="presenter" Margin="{shared:ThemeBinding CheckBoxContentMargin}" VerticalAlignment="Center" HorizontalAlignment="Left" RecognizesAccessKey="True" />
                    </BulletDecorator>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter TargetName="ExpandPath" Property="RenderTransform">
                                <Setter.Value>
                                    <RotateTransform Angle="90" />
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Foreground" Value="{Binding Path=Theme.ControlHoverForegroundBrush, Source={x:Static shared:Theme.Instance}}" />
                            <Setter Property="Background" Value="{Binding Path=Theme.ControlHoverBackgroundBrush, Source={x:Static shared:Theme.Instance}}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Foreground" Value="{Binding Path=Theme.ControlDisabledForegroundBrush, Source={x:Static shared:Theme.Instance}}" />
                            <Setter Property="Background" Value="{Binding Path=Theme.ControlDisabledBackgroundBrush, Source={x:Static shared:Theme.Instance}}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type Expander}">
        <Setter Property="SnapsToDevicePixels" Value="true" />
        <Setter Property="OverridesDefaultStyle" Value="true" />
        <Setter Property="FocusVisualStyle" Value="{StaticResource OuterBorderFVS}" />
        <Setter Property="Foreground" Value="{Binding Path=Theme.ControlForegroundBrush, Source={x:Static shared:Theme.Instance}}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Expander}">
                    <StackPanel Background="Transparent">
                        <ToggleButton x:Name="toggleButton" Content="{TemplateBinding Header}" HorizontalContentAlignment="Left"
                          Style="{StaticResource ExpanderToggleButtonStyle}"
                          IsChecked="{Binding IsExpanded, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" />
                        <ContentPresenter x:Name="contentPresenter" Margin="4,2" Visibility="Collapsed" />
                    </StackPanel>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsExpanded" Value="True">
                            <Setter TargetName="contentPresenter" Property="Visibility" Value="Visible" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Foreground" Value="{Binding Path=Theme.ControlDisabledForegroundBrush, Source={x:Static shared:Theme.Instance}}" />
                            <Setter Property="Background" Value="{Binding Path=Theme.ControlDisabledBackgroundBrush, Source={x:Static shared:Theme.Instance}}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type RadioButton}">
        <Setter Property="SnapsToDevicePixels" Value="true" />
        <Setter Property="OverridesDefaultStyle" Value="true" />
        <Setter Property="FocusVisualStyle" Value="{StaticResource OuterBorderFVS}" />
        <Setter Property="Foreground" Value="{Binding Path=Theme.ControlForegroundBrush, Source={x:Static shared:Theme.Instance}}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RadioButton}">
                    <BulletDecorator Background="Transparent">
                        <BulletDecorator.Bullet>
                            <Grid Background="Transparent">
                                <Ellipse x:Name="Border" Width="13" Height="13" StrokeThickness="1"
                          Stroke="{Binding Path=Theme.ControlBorderBrush, Source={x:Static shared:Theme.Instance}}" />
                                <Ellipse x:Name="DotMark" Visibility="Collapsed" Width="7" Height="7" VerticalAlignment="Center" HorizontalAlignment="Center"
                          Fill="{Binding Path=Theme.ControlForegroundBrush, Source={x:Static shared:Theme.Instance}}" />
                            </Grid>
                        </BulletDecorator.Bullet>
                        <ContentPresenter x:Name="presenter" Margin="4,0,2,0" VerticalAlignment="Center" HorizontalAlignment="Left" RecognizesAccessKey="True" />
                    </BulletDecorator>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter TargetName="DotMark" Property="Visibility" Value="Visible" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="Border" Property="Fill" Value="{Binding Path=Theme.ControlHoverBackgroundBrush, Source={x:Static shared:Theme.Instance}}" />
                            <Setter TargetName="Border" Property="Stroke" Value="{Binding Path=Theme.ControlHoverBorderBrush, Source={x:Static shared:Theme.Instance}}" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="Border" Property="Fill" Value="{Binding Path=Theme.ControlPressedBackgroundBrush, Source={x:Static shared:Theme.Instance}}" />
                            <Setter TargetName="Border" Property="Stroke" Value="{Binding Path=Theme.ControlPressedBorderBrush, Source={x:Static shared:Theme.Instance}}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Foreground" Value="{Binding Path=Theme.ControlDisabledForegroundBrush, Source={x:Static shared:Theme.Instance}}" />
                            <Setter TargetName="Border" Property="Stroke" Value="{Binding Path=Theme.ControlDisabledBorderBrush, Source={x:Static shared:Theme.Instance}}" />
                            <Setter TargetName="DotMark" Property="Stroke" Value="{Binding Path=Theme.ControlDisabledForegroundBrush, Source={x:Static shared:Theme.Instance}}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ConfigToggleButtonStyle" TargetType="{x:Type ToggleButton}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Padding" Value="3,2" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}" BorderBrush="#40808080" BorderThickness="1,0,0,0">
                        <Path x:Name="path" Data="M 0 4 L 3 8 L 6 4 Z" Fill="{shared:ThemeBinding ControlForegroundBrush}" VerticalAlignment="Center" HorizontalAlignment="Center" />
                    </Border>

                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" Value="{Binding Path=Theme.ControlHoverBackgroundBrush, Source={x:Static shared:Theme.Instance}}" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Background" Value="{Binding Path=Theme.ControlPressedBackgroundBrush, Source={x:Static shared:Theme.Instance}}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type shared:ConfigButton}">
        <Setter Property="Padding" Value="6,2" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="Background" Value="{Binding Path=Theme.ControlBackgroundBrush, Source={x:Static shared:Theme.Instance}}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type shared:ConfigButton}">
                    <Border x:Name="border" BorderThickness="1" BorderBrush="{Binding Path=Theme.ControlBorderBrush, Source={x:Static shared:Theme.Instance}}" Background="{TemplateBinding Background}">
                        <DockPanel>
                            <ToggleButton x:Name="PART_PopupButton" DockPanel.Dock="Right" Style="{StaticResource ConfigToggleButtonStyle}" IsChecked="{Binding Path=IsPopupOpen, RelativeSource={RelativeSource TemplatedParent}}" />
                            <Grid x:Name="contentGrid">
                                <Grid.Background>
                                    <SolidColorBrush Color="Transparent" />
                                </Grid.Background>
                                <ContentPresenter ContentSource="Content" Margin="{TemplateBinding Padding}" VerticalAlignment="Center" HorizontalAlignment="Center" />
                                <Image Source="Resources\Error.png" Width="13" Height="13" Margin="1" HorizontalAlignment="Right" VerticalAlignment="Bottom"
                       Visibility="{Binding Path=CanCommit, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource BooleanTrueToHiddenConverter}}" />
                            </Grid>
                            <shared:ConfigButtonPopup x:Name="PART_Popup" IsOpen="{Binding Path=IsPopupOpen, RelativeSource={RelativeSource TemplatedParent}}" StaysOpen="False" PopupAnimation="Fade" AllowsTransparency="True" DataContext="{Binding}"
                                        AutomationProperties.AutomationId="ConfigButtonPopup">
                                <Border Background="White" BorderBrush="{Binding Path=Theme.ControlBorderBrush, Source={x:Static shared:Theme.Instance}}" BorderThickness="1">
                                    <ContentPresenter ContentSource="PopupContent" />
                                </Border>
                            </shared:ConfigButtonPopup>
                        </DockPanel>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" Value="{Binding Path=Theme.ControlHoverBackgroundBrush, Source={x:Static shared:Theme.Instance}}" />
                            <Setter TargetName="border" Property="BorderBrush" Value="{Binding Path=Theme.ControlHoverBorderBrush, Source={x:Static shared:Theme.Instance}}" />
                        </Trigger>
                        <Trigger SourceName="PART_PopupButton" Property="IsMouseOver" Value="True">
                            <Setter Property="Background" Value="{Binding Path=Theme.ControlBackgroundBrush, Source={x:Static shared:Theme.Instance}}" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Background" Value="{Binding Path=Theme.ControlPressedBackgroundBrush, Source={x:Static shared:Theme.Instance}}" />
                            <Setter TargetName="border" Property="BorderBrush" Value="{Binding Path=Theme.ControlPressedBorderBrush, Source={x:Static shared:Theme.Instance}}" />
                        </Trigger>
                        <Trigger Property="CanCommit" Value="False">
                            <Setter TargetName="contentGrid" Property="ToolTip" Value="Errors in the popup are preventing this command from functioning." />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Background" Value="{Binding Path=Theme.ControlDisabledBackgroundBrush, Source={x:Static shared:Theme.Instance}}" />
                            <Setter TargetName="border" Property="BorderBrush" Value="{Binding Path=Theme.ControlDisabledBorderBrush, Source={x:Static shared:Theme.Instance}}" />
                        </Trigger>
                        <Trigger SourceName="PART_PopupButton" Property="IsChecked" Value="True">
                            <Trigger.EnterActions>
                                <BeginStoryboard x:Name="fadingHover">
                                    <Storyboard>
                                        <ColorAnimation From="White" To="#107c0f" Duration="0:0:3" Storyboard.TargetName="contentGrid" Storyboard.TargetProperty="Background.Color" AutoReverse="True" RepeatBehavior="Forever" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.EnterActions>
                            <Trigger.ExitActions>
                                <StopStoryboard BeginStoryboardName="fadingHover" />
                            </Trigger.ExitActions>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type shared:RangedSlider}">
        <Setter Property="Focusable" Value="False" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type shared:RangedSlider}">
                    <Grid>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto" />
                            <RowDefinition Height="Auto" />
                        </Grid.RowDefinitions>
                        <DockPanel Grid.Row="0">
                            <TextBox x:Name="PART_TextBox" DockPanel.Dock="Right" Width="80" VerticalAlignment="Center" shared:ConfigButton.RequiresValidation="True"
                       shared:ConfigButton.GetsFocusOnPopupOpen="{Binding Path=(shared:ConfigButton.GetsFocusOnPopupOpen), RelativeSource={RelativeSource TemplatedParent}}" />
                            <TextBlock Text="{TemplateBinding Label}" Margin="0,0,6,0" VerticalAlignment="Center" />
                        </DockPanel>
                        <Slider x:Name="PART_Slider" Grid.Row="1" Margin="0,6" 
                    Minimum="{Binding Path=Minimum, RelativeSource={RelativeSource TemplatedParent}}" Maximum="{Binding Path=Maximum, RelativeSource={RelativeSource TemplatedParent}}"
                    SmallChange="1" LargeChange="10"
                    Value="{Binding Path=Value, RelativeSource={RelativeSource TemplatedParent}, Mode=TwoWay}" HorizontalAlignment="Stretch" />
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <ControlTemplate x:Key="ComboBoxToggleButton" TargetType="{x:Type ToggleButton}">
        <Grid>
            <Grid.ColumnDefinitions>
                <ColumnDefinition />
                <ColumnDefinition Width="20" />
            </Grid.ColumnDefinitions>
            <Border x:Name="border" Grid.ColumnSpan="2" BorderThickness="1"  BorderBrush="{TemplateBinding BorderBrush}" Background="Transparent" />
            <Path x:Name="Arrow" Grid.Column="1" HorizontalAlignment="Center" VerticalAlignment="Center" Data="M 0 0 L 4 4 L 8 0 Z" Fill="{TemplateBinding Foreground}" />
        </Grid>
    </ControlTemplate>

    <ControlTemplate x:Key="ComboBoxTextBox" TargetType="{x:Type TextBox}">
        <ScrollViewer x:Name="PART_ContentHost" Padding="{TemplateBinding Padding}" BorderThickness="0" IsTabStop="False"
                  Foreground="{shared:ThemeBinding ControlForegroundBrush}" />
    </ControlTemplate>

    <Style x:Key="{x:Type ComboBox}" TargetType="{x:Type ComboBox}">
        <Setter Property="SnapsToDevicePixels" Value="true" />
        <Setter Property="OverridesDefaultStyle" Value="true" />
        <Setter Property="FocusVisualStyle" Value="{StaticResource OuterBorderFVS}" />
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto" />
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
        <Setter Property="ScrollViewer.CanContentScroll" Value="true" />
        <Setter Property="BorderBrush" Value="{Binding Path=Theme.ControlBorderBrush, Source={x:Static shared:Theme.Instance}}" />
        <Setter Property="Foreground" Value="{Binding Path=Theme.ControlForegroundBrush, Source={x:Static shared:Theme.Instance}}" />
        <Setter Property="MinWidth" Value="120" />
        <Setter Property="MinHeight" Value="20" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ComboBox}">
                    <Grid x:Name="mainGrid" Background="{shared:ThemeBinding ControlBackgroundBrush}">
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualState x:Name="Normal" />
                                <VisualState x:Name="MouseOver" />
                                <VisualState x:Name="Disabled">
                                </VisualState>
                            </VisualStateGroup>
                            <VisualStateGroup x:Name="EditStates">
                                <VisualState x:Name="Editable">
                                    <Storyboard>
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Visibility)" Storyboard.TargetName="PART_EditableTextBox">
                                            <DiscreteObjectKeyFrame KeyTime="0" Value="{x:Static Visibility.Visible}" />
                                        </ObjectAnimationUsingKeyFrames>
                                        <ObjectAnimationUsingKeyFrames
                        Storyboard.TargetProperty="(UIElement.Visibility)" Storyboard.TargetName="ContentSite">
                                            <DiscreteObjectKeyFrame KeyTime="0" Value="{x:Static Visibility.Hidden}" />
                                        </ObjectAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Uneditable" />
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                        <ToggleButton x:Name="ToggleButton" Template="{StaticResource ComboBoxToggleButton}" Focusable="false" ClickMode="Press"
                          Foreground="{TemplateBinding Foreground}" BorderBrush="{TemplateBinding BorderBrush}"
                          IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"/>
                        <ContentControl x:Name="ContentSite" IsHitTestVisible="False" Margin="5,3,23,3" VerticalAlignment="Stretch" HorizontalAlignment="Left"
                            Foreground="{Binding Path=Foreground, ElementName=ToggleButton}">
                            <ContentPresenter IsHitTestVisible="False"
                                Content="{TemplateBinding SelectionBoxItem}"
                                ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}"
                                ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}">
                            </ContentPresenter>
                        </ContentControl>
                        <Border x:Name="editableBackground" Margin="3,1,20,1">
                            <TextBox x:Name="PART_EditableTextBox"
                       Style="{x:Null}"
                       Template="{StaticResource ComboBoxTextBox}"
                       HorizontalAlignment="Stretch"
                       VerticalAlignment="Center"
                       Margin="0,-1,0,1"
                       Focusable="True"
                       Foreground="{TemplateBinding Foreground}"
                       SelectionBrush="{shared:ThemeBinding TextBoxSelectionBrush}"
                       SelectionOpacity="{shared:ThemeBinding TextBoxSelectionOpacity}"
                       Background="Transparent"
                       Visibility="Hidden"
                       IsReadOnly="{TemplateBinding IsReadOnly}" />
                        </Border>
                        <Popup x:Name="PART_Popup" Placement="Bottom" IsOpen="{TemplateBinding IsDropDownOpen}" AllowsTransparency="True" Focusable="False" PopupAnimation="Slide">
                            <Grid x:Name="DropDown" SnapsToDevicePixels="True" MinWidth="{TemplateBinding ActualWidth}" MaxHeight="{TemplateBinding MaxDropDownHeight}">
                                <Border x:Name="DropDownBorder" BorderThickness="1" Margin="0,2,0,0"
                        BorderBrush="{shared:ThemeBinding ControlForegroundBrush}"
                        Background="{shared:ThemeBinding ComboBoxDropdownBackgroundBrush}" />
                                <ScrollViewer Margin="4,6,4,6" SnapsToDevicePixels="True">
                                    <ItemsPresenter x:Name="ItemsPresenter" KeyboardNavigation.DirectionalNavigation="Contained" />
                                </ScrollViewer>
                            </Grid>
                        </Popup>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="mainGrid" Property="Background" Value="{Binding Path=Theme.ControlDisabledBackgroundBrush, Source={x:Static shared:Theme.Instance}}" />
                            <Setter TargetName="ToggleButton" Property="Foreground" Value="{Binding Path=Theme.ControlDisabledForegroundBrush, Source={x:Static shared:Theme.Instance}}" />
                            <Setter Property="Foreground" Value="{Binding Path=Theme.ControlDisabledBackgroundBrush, Source={x:Static shared:Theme.Instance}}" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="mainGrid" Property="Background" Value="{Binding Path=Theme.ControlHoverBackgroundBrush, Source={x:Static shared:Theme.Instance}}" />
                            <Setter Property="Foreground" Value="{Binding Path=Theme.ControlHoverForegroundBrush, Source={x:Static shared:Theme.Instance}}" />
                        </Trigger>
                        <Trigger SourceName="PART_EditableTextBox" Property="IsMouseOver" Value="True">
                            <Setter TargetName="mainGrid" Property="Background" Value="{Binding Path=Theme.ControlHoverBackgroundBrush, Source={x:Static shared:Theme.Instance}}" />
                            <Setter Property="Foreground" Value="{Binding Path=Theme.ControlHoverForegroundBrush, Source={x:Static shared:Theme.Instance}}" />
                        </Trigger>
                        <Trigger SourceName="ToggleButton" Property="IsChecked" Value="True">
                            <Setter TargetName="mainGrid" Property="Background" Value="{Binding Path=Theme.ToggleButtonFocusedCheckedBackgroundBrush, Source={x:Static shared:Theme.Instance}}" />
                            <Setter Property="Foreground" Value="{Binding Path=Theme.ToggleButtonFocusedCheckedForegroundBrush, Source={x:Static shared:Theme.Instance}}" />
                        </Trigger>
                        <Trigger Property="HasItems" Value="false">
                            <Setter TargetName="DropDownBorder" Property="MinHeight" Value="95" />
                        </Trigger>
                        <Trigger Property="IsGrouping" Value="true">
                            <Setter Property="ScrollViewer.CanContentScroll" Value="false" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="{x:Type ComboBoxItem}" TargetType="{x:Type ComboBoxItem}">
        <Setter Property="SnapsToDevicePixels" Value="true" />
        <Setter Property="FocusVisualStyle" Value="{StaticResource InnerBorderDarkFVS}" />
        <Setter Property="OverridesDefaultStyle" Value="true" />
        <Setter Property="Foreground" Value="{Binding Path=Theme.ControlForegroundBrush, Source={x:Static shared:Theme.Instance}}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ComboBoxItem}">
                    <Border x:Name="Border" Padding="{shared:ThemeBinding ComboBoxItemMargin}" SnapsToDevicePixels="true" Background="Transparent">
                        <ContentPresenter />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsSelected" Value="True">
                            <Setter TargetName="Border" Property="Background" Value="{Binding Path=Theme.ComboBoxItemSelectedBackgroundBrush, Source={x:Static shared:Theme.Instance}}" />
                            <Setter Property="Foreground" Value="{Binding Path=Theme.ComboBoxItemSelectedForegroundBrush, Source={x:Static shared:Theme.Instance}}" />
                            <Setter Property="FocusVisualStyle" Value="{StaticResource InnerBorderLightFVS}" />
                        </Trigger>
                        <Trigger Property="IsHighlighted" Value="True">
                            <Setter TargetName="Border" Property="Background" Value="{Binding Path=Theme.ComboBoxItemHighlightedBackgroundBrush, Source={x:Static shared:Theme.Instance}}" />
                            <Setter Property="Foreground" Value="{Binding Path=Theme.ComboBoxItemHighlightedForegroundBrush, Source={x:Static shared:Theme.Instance}}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="{x:Type ListBoxItem}" TargetType="{x:Type ListBoxItem}">
        <Setter Property="SnapsToDevicePixels" Value="true" />
        <Setter Property="OverridesDefaultStyle" Value="true" />
        <Setter Property="FocusVisualStyle" Value="{StaticResource InnerBorderDarkFVS}" />
        <Setter Property="Foreground" Value="{Binding Path=Theme.ControlForegroundBrush, Source={x:Static shared:Theme.Instance}}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListBoxItem}">
                    <Border x:Name="Border" Padding="{shared:ThemeBinding ListBoxItemMargin}" SnapsToDevicePixels="true" Background="Transparent">
                        <ContentPresenter />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsSelected" Value="True">
                            <Setter TargetName="Border" Property="Background" Value="{Binding Path=Theme.ListBoxItemFocusedSelectedBackgroundBrush, Source={x:Static shared:Theme.Instance}}" />
                            <Setter Property="Foreground" Value="{Binding Path=Theme.ListBoxItemFocusedSelectedForegroundBrush, Source={x:Static shared:Theme.Instance}}" />
                        </Trigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=IsSelected, RelativeSource={RelativeSource Self}}" Value="True" />
                                <Condition Binding="{Binding IsKeyboardFocusWithin, RelativeSource={RelativeSource AncestorType={x:Type ListBox}}}" Value="False" />
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="Border" Property="Background" Value="{Binding Path=Theme.ListBoxItemSelectedBackgroundBrush, Source={x:Static shared:Theme.Instance}}" />
                            <Setter Property="Foreground" Value="{Binding Path=Theme.ListBoxItemSelectedForegroundBrush, Source={x:Static shared:Theme.Instance}}" />
                        </MultiDataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type ListBox}" BasedOn="{StaticResource {x:Type ListBox}}">
        <Setter Property="BorderBrush" Value="{Binding Path=Theme.ControlBorderBrush, Source={x:Static shared:Theme.Instance}}" />
        <Setter Property="Background" Value="{Binding Path=Theme.ControlBackgroundBrush, Source={x:Static shared:Theme.Instance}}" />
        <Setter Property="BorderThickness" Value="{Binding Path=Theme.ControlBorderThickness, Source={x:Static shared:Theme.Instance}}" />
        <Setter Property="TextElement.Foreground" Value="{Binding Path=Theme.ControlForegroundBrush, Source={x:Static shared:Theme.Instance}}" />
        <Style.Triggers>
            <Trigger Property="IsKeyboardFocusWithin" Value="True">
                <Setter Property="BorderBrush" Value="{Binding Path=Theme.ControlFocusedBorderBrush, Source={x:Static shared:Theme.Instance}}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="{x:Type TreeView}" TargetType="TreeView">
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="BorderBrush" Value="{Binding Path=Theme.ControlBorderBrush, Source={x:Static shared:Theme.Instance}}" />
        <Setter Property="Background" Value="{Binding Path=Theme.ControlBackgroundBrush, Source={x:Static shared:Theme.Instance}}" />
        <Setter Property="BorderThickness" Value="{Binding Path=Theme.ControlBorderThickness, Source={x:Static shared:Theme.Instance}}" />
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto" />
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
        <Setter Property="TextElement.Foreground" Value="{Binding Path=Theme.ControlForegroundBrush, Source={x:Static shared:Theme.Instance}}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="TreeView">
                    <Border BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}" Background="{TemplateBinding Background}">
                        <ScrollViewer Focusable="False" CanContentScroll="False" Padding="4">
                            <ItemsPresenter />
                        </ScrollViewer>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsKeyboardFocusWithin" Value="True">
                <Setter Property="BorderBrush" Value="{Binding Path=Theme.ControlFocusedBorderBrush, Source={x:Static shared:Theme.Instance}}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="{x:Type TreeViewItem}" TargetType="{x:Type TreeViewItem}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="HorizontalContentAlignment" Value="{Binding Path=HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
        <Setter Property="VerticalContentAlignment" Value="{Binding Path=VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
        <Setter Property="Foreground" Value="{Binding Path=Theme.ControlForegroundBrush, Source={x:Static shared:Theme.Instance}}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TreeViewItem}">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition MinWidth="20" Width="Auto" />
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="*" />
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto" />
                            <RowDefinition />
                        </Grid.RowDefinitions>
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="SelectionStates">
                                <VisualState x:Name="Selected">
                                    <Storyboard>
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetName="border" Storyboard.TargetProperty="Background">
                                            <DiscreteObjectKeyFrame KeyTime="0" Value="{shared:ThemeBinding TreeViewItemFocusedSelectedBackgroundBrush}" />
                                        </ObjectAnimationUsingKeyFrames>
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetName="content" Storyboard.TargetProperty="Foreground">
                                            <DiscreteObjectKeyFrame KeyTime="0" Value="{shared:ThemeBinding TreeViewItemFocusedSelectedForegroundBrush}" />
                                        </ObjectAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Unselected" />
                                <VisualState x:Name="SelectedInactive">
                                    <Storyboard>
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetName="border" Storyboard.TargetProperty="Background">
                                            <DiscreteObjectKeyFrame KeyTime="0" Value="{shared:ThemeBinding TreeViewItemSelectedBackgroundBrush}" />
                                        </ObjectAnimationUsingKeyFrames>
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetName="content" Storyboard.TargetProperty="Foreground">
                                            <DiscreteObjectKeyFrame KeyTime="0" Value="{shared:ThemeBinding TreeViewItemSelectedForegroundBrush}" />
                                        </ObjectAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                            <VisualStateGroup x:Name="ExpansionStates">
                                <VisualState x:Name="Expanded">
                                    <Storyboard>
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Visibility)" Storyboard.TargetName="ItemsHost">
                                            <DiscreteObjectKeyFrame KeyTime="0" Value="{x:Static Visibility.Visible}" />
                                        </ObjectAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Collapsed" />
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                        <ToggleButton x:Name="Expander" Style="{StaticResource ExpandCollapseToggleStyle}" ClickMode="Press" IsChecked="{Binding IsExpanded, RelativeSource={RelativeSource TemplatedParent}}"/>
                        <Border x:Name="border" Grid.Column="1" Background="{TemplateBinding Background}" Padding="{shared:ThemeBinding TreeViewItemMargin}" SnapsToDevicePixels="True">
                            <ContentControl x:Name="content" Focusable="False" Foreground="{TemplateBinding Foreground}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}">
                                <ContentPresenter x:Name="PART_Header" ContentSource="Header" />
                            </ContentControl>
                        </Border>
                        <ItemsPresenter x:Name="ItemsHost" Grid.Row="1" Grid.Column="1" Grid.ColumnSpan="2" Visibility="Collapsed" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="HasItems" Value="false">
                            <Setter TargetName="Expander" Property="Visibility" Value="Hidden" />
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="HasHeader" Value="false" />
                                <Condition Property="Width" Value="Auto" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="PART_Header" Property="MinWidth" Value="75" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="HasHeader" Value="false" />
                                <Condition Property="Height" Value="Auto" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="PART_Header" Property="MinHeight" Value="20" />
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <shared:PercentConverter x:Key="PercentConverter" />
    <shared:HeightToMarginConverter x:Key="HeightToMarginConverter" />

    <Style TargetType="{x:Type shared:WorkingBar}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Foreground" Value="{Binding Path=Theme.ControlForegroundBrush, Source={x:Static shared:Theme.Instance}}" />
        <Setter Property="Height" Value="5" />
        <Setter Property="HorizontalAlignment" Value="Stretch" />
        <Setter Property="Margin" Value="0,1" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type shared:WorkingBar}">
                    <Border Background="{TemplateBinding Background}" ClipToBounds="True">
                        <Canvas x:Name="canvas" Margin="{Binding Path=Height, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource HeightToMarginConverter}}">
                            <Ellipse x:Name="r1" Width="{TemplateBinding Height}" Height="{TemplateBinding Height}" Fill="{TemplateBinding Foreground}">
                                <Canvas.Left>
                                    <MultiBinding Converter="{StaticResource PercentConverter}">
                                        <Binding Path="Pos1" RelativeSource="{RelativeSource TemplatedParent}" />
                                        <Binding Path="ActualWidth" ElementName="canvas" />
                                    </MultiBinding>
                                </Canvas.Left>
                            </Ellipse>
                            <Ellipse x:Name="r2" Width="{TemplateBinding Height}" Height="{TemplateBinding Height}" Fill="{TemplateBinding Foreground}">
                                <Canvas.Left>
                                    <MultiBinding Converter="{StaticResource PercentConverter}">
                                        <Binding Path="Pos2" RelativeSource="{RelativeSource TemplatedParent}" />
                                        <Binding Path="ActualWidth" ElementName="canvas" />
                                    </MultiBinding>
                                </Canvas.Left>
                            </Ellipse>
                            <Ellipse x:Name="r3" Width="{TemplateBinding Height}" Height="{TemplateBinding Height}" Fill="{TemplateBinding Foreground}">
                                <Canvas.Left>
                                    <MultiBinding Converter="{StaticResource PercentConverter}">
                                        <Binding Path="Pos3" RelativeSource="{RelativeSource TemplatedParent}" />
                                        <Binding Path="ActualWidth" ElementName="canvas" />
                                    </MultiBinding>
                                </Canvas.Left>
                            </Ellipse>
                            <Ellipse x:Name="r4" Width="{TemplateBinding Height}" Height="{TemplateBinding Height}" Fill="{TemplateBinding Foreground}">
                                <Canvas.Left>
                                    <MultiBinding Converter="{StaticResource PercentConverter}">
                                        <Binding Path="Pos4" RelativeSource="{RelativeSource TemplatedParent}" />
                                        <Binding Path="ActualWidth" ElementName="canvas" />
                                    </MultiBinding>
                                </Canvas.Left>
                            </Ellipse>
                            <Ellipse x:Name="r5" Width="{TemplateBinding Height}" Height="{TemplateBinding Height}" Fill="{TemplateBinding Foreground}">
                                <Canvas.Left>
                                    <MultiBinding Converter="{StaticResource PercentConverter}">
                                        <Binding Path="Pos5" RelativeSource="{RelativeSource TemplatedParent}" />
                                        <Binding Path="ActualWidth" ElementName="canvas" />
                                    </MultiBinding>
                                </Canvas.Left>
                            </Ellipse>
                        </Canvas>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type shared:SplitTabsControl}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type shared:SplitTabsControl}">
                    <shared:SlotPanel x:Name="PART_Host" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type shared:TabDockSpot}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type shared:TabDockSpot}">
                    <Grid Background="Transparent">
                        <Rectangle SnapsToDevicePixels="True" Fill="#70BFDFFF" Stroke="Black" StrokeThickness="1" Margin="3" />
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type shared:TabDropTargetWindow}">
        <Setter Property="ShowInTaskbar" Value="False" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Topmost" Value="True" />
        <Setter Property="ShowActivated" Value="False" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type shared:TabDropTargetWindow}">
                    <Grid DataContext="{Binding RelativeSource={RelativeSource TemplatedParent}}" >
                        <shared:TabDockSpot IsTabbed="True" DestinationNode="{Binding Path=TargetNode}"
                             Visibility="{Binding Path=IsTabbedSpotVisible, Converter={StaticResource BooleanFalseToHiddenConverter}}"
                             IsHitTestVisible="{Binding Path=IsTabbedSpotVisible}">
                            <shared:TabDockSpot.Template>
                                <ControlTemplate TargetType="{x:Type shared:TabDockSpot}">
                                    <Border Background="Transparent" />
                                </ControlTemplate>
                            </shared:TabDockSpot.Template>
                        </shared:TabDockSpot>
                        <StackPanel x:Name="panel" VerticalAlignment="Center" HorizontalAlignment="Center" Opacity="0"
                        Visibility="{Binding Path=AreDockSpotsVisible, Converter={StaticResource b2v}}">
                            <shared:TabDockSpot Dock="Top" DestinationNode="{Binding Path=VerticalParentNode}"
                             Visibility="{Binding Path=IsVerticalParentVisible, Converter={StaticResource b2v}}"
                             IsHitTestVisible="{Binding Path=IsVerticalParentVisible}"
                             Width="60" Height="20" />
                            <shared:TabDockSpot Dock="Top" DestinationNode="{Binding Path=TargetNode}" Width="40" Height="30" />
                            <StackPanel Orientation="Horizontal">
                                <shared:TabDockSpot Dock="Left" DestinationNode="{Binding Path=HorizontalParentNode}"
                               Visibility="{Binding Path=IsHorizontalParentVisible, Converter={StaticResource b2v}}"
                               IsHitTestVisible="{Binding Path=IsHorizontalParentVisible}"
                               Width="30" Height="50" Margin="0,-10" />
                                <shared:TabDockSpot Dock="Left" DestinationNode="{Binding Path=TargetNode}" Width="40" Height="30" />
                                <shared:TabDockSpot IsTabbed="True" DestinationNode="{Binding Path=TargetNode}"
                             Visibility="{Binding Path=IsTabbedSpotVisible, Converter={StaticResource BooleanFalseToHiddenConverter}}"
                             IsHitTestVisible="{Binding Path=IsTabbedSpotVisible}"
                             Width="50" Height="40" />
                                <shared:TabDockSpot Dock="Right" DestinationNode="{Binding Path=TargetNode}" Width="40" Height="30" />
                                <shared:TabDockSpot Dock="Right" DestinationNode="{Binding Path=HorizontalParentNode}"
                               Visibility="{Binding Path=IsHorizontalParentVisible, Converter={StaticResource b2v}}"
                               IsHitTestVisible="{Binding Path=IsHorizontalParentVisible}"
                               Width="30" Height="50" Margin="0,-10" />
                            </StackPanel>
                            <shared:TabDockSpot Dock="Bottom" DestinationNode="{Binding Path=TargetNode}" Width="40" Height="30" />
                            <shared:TabDockSpot Dock="Bottom" DestinationNode="{Binding Path=VerticalParentNode}"
                             Visibility="{Binding Path=IsVerticalParentVisible, Converter={StaticResource b2v}}"
                             IsHitTestVisible="{Binding Path=IsVerticalParentVisible}"
                             Width="60" Height="20" />
                        </StackPanel>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsVisible" Value="True">
                            <Trigger.EnterActions>
                                <BeginStoryboard x:Name="fadeIn">
                                    <Storyboard>
                                        <DoubleAnimation To="1" Duration="0:0:0.3" Storyboard.TargetName="panel" Storyboard.TargetProperty="Opacity" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.EnterActions>
                            <Trigger.ExitActions>
                                <StopStoryboard BeginStoryboardName="fadeIn" />
                            </Trigger.ExitActions>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType='{x:Type shared:SlotSizer}'>
        <Setter Property='Focusable' Value='False' />
        <Setter Property='SnapsToDevicePixels' Value='False' />
        <Setter Property='Template'>
            <Setter.Value>
                <ControlTemplate TargetType='{x:Type shared:SlotSizer}'>
                    <Border Background='Transparent'>
                        <!--<Rectangle x:Name='line' Fill='#ffe0e0e0' />-->
                    </Border>
                    <!--<ControlTemplate.Triggers>
            <Trigger Property='SizeDirection' Value='Horizontal'>
              <Setter TargetName='line' Property='VerticalAlignment' Value='Stretch' />
              <Setter TargetName='line' Property='HorizontalAlignment' Value='Center' />
              <Setter TargetName='line' Property='Width' Value='1' />
              <Setter TargetName='line' Property='Margin' Value='0,24' />
            </Trigger>
            <Trigger Property='SizeDirection' Value='Vertical'>
              <Setter TargetName='line' Property='VerticalAlignment' Value='Center' />
              <Setter TargetName='line' Property='HorizontalAlignment' Value='Stretch' />
              <Setter TargetName='line' Property='Height' Value='1' />
              <Setter TargetName='line' Property='Margin' Value='24,0' />
            </Trigger>
          </ControlTemplate.Triggers>-->
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property='SizeDirection' Value='Horizontal'>
                <Setter Property='Cursor' Value='SizeWE' />
            </Trigger>
            <Trigger Property='SizeDirection' Value='Vertical'>
                <Setter Property='Cursor' Value='SizeNS' />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="TabScrollerButtonStyle" TargetType="{x:Type RepeatButton}">
        <Setter Property="Foreground" Value="#FF7F7F7F" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RepeatButton}">
                    <Border Background="Transparent">
                        <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Foreground" Value="#FFA00000" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Foreground" Value="#FFD00000" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="TabScrollBarStyle" TargetType="{x:Type ScrollBar}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ScrollBar}">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="16" />
                            <ColumnDefinition Width="*" />
                            <ColumnDefinition Width="16" />
                        </Grid.ColumnDefinitions>
                        <RepeatButton x:Name="leftButton" Grid.Column="0" Style="{StaticResource TabScrollerButtonStyle}" HorizontalAlignment="Center" VerticalAlignment="Center"
                          Command="ScrollBar.LineLeftCommand" Focusable="False">
                            <Grid>
                                <Path Fill="{Binding Path=Foreground, ElementName=leftButton}" HorizontalAlignment="Center" VerticalAlignment="Center" Margin="1,0,0,0">
                                    <Path.Data>
                                        <PathGeometry Figures="M0,0 L0,6 L6,0 z" />
                                    </Path.Data>
                                    <Path.LayoutTransform>
                                        <RotateTransform Angle="-45" />
                                    </Path.LayoutTransform>
                                </Path>
                            </Grid>
                        </RepeatButton>
                        <RepeatButton x:Name="rightButton" Grid.Column="2" Style="{StaticResource TabScrollerButtonStyle}" HorizontalAlignment="Center" VerticalAlignment="Center"
                          Command="ScrollBar.LineRightCommand" Focusable="False">
                            <Grid>
                                <Path Fill="{Binding Path=Foreground, ElementName=rightButton}" HorizontalAlignment="Center" VerticalAlignment="Center" Margin="0,0,1,0">
                                    <Path.Data>
                                        <PathGeometry Figures="M0,0 L0,6 L6,0 z" />
                                    </Path.Data>
                                    <Path.LayoutTransform>
                                        <RotateTransform Angle="135" />
                                    </Path.LayoutTransform>
                                </Path>
                            </Grid>
                        </RepeatButton>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type shared:ActivatableTabControl}">
        <Setter Property="TextElement.Foreground" Value="{Binding Path=Theme.ControlForegroundBrush, Source={x:Static shared:Theme.Instance}}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type shared:ActivatableTabControl}">
                    <Border x:Name="InnerBorder"
                  BorderThickness="{shared:ThemeBinding TabControlBorderThickness}"
                  BorderBrush="{shared:ThemeBinding TabControlBorderBrush}"
                  Background="{shared:ThemeBinding TabControlBackgroundBrush}">
                        <Grid KeyboardNavigation.TabNavigation="Local">
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto" />
                                <RowDefinition Height="*" />
                            </Grid.RowDefinitions>
                            <Border x:Name="tabPanelBorder" Grid.Row="0"
                      Background="{shared:ThemeBinding TabPanelBackgroundBrush}"
                      BorderBrush="{shared:ThemeBinding TabPanelBorderBrush}"
                      BorderThickness="{shared:ThemeBinding TabPanelBorderThickness}">
                                <Grid>
                                    <ScrollViewer VerticalScrollBarVisibility="Hidden" HorizontalScrollBarVisibility="Auto" Grid.Column="1" Focusable="False">
                                        <StackPanel x:Name="HeaderPanel" Orientation="Horizontal" IsItemsHost="True" Margin="0,0,1,0" />
                                        <ScrollViewer.Template>
                                            <ControlTemplate TargetType="{x:Type ScrollViewer}">
                                                <Grid>
                                                    <ScrollContentPresenter Margin="16,0"/>
                                                    <ScrollBar x:Name="PART_HorizontalScrollBar" Orientation="Horizontal" Style="{StaticResource TabScrollBarStyle}"
                                      Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}"/>
                                                </Grid>
                                            </ControlTemplate>
                                        </ScrollViewer.Template>
                                    </ScrollViewer>
                                </Grid>
                            </Border>
                            <ContentPresenter x:Name="PART_SelectedContentHost" Grid.Row="1" ContentSource="SelectedContent" />
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsActive" Value="True">
                            <Setter TargetName="InnerBorder" Property="BorderBrush" Value="{Binding Theme.TabControlActiveBorderBrush, Source={x:Static shared:Theme.Instance}}" />
                            <Setter TargetName="InnerBorder" Property="Background" Value="{Binding Theme.TabControlActiveBackgroundBrush, Source={x:Static shared:Theme.Instance}}" />
                            <Setter TargetName="tabPanelBorder" Property="Background" Value="{Binding Theme.TabPanelActiveBackgroundBrush, Source={x:Static shared:Theme.Instance}}" />
                            <Setter TargetName="tabPanelBorder" Property="BorderBrush" Value="{Binding Theme.TabPanelActiveBorderBrush, Source={x:Static shared:Theme.Instance}}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type shared:BladeControl}">
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type shared:BladeControl}">
                    <Border BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{Binding Path=Theme.ControlBorderBrush, Source={x:Static shared:Theme.Instance}}">
                        <shared:BladePanel x:Name="PART_BladePanel" IsItemsHost="True" ClipToBounds="True" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type shared:BladePage}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type shared:BladePage}">
                    <DockPanel Background="{shared:ThemeBinding ControlBackgroundBrush}">
                        <Border x:Name="PART_Header" DockPanel.Dock="Top" BorderThickness="0,1,0,1" Margin="0,-1,0,-1" Padding="8,2" SnapsToDevicePixels="True"
                    BorderBrush="{shared:ThemeBinding ControlBorderBrush}"
                    Background="{shared:ThemeBinding ListBoxItemSelectedBackgroundBrush}">
                            <ContentControl x:Name="content" Focusable="False" Content="{TemplateBinding Header}" ContentTemplate="{TemplateBinding HeaderTemplate}"
                              Foreground="{shared:ThemeBinding ListBoxItemSelectedForegroundBrush}" />
                        </Border>
                        <ContentPresenter Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}" />
                    </DockPanel>
                    <ControlTemplate.Triggers>
                        <Trigger SourceName="PART_Header" Property="IsMouseOver" Value="True">
                            <Setter TargetName="PART_Header" Property="Background" Value="{Binding Path=Theme.BladePageHoverBackgroundBrush, Source={x:Static shared:Theme.Instance}}" />
                            <Setter TargetName="content" Property="Foreground" Value="{Binding Path=Theme.BladePageHoverForegroundBrush, Source={x:Static shared:Theme.Instance}}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="CloseButtonStyle" TargetType="{x:Type Button}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid x:Name="grid" Width="16" Height="16" Background="Transparent">
                        <Line x:Name="line1" X1="0" Y1="0" X2="7" Y2="7" Stroke="{shared:ThemeBinding ControlForegroundBrush}" StrokeThickness="2" HorizontalAlignment="Center" VerticalAlignment="Center" />
                        <Line x:Name="line2" X1="7" Y1="0" X2="0" Y2="7" Stroke="{shared:ThemeBinding ControlForegroundBrush}" StrokeThickness="2" HorizontalAlignment="Center" VerticalAlignment="Center" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="line1" Property="Stroke" Value="{Binding Path=Theme.ControlHoverForegroundBrush, Source={x:Static shared:Theme.Instance}}" />
                            <Setter TargetName="line2" Property="Stroke" Value="{Binding Path=Theme.ControlHoverForegroundBrush, Source={x:Static shared:Theme.Instance}}" />
                            <Setter TargetName="grid" Property="Background" Value="{Binding Path=Theme.ControlHoverBackgroundBrush, Source={x:Static shared:Theme.Instance}}" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="line1" Property="Stroke" Value="{Binding Path=Theme.ControlPressedForegroundBrush, Source={x:Static shared:Theme.Instance}}" />
                            <Setter TargetName="line2" Property="Stroke" Value="{Binding Path=Theme.ControlPressedForegroundBrush, Source={x:Static shared:Theme.Instance}}" />
                            <Setter TargetName="grid" Property="Background" Value="{Binding Path=Theme.ControlPressedBackgroundBrush, Source={x:Static shared:Theme.Instance}}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="line1" Property="Stroke" Value="{Binding Path=Theme.ControlDisabledForegroundBrush, Source={x:Static shared:Theme.Instance}}" />
                            <Setter TargetName="line2" Property="Stroke" Value="{Binding Path=Theme.ControlDisabledForegroundBrush, Source={x:Static shared:Theme.Instance}}" />
                            <Setter TargetName="grid" Property="Background" Value="{Binding Path=Theme.ControlDisabledBackgroundBrush, Source={x:Static shared:Theme.Instance}}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="{x:Type shared:ActivatableTabItem}" TargetType="{x:Type shared:ActivatableTabItem}">
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type shared:ActivatableTabItem}">
                    <Border x:Name="border"
                  BorderBrush="{shared:ThemeBinding TabItemBorderBrush}"
                  BorderThickness="{shared:ThemeBinding TabItemBorderThickness}"
                  Background="{shared:ThemeBinding TabItemBackgroundBrush}"
                  Margin="{shared:ThemeBinding TabItemBorderMargin}"
                  Padding="{shared:ThemeBinding TabItemBorderPadding}">
                        <Grid Background="Transparent" Focusable="False" >
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto" />
                                <ColumnDefinition Width="*" />
                            </Grid.ColumnDefinitions>
                            <Border Grid.Column="0" x:Name="PART_Header" Background="Transparent">
                                <Grid>
                                    <ContentControl x:Name="headerContent"
                                  Foreground="{shared:ThemeBinding TabItemForegroundBrush}"
                                  FontFamily="{shared:ThemeBinding TabItemFontFamily}" FontSize="{shared:ThemeBinding TabItemFontSize}"
                                  FontWeight="{shared:ThemeBinding TabItemFontWeight}" FontStyle="{shared:ThemeBinding TabItemFontStyle}">
                                        <ContentPresenter Margin="{shared:ThemeBinding TabItemHeaderMargin}" Focusable="False" ContentSource="Header" />
                                    </ContentControl>
                                    <ContentControl x:Name="selectedHeaderContent" Visibility="Hidden"
                                  Foreground="{shared:ThemeBinding TabItemSelectedForegroundBrush}"
                                  FontFamily="{shared:ThemeBinding TabItemSelectedFontFamily}" FontSize="{shared:ThemeBinding TabItemSelectedFontSize}"
                                  FontWeight="{shared:ThemeBinding TabItemSelectedFontWeight}" FontStyle="{shared:ThemeBinding TabItemSelectedFontStyle}">
                                        <ContentPresenter Margin="{shared:ThemeBinding TabItemHeaderMargin}" Focusable="False" ContentSource="Header" />
                                    </ContentControl>
                                </Grid>
                            </Border>
                            <Button x:Name="close" Style="{StaticResource CloseButtonStyle}" Focusable="False" Grid.Column="1"
                      Margin="{shared:ThemeBinding TabItemCloseButtonMargin}"
                      HorizontalAlignment="Right" VerticalAlignment="Center" ToolTip="Close" Visibility="Hidden"
                      Command="{x:Static shared:SplitTabsControl.CloseViewCommand}" />
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsSelected" Value="True">
                            <Setter TargetName="border" Property="Background" Value="{Binding Path=Theme.TabItemSelectedBackgroundBrush, Source={x:Static shared:Theme.Instance}}" />
                            <Setter TargetName="border" Property="BorderBrush" Value="{Binding Path=Theme.TabItemSelectedBorderBrush, Source={x:Static shared:Theme.Instance}}" />
                            <Setter TargetName="headerContent" Property="Visibility" Value="Hidden" />
                            <Setter TargetName="selectedHeaderContent" Property="Visibility" Value="Visible" />
                        </Trigger>
                        <DataTrigger Binding="{Binding Path=TabControlParent.IsActive, RelativeSource={RelativeSource Self}}" Value="True">
                            <Setter TargetName="border" Property="BorderBrush" Value="{Binding Theme.TabItemActiveBorderBrush, Source={x:Static shared:Theme.Instance}}" />
                            <Setter TargetName="border" Property="Background" Value="{Binding Theme.TabItemActiveBackgroundBrush, Source={x:Static shared:Theme.Instance}}" />
                        </DataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=TabControlParent.IsActive, RelativeSource={RelativeSource Self}}" Value="True" />
                                <Condition Binding="{Binding Path=IsSelected, RelativeSource={RelativeSource Self}}" Value="True" />
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="border" Property="BorderBrush" Value="{Binding Theme.TabItemActiveSelectedBorderBrush, Source={x:Static shared:Theme.Instance}}" />
                            <Setter TargetName="border" Property="Background" Value="{Binding Theme.TabItemActiveSelectedBackgroundBrush, Source={x:Static shared:Theme.Instance}}" />
                        </MultiDataTrigger>
                        <Trigger SourceName="border" Property="IsMouseOver" Value="True">
                            <Setter TargetName="border" Property="Background" Value="{Binding Path=Theme.TabItemHoverBackgroundBrush, Source={x:Static shared:Theme.Instance}}" />
                            <Setter TargetName="border" Property="BorderBrush" Value="{Binding Path=Theme.TabItemHoverBorderBrush, Source={x:Static shared:Theme.Instance}}" />
                            <Setter TargetName="headerContent" Property="Foreground" Value="{Binding Path=Theme.TabItemHoverForegroundBrush, Source={x:Static shared:Theme.Instance}}" />
                            <Setter TargetName="selectedHeaderContent" Property="Foreground" Value="{Binding Path=Theme.TabItemHoverForegroundBrush, Source={x:Static shared:Theme.Instance}}" />
                            <Setter TargetName="close" Property="Visibility" Value="Visible" />
                        </Trigger>
                        <Trigger Property="IsSelected" Value="True">
                            <Setter TargetName="selectedHeaderContent" Property="Foreground" Value="{Binding Path=Theme.TabItemActiveSelectedForegroundBrush, Source={x:Static shared:Theme.Instance}}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type shared:FloatingWindow}">
        <Setter Property="WindowStyle" Value="ToolWindow" />
        <Setter Property="ShowInTaskbar" Value="False" />
    </Style>

    <shared:DialogTextTemplateSelector x:Key="DialogTextTemplateSelector">
        <shared:DialogTextTemplateSelector.TextTemplate>
            <DataTemplate>
                <TextBlock Text="{Binding}" TextWrapping="Wrap" />
            </DataTemplate>
        </shared:DialogTextTemplateSelector.TextTemplate>
    </shared:DialogTextTemplateSelector>

    <Style TargetType="{x:Type shared:DialogBase}" BasedOn="{StaticResource {x:Type Window}}">
        <Style.Resources>
            <Style TargetType="{x:Type Button}" BasedOn="{StaticResource {x:Type Button}}">
                <Setter Property="Margin" Value="10,0,0,0" />
                <Setter Property="Padding" Value="10,0" />
                <Setter Property="MinWidth" Value="85" />
            </Style>
            <DataTemplate x:Key="{DataTemplateKey {x:Type sys:String}}">
                <TextBlock Text="{Binding}" TextWrapping="Wrap" />
            </DataTemplate>
        </Style.Resources>
        <Setter Property="ShowInTaskbar" Value="False" />
        <Setter Property="MainContentTemplate">
            <Setter.Value>
                <DataTemplate>
                    <Grid>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="*" />
                            <RowDefinition Height="Auto" />
                            <RowDefinition Height="Auto" />
                            <RowDefinition Height="Auto" />
                        </Grid.RowDefinitions>
                        <Border Background="{shared:ThemeBinding ViewBackgroundBrush}" Padding="10">
                            <ContentPresenter x:Name="PART_MainContentPresenter" Content="{Binding Path=Dialog.MainContent}"
                                DataContext="{Binding Path=Dialog}"
                                Focusable="False" Grid.Row="0" MinWidth="350" MinHeight="75" />
                        </Border>
                        <Border Grid.Row="1" Background="{shared:ThemeBinding WindowBackgroundBrush}" BorderThickness="0,1,0,0" BorderBrush="#adadad" SnapsToDevicePixels="true" Padding="10">
                            <DockPanel>
                                <Expander x:Name="expander" DockPanel.Dock="Left" Header="_Show details" VerticalAlignment="Top" IsExpanded="False" Visibility="Collapsed" />
                                <ItemsControl ItemsSource="{Binding Path=Dialog.Buttons}" HorizontalAlignment="Right" VerticalAlignment="Center" Focusable="False">
                                    <ItemsControl.ItemsPanel>
                                        <ItemsPanelTemplate>
                                            <StackPanel Orientation="Horizontal" />
                                        </ItemsPanelTemplate>
                                    </ItemsControl.ItemsPanel>
                                </ItemsControl>
                            </DockPanel>
                        </Border>
                        <Border x:Name="detailsBorder" Grid.Row="2" Background="#ededed" BorderThickness="0,1,0,0" BorderBrush="#adadad" SnapsToDevicePixels="true" Padding="10" Visibility="Collapsed">
                            <ContentControl Focusable="False" Content="{Binding Path=Details}" ContentTemplate="{Binding Path=DetailsTemplate}"
                              ContentTemplateSelector="{StaticResource DialogTextTemplateSelector}" DataContext="{Binding Path=Dialog}" />
                        </Border>
                        <Border x:Name="footnoteBorder" Grid.Row="3" Background="#ededed" BorderThickness="0,1,0,0" BorderBrush="#adadad" SnapsToDevicePixels="true" Padding="10">
                            <ContentControl Content="{Binding Path=Footnote}" ContentTemplate="{Binding Path=FootnoteTemplate}"
                              ContentTemplateSelector="{StaticResource DialogTextTemplateSelector}" DataContext="{Binding Path=Dialog}" />
                        </Border>
                    </Grid>
                    <DataTemplate.Triggers>
                        <DataTrigger Binding="{Binding Path=Dialog.Footnote}" Value="{x:Null}">
                            <Setter TargetName="footnoteBorder" Property="Visibility" Value="Collapsed" />
                        </DataTrigger>
                        <DataTrigger Binding="{Binding Path=Dialog.ProgressiveDisclosure}" Value="True">
                            <Setter TargetName="expander" Property="Visibility" Value="Visible" />
                        </DataTrigger>
                        <Trigger SourceName="expander" Property="IsExpanded" Value="True">
                            <Setter TargetName="expander" Property="Header" Value="_Hide details" />
                            <Setter TargetName="detailsBorder" Property="Visibility" Value="Visible" />
                        </Trigger>
                    </DataTemplate.Triggers>
                </DataTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--<Style TargetType="{x:Type shared:SelectDevkitDialog}" BasedOn="{StaticResource {x:Type shared:DialogBase}}">
    <Setter Property="ResizeMode" Value="NoResize" />
    <Setter Property="SizeToContent" Value="WidthAndHeight" />
  </Style>-->

    <Style TargetType="{x:Type shared:StatusDialog}" BasedOn="{StaticResource {x:Type shared:DialogBase}}">
    </Style>

    <DataTemplate x:Key="LegendDataTemplate">
        <DockPanel Background="Transparent" ToolTip="{Binding Path=DataSource.Name}">
            <Border DockPanel.Dock="Right" Padding="4" VerticalAlignment="Center" Margin="5,2"
              Visibility="{Binding Path=IsGraphed, Converter={StaticResource b2v}}"
              Background="{shared:ThemeBinding ConsoleViewBackgroundBrush}">
                <Line Height="2" StrokeThickness="2" Y1="1" Y2="1" X1="0" X2="30" VerticalAlignment="Center" Stroke="{Binding Path=Stroke}" StrokeDashArray="{Binding Path=StrokeDashArray}" StrokeDashCap="Round"  />
            </Border>
            <TextBlock Margin="5,2" Text="{Binding Path=DataSource.Name}" TextTrimming="CharacterEllipsis" FontSize="10" />
        </DockPanel>
    </DataTemplate>

    <Style x:Key="LegendListBoxStyle" TargetType="{x:Type ListBox}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListBox}">
                    <WrapPanel IsItemsHost="True" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="LegendDarkFVS">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Rectangle StrokeThickness="1" Stroke="{shared:ThemeBinding DarkFocusVisualBrush}"
                     Margin="1,5,11,5" StrokeDashArray="2 3" SnapsToDevicePixels="True" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="LegendLightFVS">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Rectangle StrokeThickness="1" Stroke="{shared:ThemeBinding LightFocusVisualBrush}"
                     Margin="1,5,11,5" StrokeDashArray="2 3" SnapsToDevicePixels="True" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="LegendListBoxItemStyle" TargetType="{x:Type ListBoxItem}">
        <Setter Property="FocusVisualStyle" Value="{StaticResource LegendDarkFVS}" />
        <Setter Property="ContentTemplate" Value="{StaticResource LegendDataTemplate}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListBoxItem}">
                    <Border x:Name="border" SnapsToDevicePixels="true" BorderBrush="{shared:ThemeBinding ControlForegroundBrush}"
                  Background="{shared:ThemeBinding ControlBackgroundBrush}"
                  BorderThickness="1" Margin="0,4,10,4">
                        <ContentControl x:Name="content" Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}"
                            Foreground="{shared:ThemeBinding ControlForegroundBrush}" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="content" Property="Foreground" Value="{Binding Path=Theme.ControlHoverForegroundBrush, Source={x:Static shared:Theme.Instance}}" />
                            <Setter TargetName="border" Property="Background" Value="{Binding Path=Theme.ControlHoverBackgroundBrush, Source={x:Static shared:Theme.Instance}}" />
                        </Trigger>
                        <Trigger Property="IsSelected" Value="True">
                            <Setter TargetName="content" Property="Foreground" Value="{Binding Path=Theme.ListBoxItemSelectedForegroundBrush, Source={x:Static shared:Theme.Instance}}" />
                            <Setter TargetName="border" Property="Background" Value="{Binding Path=Theme.ListBoxItemSelectedBackgroundBrush, Source={x:Static shared:Theme.Instance}}" />
                            <Setter Property="FocusVisualStyle" Value="{StaticResource LegendLightFVS}" />
                        </Trigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=IsSelected, RelativeSource={RelativeSource Self}}" Value="True" />
                                <Condition Binding="{Binding IsKeyboardFocusWithin, RelativeSource={RelativeSource AncestorType={x:Type ListBox}}}" Value="False" />
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="content" Property="Foreground" Value="{Binding Path=Theme.ListBoxItemFocusedSelectedForegroundBrush, Source={x:Static shared:Theme.Instance}}" />
                            <Setter TargetName="border" Property="Background" Value="{Binding Path=Theme.ListBoxItemFocusedSelectedBackgroundBrush, Source={x:Static shared:Theme.Instance}}" />
                            <Setter Property="FocusVisualStyle" Value="{StaticResource LegendDarkFVS}" />
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=IsSelected, RelativeSource={RelativeSource Self}}" Value="False" />
                                <Condition Binding="{Binding IsKeyboardFocusWithin, RelativeSource={RelativeSource Self}}" Value="True" />
                            </MultiDataTrigger.Conditions>
                            <Setter Property="FocusVisualStyle" Value="{StaticResource LegendDarkFVS}" />
                        </MultiDataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type shared:GraphDataBar}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type shared:GraphDataBar}">
                    <Grid>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="*" />
                            <RowDefinition Height="Auto" />
                        </Grid.RowDefinitions>
                        <shared:GraphGrid Grid.Row="0" x:Name="PART_GraphGrid" TimeAxis="{TemplateBinding TimeAxis}"
                              Foreground="{TemplateBinding Foreground}"
                              Background="Transparent"/>
                        <ListBox Grid.Row="1" Style="{StaticResource LegendListBoxStyle}"
                     ItemsSource="{Binding Path=DataSources, RelativeSource={RelativeSource TemplatedParent}}"
                     ItemContainerStyle="{StaticResource LegendListBoxItemStyle}" />
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type text:CaretControl}">
        <Setter Property="Width" Value="2" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="IsHitTestVisible" Value="False" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type text:CaretControl}">
                    <Rectangle x:Name="rect" Fill="#90000000" />
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsVisible" Value="True">
                            <Trigger.EnterActions>
                                <BeginStoryboard x:Name="blink">
                                    <Storyboard Duration="0:0:1" RepeatBehavior="Forever">
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetName="rect" Storyboard.TargetProperty="Opacity" >
                                            <DiscreteDoubleKeyFrame KeyTime="0:0:0" Value="1" />
                                            <DiscreteDoubleKeyFrame KeyTime="0:0:0.5" Value="0" />
                                        </DoubleAnimationUsingKeyFrames>
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.EnterActions>
                            <Trigger.ExitActions>
                                <StopStoryboard BeginStoryboardName="blink" />
                            </Trigger.ExitActions>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type text:TextEditor}">
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="Background" Value="{Binding Path=Theme.ControlBackgroundBrush, Source={x:Static shared:Theme.Instance}}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type text:TextEditor}">
                    <Grid ClipToBounds="True">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="*" />
                            <RowDefinition Height="Auto" />
                        </Grid.RowDefinitions>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*" />
                            <ColumnDefinition Width="Auto" />
                        </Grid.ColumnDefinitions>
                        <Canvas x:Name="PART_HighlightCanvas" Background="{TemplateBinding Background}" Margin="4" Cursor="IBeam" />
                        <Canvas x:Name="PART_Canvas" Margin="4" Cursor="IBeam" />
                        <Canvas x:Name="selectionCanvas" Margin="4">
                            <text:SelectionVisual x:Name="PART_Selection" Stroke="{shared:ThemeBinding TextEditorSelectionBorderBrush}" SnapsToDevicePixels="True"
                                    StrokeThickness="{shared:ThemeBinding TextEditorSelectionBorderThickness}" Fill="{shared:ThemeBinding TextEditorSelectionBrush}" />
                            <text:CaretControl x:Name="PART_Caret" Height="14" Visibility="Collapsed" />
                        </Canvas>
                        <ScrollBar Grid.Row="0" Grid.Column="1" HorizontalAlignment="Right" VerticalAlignment="Stretch" Value="{Binding Path=TopVisibleLine, RelativeSource={RelativeSource TemplatedParent}}"
                       Minimum="0" Maximum="{Binding Path=VerticalScrollRange, RelativeSource={RelativeSource TemplatedParent}}"
                       LargeChange="{Binding Path=VerticalScrollPageSize, RelativeSource={RelativeSource TemplatedParent}}" SmallChange="1"
                       ViewportSize="{Binding Path=VerticalScrollPageSize, RelativeSource={RelativeSource TemplatedParent}}"
                         />
                        <ScrollBar Grid.Row="1" Grid.Column="0" HorizontalAlignment="Stretch" VerticalAlignment="Bottom" Value="{Binding Path=HorizontalOffset, RelativeSource={RelativeSource TemplatedParent}}"
                       Orientation="Horizontal"
                       Minimum="0" Maximum="{Binding Path=HorizontalScrollRange, RelativeSource={RelativeSource TemplatedParent}}"
                       LargeChange="{Binding Path=HorizontalScrollPageSize, RelativeSource={RelativeSource TemplatedParent}}" SmallChange="1"
                       ViewportSize="{Binding Path=HorizontalScrollPageSize, RelativeSource={RelativeSource TemplatedParent}}"
                         />
                        <Border Background="{TemplateBinding Background}" Grid.Column="1" Grid.Row="1" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsKeyboardFocused" Value="True">
                            <Setter TargetName="PART_Selection" Property="Stroke" Value="{Binding Path=Theme.TextEditorFocusedSelectionBorderBrush, Source={x:Static shared:Theme.Instance}}" />
                            <Setter TargetName="PART_Selection" Property="Fill" Value="{Binding Path=Theme.TextEditorFocusedSelectionBrush, Source={x:Static shared:Theme.Instance}}" />
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition SourceName="PART_Caret" Property="IsInView" Value="True" />
                                <Condition Property="IsKeyboardFocused" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="PART_Caret" Property="Visibility" Value="Visible" />
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <DataTemplate x:Key="SelectNodeMenuItemTemplate">
        <DockPanel>
            <Rectangle DockPanel.Dock="Top" HorizontalAlignment="Left" Stroke="Gray" Fill="{Binding Path=Fill}" Width="{Binding Path=Width}" Margin="{Binding Path=Margin}" Height="5" />
            <TextBlock HorizontalAlignment="Left" Margin="0,2" Text="{Binding Path=Text}" FontFamily="SmallCaption" FontSize="10" />
        </DockPanel>
    </DataTemplate>

    <shared:TimelineStatesToVisibilityConverter x:Key="TimelineStatesToVisibilityConverter" />
    <shared:ScrollRangeToVisibilityConverter x:Key="ScrollRangeToVisibilityConverter" />
    <shared:DoubleToLeftMarginConverter x:Key="DoubleToLeftMarginConverter" />

    <Style TargetType="{x:Type shared:Timeline}">
        <Setter Property="Background" Value="{Binding Path=Theme.ControlBackgroundBrush, Source={x:Static shared:Theme.Instance}}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type shared:Timeline}">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*" />
                            <ColumnDefinition Width="Auto" />
                        </Grid.ColumnDefinitions>
                        <shared:SwimlanePanel x:Name="PART_SwimlanePanel" Background="{TemplateBinding Background}"/>
                        <Grid x:Name="PART_SelectionGrid" Margin="{Binding Path=SideBarWidth, ElementName=PART_SwimlanePanel, Converter={StaticResource DoubleToLeftMarginConverter}}">
                            <shared:TimelineSelectionVisual
                  x:Name="PART_SelectionVisual" VerticalAlignment="Stretch" HorizontalAlignment="Left" Opacity="0.5" Panel.ZIndex="1" Grid.Column="1"
                  Stroke="{shared:ThemeBinding TimelineSelectionBorderBrush}" StrokeThickness="1"
                  Fill="{shared:ThemeBinding TimelineSelectionBrush}"
                  SnapsToDevicePixels="True"
                  Visibility="Collapsed">
                                <shared:TimelineSelectionVisual.RenderTransform>
                                    <TranslateTransform x:Name="PART_SelectionVisualTransform" />
                                </shared:TimelineSelectionVisual.RenderTransform>
                            </shared:TimelineSelectionVisual>
                            <Border x:Name="PART_SelectionTip" BorderThickness="1" Visibility="Collapsed" Cursor="SizeNS" Grid.Column="1"
                  BorderBrush="{shared:ThemeBinding ControlForegroundBrush}"
                  Background="{shared:ThemeBinding WindowBackgroundBrush}"
                  VerticalAlignment="Top" HorizontalAlignment="Left" Panel.ZIndex="2">
                                <TextBlock Margin="4" FontSize="10" Text="{Binding Path=SelectionTipText, RelativeSource={RelativeSource TemplatedParent}}"
                   Foreground="{shared:ThemeBinding ControlForegroundBrush}" />
                                <Border.RenderTransform>
                                    <TranslateTransform x:Name="PART_SelectionTipTransform" />
                                </Border.RenderTransform>
                            </Border>
                        </Grid>
                        <ScrollBar Grid.Column="1" Orientation="Vertical" Height="{Binding Path=TotalComputedHeight, ElementName=PART_SwimlanePanel}" VerticalAlignment="Top"
                       ViewportSize="{Binding Path=VisibleHeight, ElementName=PART_SwimlanePanel}" Value="{Binding Path=ScrollOffset, ElementName=PART_SwimlanePanel, Mode=TwoWay}"
                       Minimum="0" Maximum="{Binding Path=ScrollRange, ElementName=PART_SwimlanePanel}" SmallChange="5" LargeChange="{Binding Path=VisibleHeight, ElementName=PART_SwimlanePanel}"
                       Visibility="{Binding Path=ScrollRange, ElementName=PART_SwimlanePanel, Converter={StaticResource ScrollRangeToVisibilityConverter}}" />
                        <Button HorizontalAlignment="Right" VerticalAlignment="Top" Margin="8,32" Opacity="0.5" Padding="4" Command="{x:Static shared:Timeline.ToggleScrollingCommand}" Focusable="False"
                AutomationProperties.AutomationId="SnapToRightButton" BorderThickness="0">
                            <Button.Visibility>
                                <MultiBinding Converter="{StaticResource TimelineStatesToVisibilityConverter}">
                                    <Binding Path="IsLive" RelativeSource="{RelativeSource TemplatedParent}" />
                                    <Binding Path="TimeAxis.IsAutoPanning" RelativeSource="{RelativeSource TemplatedParent}" />
                                </MultiBinding>
                            </Button.Visibility>
                            <Image Source="Resources\ScrollToRightEdge.png" Width="24" Height="24" />
                        </Button>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type shared:EventLane}">
        <Setter Property="Foreground" Value="{Binding Path=Theme.ControlForegroundBrush, Source={x:Static shared:Theme.Instance}}" />
        <Setter Property="Background" Value="{Binding Path=Theme.ControlBackgroundBrush, Source={x:Static shared:Theme.Instance}}" />
        <Setter Property="SelectionForeground" Value="{Binding Path=Theme.EventLaneSelectionForegroundBrush, Source={x:Static shared:Theme.Instance}}" />
        <Setter Property="SelectionBackground" Value="{Binding Path=Theme.EventLaneSelectionBackgroundBrush, Source={x:Static shared:Theme.Instance}}" />
        <Setter Property="FocusedForeground" Value="{Binding Path=Theme.EventLaneFocusedForegroundBrush, Source={x:Static shared:Theme.Instance}}" />
        <Setter Property="FocusedBackground" Value="{Binding Path=Theme.EventLaneFocusedBackgroundBrush, Source={x:Static shared:Theme.Instance}}" />
        <Setter Property="FocusedSelectionForeground" Value="{Binding Path=Theme.EventLaneFocusedSelectionForegroundBrush, Source={x:Static shared:Theme.Instance}}" />
        <Setter Property="FocusedSelectionBackground" Value="{Binding Path=Theme.EventLaneFocusedSelectionBackgroundBrush, Source={x:Static shared:Theme.Instance}}" />
        <Setter Property="LabelFontFamily" Value="{Binding Path=Theme.EventLaneLabelFontFamily, Source={x:Static shared:Theme.Instance}}" />
        <Setter Property="LabelFontSize" Value="{Binding Path=Theme.EventLaneLabelFontSize, Source={x:Static shared:Theme.Instance}}" />
        <Setter Property="LabelFontWeight" Value="{Binding Path=Theme.EventLaneLabelFontWeight, Source={x:Static shared:Theme.Instance}}" />
        <Setter Property="LabelFontStyle" Value="{Binding Path=Theme.EventLaneLabelFontStyle, Source={x:Static shared:Theme.Instance}}" />
        <Setter Property="BarHeight" Value="{Binding Path=Theme.EventLaneBarHeight, Source={x:Static shared:Theme.Instance}}" />
    </Style>


















    <Style x:Key="TitleBarButtonStyle" TargetType="{x:Type Button}">
        <Setter Property="Width" Value="28" />
        <Setter Property="Height" Value="24" />
        <Setter Property="Foreground" Value="{Binding Theme.TitleBarButtonForegroundBrush, Source={x:Static shared:Theme.Instance}}" />
        <Setter Property="Background" Value="{Binding Theme.TitleBarButtonBackgroundBrush, Source={x:Static shared:Theme.Instance}}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border x:Name="border" Background="{Binding Path=Background, RelativeSource={RelativeSource TemplatedParent}}">
                        <ContentPresenter VerticalAlignment="Center" HorizontalAlignment="Center" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" Value="{Binding Theme.TitleBarButtonHoverBackgroundBrush, Source={x:Static shared:Theme.Instance}}" />
                            <Setter Property="Foreground" Value="{Binding Theme.TitleBarButtonHoverForegroundBrush, Source={x:Static shared:Theme.Instance}}" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Background" Value="{Binding Theme.TitleBarButtonPressedBackgroundBrush, Source={x:Static shared:Theme.Instance}}" />
                            <Setter Property="Foreground" Value="{Binding Theme.TitleBarButtonPressedForegroundBrush, Source={x:Static shared:Theme.Instance}}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="SizerThumbStyle" TargetType="{x:Type Thumb}">
        <Setter Property="Background" Value="#08ffffff" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Thumb}">
                    <Grid x:Name="mainGrid">
                        <Border x:Name="border" Background="{TemplateBinding Background}" HorizontalAlignment="{TemplateBinding HorizontalAlignment}" VerticalAlignment="{TemplateBinding VerticalAlignment}" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="HorizontalAlignment" Value="Left">
                            <Setter TargetName="mainGrid" Property="Width" Value="20" />
                            <Setter TargetName="border" Property="Width" Value="6" />
                        </Trigger>
                        <Trigger Property="HorizontalAlignment" Value="Right">
                            <Setter TargetName="mainGrid" Property="Width" Value="20" />
                            <Setter TargetName="border" Property="Width" Value="6" />
                        </Trigger>
                        <Trigger Property="VerticalAlignment" Value="Top">
                            <Setter TargetName="mainGrid" Property="Height" Value="20" />
                            <Setter TargetName="border" Property="Height" Value="6" />
                        </Trigger>
                        <Trigger Property="VerticalAlignment" Value="Bottom">
                            <Setter TargetName="mainGrid" Property="Height" Value="20" />
                            <Setter TargetName="border" Property="Height" Value="6" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="CornerSizerThumbStyle" TargetType="{x:Type Thumb}">
        <Setter Property="Background" Value="#08ffffff" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Thumb}">
                    <Grid x:Name="mainGrid" Width="20" Height="20">
                        <Border x:Name="leftRightBorder" Background="{TemplateBinding Background}" HorizontalAlignment="{TemplateBinding HorizontalAlignment}" VerticalAlignment="Stretch" Width="6" />
                        <Border x:Name="topBottomBorder" Background="{TemplateBinding Background}" HorizontalAlignment="Stretch" VerticalAlignment="{TemplateBinding VerticalAlignment}" Height="6" />
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <DataTemplate x:Key="CloseButtonContentTemplate">
        <Grid Width="9" Height="9">
            <Path Stroke="{TemplateBinding TextElement.Foreground}" StrokeThickness="2" Data="M 0 0 L 7 7 M 0 7 L 7 0" StrokeEndLineCap="Square" StrokeStartLineCap="Square" />
        </Grid>
    </DataTemplate>

    <DataTemplate x:Key="MinimizeButtonContentTemplate">
        <Grid Width="8" Height="8">
            <Path Stroke="{TemplateBinding TextElement.Foreground}" StrokeThickness="2" Data="M 0 0 L 7 0" Margin="0,6,0,0" StrokeEndLineCap="Square" StrokeStartLineCap="Square" />
        </Grid>
    </DataTemplate>

    <DataTemplate x:Key="MaximizeButtonContentTemplate">
        <Grid Width="11" Height="11">
            <Path Stroke="{TemplateBinding TextElement.Foreground}" StrokeThickness="1" Data="M 0 0 L 0 10 L 10 10 L 10 0 z" StrokeEndLineCap="Square" StrokeStartLineCap="Square" />
            <Path Stroke="{TemplateBinding TextElement.Foreground}" StrokeThickness="2" Data="M 1 1 L 9 1" StrokeEndLineCap="Square" StrokeStartLineCap="Square" />
        </Grid>
    </DataTemplate>

    <DataTemplate x:Key="NewWindowButtonContentTemplate">
        <Image Source="/Microsoft.Xbox.Tools.Shared;component/Resources/NewWindow.png" />
    </DataTemplate>

    <DataTemplate x:Key="EditLayoutsButtonContentTemplate">
        <Image Source="/Microsoft.Xbox.Tools.Shared;component/Resources/EditLayouts.png" />
    </DataTemplate>

    <DataTemplate x:Key="RestoreButtonContentTemplate">
        <Grid>
            <Path Width="11" Height="11" Stroke="{TemplateBinding TextElement.Foreground}" StrokeThickness="1" Data="M 3 0 L 3 7 L 10 7 L 10 0 z" StrokeEndLineCap="Square" StrokeStartLineCap="Square" />
            <Path Width="11" Height="11" Stroke="{TemplateBinding TextElement.Foreground}" StrokeThickness="2" Data="M 4 1 L 9 1" StrokeEndLineCap="Square" StrokeStartLineCap="Square" />
            <Path Width="11" Height="11" Stroke="{TemplateBinding TextElement.Foreground}" StrokeThickness="1" Data="M 0 4 L 0 10 L 7 10 L 7 4 Z" StrokeEndLineCap="Square" StrokeStartLineCap="Square"
            Fill="{Binding Path=Background, RelativeSource={RelativeSource FindAncestor, {x:Type Button}, 1}}" />
            <Path Width="11" Height="11" Stroke="{TemplateBinding TextElement.Foreground}" StrokeThickness="2" Data="M 1 5 L 6 5" StrokeEndLineCap="Square" StrokeStartLineCap="Square" />
        </Grid>
    </DataTemplate>

    <Style x:Key="CloseFileTabButtonStyle" TargetType="{x:Type Button}">
        <Setter Property="Foreground" Value="{Binding Path=Theme.CloseFileButtonForegroundBrush, Source={x:Static shared:Theme.Instance}}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid Background="Transparent">
                        <Ellipse Width="32" Height="32" Stroke="{TemplateBinding Foreground}" StrokeThickness="2" />
                        <Path Width="32" Height="32" Stroke="{TemplateBinding Foreground}" StrokeThickness="2" Data="M 24,16 L 11,16   M 17,10 L 11,16 L 17,22   M 16,10 L 10,16 L 16,22" StrokeLineJoin="Miter" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Foreground" Value="{Binding Path=Theme.CloseFileButtonHoverForegroundBrush, Source={x:Static shared:Theme.Instance}}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="FileButtonStyle" TargetType="{x:Type Button}">
        <Setter Property="Foreground" Value="{Binding Path=Theme.FileButtonForegroundBrush, Source={x:Static shared:Theme.Instance}}" />
        <Setter Property="Background" Value="{Binding Path=Theme.FileButtonBackgroundBrush, Source={x:Static shared:Theme.Instance}}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border Background="{TemplateBinding Background}" Padding="20,4">
                        <ContentPresenter />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Foreground" Value="{Binding Path=Theme.FileButtonHoverForegroundBrush, Source={x:Static shared:Theme.Instance}}" />
                            <Setter Property="Background" Value="{Binding Path=Theme.FileButtonHoverBackgroundBrush, Source={x:Static shared:Theme.Instance}}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type shared:ViewDockSpot}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type shared:ViewDockSpot}">
                    <Grid Background="Transparent">
                        <Rectangle SnapsToDevicePixels="True" Fill="#70BFDFFF" Stroke="Black" StrokeThickness="1" Margin="3" />
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type shared:ViewDropTargetWindow}">
        <Setter Property="ShowInTaskbar" Value="False" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Topmost" Value="True" />
        <Setter Property="ShowActivated" Value="False" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type shared:ViewDropTargetWindow}">
                    <Grid DataContext="{Binding RelativeSource={RelativeSource TemplatedParent}}" >
                        <shared:ViewDockSpot IsTabbed="True" DestinationSlot="{Binding Path=TargetSlot}"
                                 Visibility="{Binding Path=IsTabbedSpotVisible, Converter={StaticResource BooleanFalseToHiddenConverter}}"
                                 IsHitTestVisible="{Binding Path=IsTabbedSpotVisible}">
                            <shared:ViewDockSpot.Template>
                                <ControlTemplate TargetType="{x:Type shared:ViewDockSpot}">
                                    <Border Background="Transparent" />
                                </ControlTemplate>
                            </shared:ViewDockSpot.Template>
                        </shared:ViewDockSpot>
                        <StackPanel x:Name="panel" VerticalAlignment="Center" HorizontalAlignment="Center" Opacity="0"
                        Visibility="{Binding Path=AreDockSpotsVisible, Converter={StaticResource b2v}}">
                            <shared:ViewDockSpot Dock="Top" DestinationSlot="{Binding Path=VerticalParentSlot}"
                                   Visibility="{Binding Path=IsVerticalParentVisible, Converter={StaticResource b2v}}"
                                   IsHitTestVisible="{Binding Path=IsVerticalParentVisible}"
                                   Width="60" Height="20" />
                            <shared:ViewDockSpot Dock="Top" DestinationSlot="{Binding Path=TargetSlot}" Width="40" Height="30" />
                            <StackPanel Orientation="Horizontal">
                                <shared:ViewDockSpot Dock="Left" DestinationSlot="{Binding Path=HorizontalParentSlot}"
                                     Visibility="{Binding Path=IsHorizontalParentVisible, Converter={StaticResource b2v}}"
                                     IsHitTestVisible="{Binding Path=IsHorizontalParentVisible}"
                                     Width="30" Height="50" Margin="0,-10" />
                                <shared:ViewDockSpot Dock="Left" DestinationSlot="{Binding Path=TargetSlot}" Width="40" Height="30" />
                                <shared:ViewDockSpot IsTabbed="True" DestinationSlot="{Binding Path=TargetSlot}"
                                     Visibility="{Binding Path=IsTabbedSpotVisible, Converter={StaticResource BooleanFalseToHiddenConverter}}"
                                     IsHitTestVisible="{Binding Path=IsTabbedSpotVisible}"
                                     Width="50" Height="40" />
                                <shared:ViewDockSpot Dock="Right" DestinationSlot="{Binding Path=TargetSlot}" Width="40" Height="30" />
                                <shared:ViewDockSpot Dock="Right" DestinationSlot="{Binding Path=HorizontalParentSlot}"
                                     Visibility="{Binding Path=IsHorizontalParentVisible, Converter={StaticResource b2v}}"
                                     IsHitTestVisible="{Binding Path=IsHorizontalParentVisible}"
                                     Width="30" Height="50" Margin="0,-10" />
                            </StackPanel>
                            <shared:ViewDockSpot Dock="Bottom" DestinationSlot="{Binding Path=TargetSlot}" Width="40" Height="30" />
                            <shared:ViewDockSpot Dock="Bottom" DestinationSlot="{Binding Path=VerticalParentSlot}"
                                   Visibility="{Binding Path=IsVerticalParentVisible, Converter={StaticResource b2v}}"
                                   IsHitTestVisible="{Binding Path=IsVerticalParentVisible}"
                                   Width="60" Height="20" />
                        </StackPanel>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsVisible" Value="True">
                            <Trigger.EnterActions>
                                <BeginStoryboard x:Name="fadeIn">
                                    <Storyboard>
                                        <DoubleAnimation To="1" Duration="0:0:0.3" Storyboard.TargetName="panel" Storyboard.TargetProperty="Opacity" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.EnterActions>
                            <Trigger.ExitActions>
                                <StopStoryboard BeginStoryboardName="fadeIn" />
                            </Trigger.ExitActions>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type shared:ViewDragGhostWindow}">
        <Setter Property="ShowInTaskbar" Value="False" />
        <Setter Property="SizeToContent" Value="Manual" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Topmost" Value="True" />
        <Setter Property="ShowActivated" Value="False" />
        <Setter Property="Opacity" Value="0" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type shared:ViewDragGhostWindow}">
                    <Border BorderBrush="Black" BorderThickness="1" Padding="4" Background="#30405060" Margin="6">
                        <Grid>
                            <TextBlock Text="{TemplateBinding ViewName}" VerticalAlignment="Top" HorizontalAlignment="Left" />
                            <TextBlock x:Name="cancelReason" Text="{TemplateBinding CancelReason}" VerticalAlignment="Bottom" HorizontalAlignment="Center" TextAlignment="Center" TextWrapping="Wrap" Opacity="0" />
                            <Path x:Name="cancelCircle" Stroke="Red" StrokeThickness="4" StrokeStartLineCap="Round" StrokeEndLineCap="Round"
                    HorizontalAlignment="Center" VerticalAlignment="Center" Opacity="0" Data="M 25,0 A 25,25 180 1 1 25,50 A 25,25 180 1 1 25,0 L 25,50">
                                <Path.LayoutTransform>
                                    <RotateTransform Angle="45" />
                                </Path.LayoutTransform>
                            </Path>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="CancelMode" Value="True">
                            <Trigger.EnterActions>
                                <BeginStoryboard x:Name="fadeCancelIn">
                                    <Storyboard>
                                        <DoubleAnimation To="1" Duration="0:0:0.3" Storyboard.TargetName="cancelCircle" Storyboard.TargetProperty="Opacity" />
                                        <DoubleAnimation To="1" Duration="0:0:0.3" Storyboard.TargetName="cancelReason" Storyboard.TargetProperty="Opacity" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.EnterActions>
                            <Trigger.ExitActions>
                                <StopStoryboard BeginStoryboardName="fadeCancelIn" />
                            </Trigger.ExitActions>
                        </Trigger>
                        <Trigger Property="IsVisible" Value="True">
                            <Trigger.EnterActions>
                                <BeginStoryboard x:Name="fadeIn">
                                    <Storyboard>
                                        <DoubleAnimation To="1" Duration="0:0:0.3" Storyboard.TargetProperty="Opacity" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.EnterActions>
                            <Trigger.ExitActions>
                                <StopStoryboard BeginStoryboardName="fadeIn" />
                            </Trigger.ExitActions>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type shared:ViewLayoutEditor}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type shared:ViewLayoutEditor}">
                    <Grid x:Name="hitTestRoot">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto" />
                            <RowDefinition Height="Auto" />
                            <RowDefinition Height="Auto" />
                            <RowDefinition Height="*" />
                            <RowDefinition Height="Auto" />
                            <RowDefinition Height="Auto" />
                            <RowDefinition Height="Auto" />
                        </Grid.RowDefinitions>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="240" />
                            <ColumnDefinition Width="*" />
                        </Grid.ColumnDefinitions>

                        <TextBlock Grid.Row="2" Text="Drag views from the list below into the tabs on the right." TextWrapping="Wrap" Margin="0,0,24,12">
              <LineBreak />
              <LineBreak />
              <Run Text="Tip: " FontWeight="Bold" />
              <Run Text="While dragging, you can hover over tabs to bring them to the foreground." />
                        </TextBlock>
                        <shared:ViewListBox Grid.Row="3" x:Name="PART_ViewListBox" Margin="0,0,24,12" ItemsSource="{Binding Path=Views, RelativeSource={RelativeSource TemplatedParent}}">
                            <shared:ViewListBox.ItemTemplate>
                                <DataTemplate>
                                    <Border x:Name="border" Background="Transparent">
                                        <TextBlock x:Name="text" Text="{Binding Path=Command.DisplayName}" Margin="8,1" />
                                    </Border>
                                    <DataTemplate.Triggers>
                                        <Trigger Property="IsMouseOver" Value="True">
                                            <Setter TargetName="border" Property="Background" Value="{Binding Path=Theme.GroupBoxHeaderBackgroundBrush, Source={x:Static shared:Theme.Instance}}" />
                                        </Trigger>
                                    </DataTemplate.Triggers>
                                </DataTemplate>
                            </shared:ViewListBox.ItemTemplate>
                            <ListBox.GroupStyle>
                                <GroupStyle>
                                    <GroupStyle.HeaderTemplate>
                                        <DataTemplate>
                                            <shared:ViewListGroupHeader Content="{Binding}" />
                                        </DataTemplate>
                                    </GroupStyle.HeaderTemplate>
                                </GroupStyle>
                            </ListBox.GroupStyle>
                        </shared:ViewListBox>
                        <TextBlock Grid.Row="4" Text="You can also create multiple top-level windows.  Each will have the same tabs, but they will retain state individually." TextWrapping="Wrap" Margin="0,0,24,12" />
                        <Button Grid.Row="5" Content="Create New Window" Command="{x:Static shared:ViewLayoutEditor.CreateNewWindowCommand}" Margin="0,0,24,12"/>
                        <Button Grid.Row="6" Content="Revert To Default" Command="{x:Static shared:ToolsUIWindow.RevertToDefaultWindowStateCommand}" Margin="0,0,24,12"/>

                        <shared:LayoutTabControl Grid.Column="1" Grid.RowSpan="6" x:Name="PART_LayoutTabControl"
                                   ServiceProvider="{Binding Path=ServiceProvider, RelativeSource={RelativeSource FindAncestor, {x:Type shared:ToolsUIWindow}, 1}}"
                                   IsFileButtonEnabled="False" IsInLayoutEditMode="True" SnapsToDevicePixels="True"
                                   ItemsSource="{Binding Path=EditableLayoutDefinitions, RelativeSource={RelativeSource TemplatedParent}}">
                            <shared:LayoutTabControl.LayoutTransform>
                                <ScaleTransform ScaleX=".85" ScaleY=".85" />
                            </shared:LayoutTabControl.LayoutTransform>
                        </shared:LayoutTabControl>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type shared:ViewListGroupHeader}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type shared:ViewListGroupHeader}">
                    <Border x:Name="border" Background="{shared:ThemeBinding GroupBoxHeaderBackgroundBrush}" Margin="0,8,0,0">
                        <TextBlock x:Name="text" Text="{Binding Path=Name}" Foreground="{shared:ThemeBinding GroupBoxHeaderForegroundBrush}" Margin="{shared:ThemeBinding GroupBoxHeaderPadding}"
                       FontFamily="{shared:ThemeBinding ViewGroupHeaderFontFamily}" FontSize="{shared:ThemeBinding ViewGroupHeaderFontSize}"
                       FontWeight="{shared:ThemeBinding ViewGroupHeaderFontWeight}" FontStyle="{shared:ThemeBinding ViewGroupHeaderFontStyle}" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="border" Property="Background" Value="{Binding Path=Theme.FileTabItemBackgroundBrush, Source={x:Static shared:Theme.Instance}}" />
                            <Setter TargetName="text" Property="Foreground" Value="{Binding Path=Theme.FileTabItemForegroundBrush, Source={x:Static shared:Theme.Instance}}" />
                        </Trigger>
                        <DataTrigger Binding="{Binding Path=Items[0].Category.(shared:ViewLayoutEditor.IsCategorySelected)}" Value="True">
                            <Setter TargetName="border" Property="Background" Value="{Binding Path=Theme.FileTabItemSelectedBackgroundBrush, Source={x:Static shared:Theme.Instance}}" />
                            <Setter TargetName="text" Property="Foreground" Value="{Binding Path=Theme.FileTabItemSelectedForegroundBrush, Source={x:Static shared:Theme.Instance}}" />
                        </DataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="GrabButtonStyle" TargetType="{x:Type ToggleButton}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <StackPanel x:Name="panel" Orientation="Horizontal" Background="Transparent">
                        <Ellipse Width="3" Height="3" Fill="Gray" VerticalAlignment="Bottom" Margin="2" />
                        <Ellipse Width="3" Height="3" Fill="Gray" VerticalAlignment="Bottom" Margin="2" />
                        <Ellipse Width="3" Height="3" Fill="Gray" VerticalAlignment="Bottom" Margin="2" />
                    </StackPanel>
                    <ControlTemplate.Triggers>
                        <Trigger SourceName="panel" Property="IsMouseOver" Value="True">
                            <Setter TargetName="panel" Property="Background" Value="LightGray" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <DataTemplate x:Key="SingleViewContentTemplate">
        <Grid>
            <Border x:Name="border" Background="{shared:ThemeBinding ViewBackgroundBrush}" BorderThickness="{shared:ThemeBinding ViewBorderThickness}" BorderBrush="{shared:ThemeBinding ViewBorderBrush}">
                <ContentControl Content="{Binding Path=View.ViewContent}" />
            </Border>
            <!--<ToggleButton x:Name="btn" Style="{StaticResource GrabButtonStyle}" Margin="0,-12,0,0" Height="12" HorizontalAlignment="Left" VerticalAlignment="Top"
                    IsChecked="{Binding Path=IsInLayoutEditMode, Source={x:Static shared:ToolsUIApplication.Instance}, Mode=TwoWay}"/>-->
        </Grid>
        <!--<DataTemplate.Triggers>
      <Trigger SourceName="btn" Property="IsChecked" Value="True">
        <Setter TargetName="btn" Property="Height" Value="24" />
        <Setter TargetName="border" Property="Margin" Value="0,12,0,0" />
      </Trigger>
    </DataTemplate.Triggers>-->
    </DataTemplate>

    <DataTemplate x:Key="TabbedViewContentTemplate">
        <Border Background="{shared:ThemeBinding ViewBackgroundBrush}">
            <ContentControl Content="{Binding Path=View.ViewContent}" />
        </Border>
    </DataTemplate>

    <DataTemplate x:Key="EditModeSingleViewContentTemplate">
        <Border x:Name="border" Background="White" BorderThickness="1" BorderBrush="Gray" Margin="6">
            <Grid>
                <Grid.RowDefinitions>
                    <RowDefinition Height="*" />
                    <RowDefinition Height="Auto" />
                    <RowDefinition Height="2*" />
                </Grid.RowDefinitions>
                <StackPanel Grid.Row="1" HorizontalAlignment="Center">
                    <TextBlock Text="{Binding Path=ViewSource.ViewCreator.DisplayName, StringFormat=View: {0}}" FontSize="16" Margin="10" HorizontalAlignment="Center" />
                    <StackPanel Orientation="Horizontal" HorizontalAlignment="Center">
                        <TextBlock Text="Title:" VerticalAlignment="Center" />
                        <TextBox Text="{Binding Path=ViewSource.Title, UpdateSourceTrigger=PropertyChanged}" Margin="6" HorizontalAlignment="Center" Width="150" />
                    </StackPanel>
                    <Button Content="Remove" HorizontalAlignment="Center" Margin="6" Command="{x:Static shared:ViewLayoutEditor.RemovePrimitiveCommand}" CommandParameter="{Binding Path=ViewSource}" />
                </StackPanel>
            </Grid>
        </Border>
    </DataTemplate>

    <DataTemplate x:Key="EditModeTabbedViewContentTemplate">
        <Border x:Name="border" Background="White" BorderThickness="1" BorderBrush="Gray" Margin="6">
            <Grid>
                <Grid.RowDefinitions>
                    <RowDefinition Height="*" />
                    <RowDefinition Height="Auto" />
                    <RowDefinition Height="2*" />
                </Grid.RowDefinitions>
                <StackPanel Grid.Row="1" HorizontalAlignment="Center">
                    <TextBlock Text="{Binding Path=ViewSource.ViewCreator.DisplayName, StringFormat=View: {0}}" FontSize="16" Margin="10" HorizontalAlignment="Center" />
                    <StackPanel Orientation="Horizontal" HorizontalAlignment="Center">
                        <TextBlock Text="Title:" VerticalAlignment="Center" />
                        <TextBox Text="{Binding Path=ViewSource.Title, UpdateSourceTrigger=PropertyChanged}" Margin="6" HorizontalAlignment="Center" Width="150" />
                    </StackPanel>
                    <Button Content="Remove" HorizontalAlignment="Center" Margin="6" Command="{x:Static shared:ViewLayoutEditor.RemovePrimitiveCommand}" CommandParameter="{Binding Path=ViewSource}" />
                </StackPanel>
            </Grid>
        </Border>
    </DataTemplate>

    <Style TargetType="{x:Type shared:LayoutControl}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type shared:LayoutControl}">
                    <Grid>
                        <shared:SlotPanel x:Name="PART_SlotPanel" Background="Transparent" Margin="{shared:ThemeBinding ViewMargin}" SlotSpacing="{shared:ThemeBinding ViewSpacing}"/>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="LayoutTabItemStyle" TargetType="{x:Type TabItem}">
        <Setter Property="Visibility" Value="{Binding Path=IsVisible, Converter={StaticResource b2v}}" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="Margin" Value="0" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TabItem}">
                    <Border x:Name="border" Padding="12,4,12,3" Background="Transparent"
                  shared:ShortcutManager.Shortcut="{Binding Path=LayoutDefinition.ShortcutKey}" shared:ShortcutManager.Command="{x:Static shared:LayoutTabControl.TabShortcutCommand}"
                  shared:ShortcutManager.CommandParameter="{Binding}" shared:ShortcutManager.CommandTarget="{Binding RelativeSource={RelativeSource Self}}">
                        <DockPanel>
                            <Button x:Name="closeButton" DockPanel.Dock="Right" Margin="4,0"
                      Visibility="{Binding Path=IsInLayoutEditMode, Source={x:Static shared:ToolsUIApplication.Instance}, Converter={StaticResource b2v}}">
                                <Button.Template>
                                    <ControlTemplate TargetType="{x:Type Button}">
                                        <Border x:Name="border" Background="Transparent" Width="16" Height="16">
                                            <ContentControl x:Name="content" Focusable="False" ContentTemplate="{StaticResource CloseButtonContentTemplate}"
                                      VerticalAlignment="Center" HorizontalAlignment="Center" Margin="2,2,0,0"/>
                                        </Border>
                                        <ControlTemplate.Triggers>
                                            <Trigger Property="IsMouseOver" Value="True">
                                                <Setter TargetName="content" Property="Foreground" Value="{Binding Theme.TitleBarButtonHoverForegroundBrush, Source={x:Static shared:Theme.Instance}}" />
                                            </Trigger>
                                            <Trigger Property="IsPressed" Value="True">
                                                <Setter TargetName="content" Property="Foreground" Value="{Binding Theme.TitleBarButtonPressedForegroundBrush, Source={x:Static shared:Theme.Instance}}" />
                                            </Trigger>
                                        </ControlTemplate.Triggers>
                                    </ControlTemplate>
                                </Button.Template>
                            </Button>
                            <ContentControl x:Name="content" Foreground="{Binding Path=Theme.LayoutTabItemForegroundBrush, Source={x:Static shared:Theme.Instance}}" Focusable="False">
                                <ContentPresenter ContentSource="Header" Focusable="False"/>
                            </ContentControl>
                        </DockPanel>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsSelected" Value="True">
                            <Setter TargetName="content" Property="Foreground" Value="{Binding Path=Theme.LayoutTabItemSelectedForegroundBrush, Source={x:Static shared:Theme.Instance}}" />
                            <!--<Setter TargetName="border" Property="Background" Value="{Binding Path=Theme.LayoutTabItemSelectedBackgroundBrush, Source={x:Static shared:Theme.Instance}}" />-->
                        </Trigger>
                        <Trigger SourceName="border" Property="IsMouseOver" Value="True">
                            <Setter TargetName="content" Property="Foreground" Value="{Binding Path=Theme.LayoutTabItemHoverForegroundBrush, Source={x:Static shared:Theme.Instance}}" />
                            <!--<Setter TargetName="border" Property="Background" Value="{Binding Path=Theme.LayoutTabItemHoverBackgroundBrush, Source={x:Static shared:Theme.Instance}}" />-->
                        </Trigger>
                        <DataTrigger Binding="{Binding Path=IsVisible}" Value="False">
                            <Setter TargetName="border" Property="shared:ShortcutManager.Shortcut" Value="{x:Null}" />
                        </DataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="EditModeLayoutTabItemStyle" TargetType="{x:Type TabItem}">
        <Setter Property="Visibility" Value="{Binding Path=(shared:ViewLayoutEditor.IsLayoutVisible), Converter={StaticResource b2v}}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TabItem}">
                    <Border x:Name="border" Padding="12,4,12,3" Background="Transparent">
                        <Grid>
                            <StackPanel Orientation="Horizontal">
                                <TextBox x:Name="content" Foreground="{Binding Path=Theme.LayoutTabItemForegroundBrush, Source={x:Static shared:Theme.Instance}}"
                         Background="Transparent"
                         Text="{Binding Path=Header, RelativeSource={RelativeSource TemplatedParent}, UpdateSourceTrigger=PropertyChanged}"
                         CharacterCasing="Upper" MinWidth="40"
                         BorderThickness="0" Margin="0,0,4,0"/>
                                <Button x:Name="closeButton" Visibility="Hidden" Command="{x:Static shared:ViewLayoutEditor.DeleteLayoutPageCommand}"
                        CommandParameter="{Binding Path=Content, RelativeSource={RelativeSource TemplatedParent}}">
                                    <Button.Template>
                                        <ControlTemplate TargetType="{x:Type Button}">
                                            <Border x:Name="border" Background="Transparent" Width="16" Height="16">
                                                <ContentControl x:Name="content" Focusable="False" ContentTemplate="{StaticResource CloseButtonContentTemplate}"
                                        VerticalAlignment="Center" HorizontalAlignment="Center" Margin="2,2,0,0"/>
                                            </Border>
                                            <ControlTemplate.Triggers>
                                                <Trigger Property="IsMouseOver" Value="True">
                                                    <Setter TargetName="content" Property="Foreground" Value="{Binding Theme.TitleBarButtonHoverForegroundBrush, Source={x:Static shared:Theme.Instance}}" />
                                                </Trigger>
                                                <Trigger Property="IsPressed" Value="True">
                                                    <Setter TargetName="content" Property="Foreground" Value="{Binding Theme.TitleBarButtonPressedForegroundBrush, Source={x:Static shared:Theme.Instance}}" />
                                                </Trigger>
                                            </ControlTemplate.Triggers>
                                        </ControlTemplate>
                                    </Button.Template>
                                </Button>
                            </StackPanel>
                            <TextBlock x:Name="newPlaceholderText" Text="(New...)" Foreground="{Binding Path=Theme.LayoutTabItemForegroundBrush, Source={x:Static shared:Theme.Instance}}"
                         Margin="0,2,4,0" Visibility="Hidden" />
                            <Border x:Name="clickStopper" Background="Transparent" />
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsSelected" Value="True">
                            <Setter TargetName="content" Property="Foreground" Value="{Binding Path=Theme.LayoutTabItemSelectedForegroundBrush, Source={x:Static shared:Theme.Instance}}" />
                            <Setter TargetName="border" Property="Background" Value="{Binding Path=Theme.LayoutTabItemSelectedBackgroundBrush, Source={x:Static shared:Theme.Instance}}" />
                            <Setter TargetName="clickStopper" Property="Visibility" Value="Hidden" />
                            <Setter TargetName="closeButton" Property="Visibility" Value="Visible" />
                        </Trigger>
                        <Trigger SourceName="border" Property="IsMouseOver" Value="True">
                            <Setter TargetName="content" Property="Foreground" Value="{Binding Path=Theme.LayoutTabItemHoverForegroundBrush, Source={x:Static shared:Theme.Instance}}" />
                            <Setter TargetName="newPlaceholderText" Property="Foreground" Value="{Binding Path=Theme.LayoutTabItemHoverForegroundBrush, Source={x:Static shared:Theme.Instance}}" />
                            <Setter TargetName="border" Property="Background" Value="{Binding Path=Theme.LayoutTabItemHoverBackgroundBrush, Source={x:Static shared:Theme.Instance}}" />
                        </Trigger>
                        <DataTrigger Binding="{Binding Path=IsNewPlaceholder}" Value="True">
                            <Setter TargetName="content" Property="Visibility" Value="Hidden" />
                            <Setter TargetName="newPlaceholderText" Property="Visibility" Value="Visible" />
                            <Setter TargetName="closeButton" Property="Visibility" Value="Hidden" />
                        </DataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <DataTemplate x:Key="DocumentComboBoxItemTemplate">
        <DockPanel Margin="10,2"
               shared:ShortcutManager.Shortcut="{Binding Path=Shortcut}" shared:ShortcutManager.Command="{x:Static shared:ToolsUIWindow.ActivateDocumentCommand}"
               shared:ShortcutManager.CommandTarget="{Binding Path=Window}" shared:ShortcutManager.CommandParameter="{Binding}"
               shared:ShortcutManager.HorizontalAlignment="Left" shared:ShortcutManager.VerticalAlignment="Top" shared:ShortcutManager.Offset="-6,-3">
            <Rectangle DockPanel.Dock="Left" Margin="4,0" Width="12" Height="12">
                <Rectangle.Fill>
                    <SolidColorBrush Color="{Binding Path=Category.Color}" />
                </Rectangle.Fill>
            </Rectangle>
            <TextBlock x:Name="displayName" Margin="4,0,0,0" Text="{Binding Path=DisplayName}" MaxWidth="250" TextTrimming="CharacterEllipsis" VerticalAlignment="Center"
                 ToolTip="{Binding Path=DisplayName}" />
            <TextBlock x:Name="modifiedStar" Margin="0,0,4,0" Text="(*)" Visibility="Hidden" VerticalAlignment="Center" />
        </DockPanel>
        <DataTemplate.Triggers>
            <DataTrigger Binding="{Binding Path=IsModified}" Value="True">
                <Setter TargetName="modifiedStar" Property="Visibility" Value="Visible" />
                <Setter TargetName="displayName" Property="FontStyle" Value="Italic" />
            </DataTrigger>
        </DataTemplate.Triggers>
    </DataTemplate>

    <DataTemplate x:Key="DocumentComboBoxCategoryItemTemplate">
        <DockPanel>
            <Rectangle DockPanel.Dock="Left" Margin="4,0" Width="12" Height="12" Stroke="Black" StrokeThickness="0.5">
                <Rectangle.Fill>
                    <SolidColorBrush Color="{Binding Path=Color}" />
                </Rectangle.Fill>
            </Rectangle>
            <TextBlock Margin="4,0" Text="{Binding Path=DisplayName}" VerticalAlignment="Center" />
        </DockPanel>
    </DataTemplate>

    <Style TargetType="{x:Type shared:ShortcutAdornerControl}">
        <Setter Property="HorizontalAlignment" Value="Center" />
        <Setter Property="VerticalAlignment" Value="Bottom" />
        <Setter Property="Offset" Value="0,14" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type shared:ShortcutAdornerControl}">
                    <Border Background="#404040" HorizontalAlignment="{TemplateBinding HorizontalAlignment}" VerticalAlignment="{TemplateBinding VerticalAlignment}" Padding="4,2">
                        <TextBlock x:Name="text" Text="{TemplateBinding ShortcutKey}" Foreground="White" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="text" Property="Foreground" Value="#a0a0a0" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <DataTrigger Binding="{Binding Path=AdornedElementType, RelativeSource={RelativeSource Self}}" Value="{x:Type CheckBox}">
                <Setter Property="HorizontalAlignment" Value="Left" />
                <Setter Property="VerticalAlignment" Value="Top" />
                <Setter Property="Offset" Value="-12,-12" />
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="CloseDocumentButtonStyle" TargetType="{x:Type Button}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border x:Name="border" BorderBrush="{shared:ThemeBinding ControlForegroundBrush}" BorderThickness="1,1,0,1" Background="{shared:ThemeBinding ControlBackgroundBrush}">
                        <Grid Width="16" Height="16" Background="Transparent" Margin="4,0">
                            <Line x:Name="line1" X1="0" Y1="0" X2="7" Y2="7" Stroke="{shared:ThemeBinding ControlForegroundBrush}" StrokeThickness="2" HorizontalAlignment="Center" VerticalAlignment="Center" />
                            <Line x:Name="line2" X1="7" Y1="0" X2="0" Y2="7" Stroke="{shared:ThemeBinding ControlForegroundBrush}" StrokeThickness="2" HorizontalAlignment="Center" VerticalAlignment="Center" />
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="line1" Property="Stroke" Value="{Binding Path=Theme.ControlHoverForegroundBrush, Source={x:Static shared:Theme.Instance}}" />
                            <Setter TargetName="line2" Property="Stroke" Value="{Binding Path=Theme.ControlHoverForegroundBrush, Source={x:Static shared:Theme.Instance}}" />
                            <Setter TargetName="border" Property="Background" Value="{Binding Path=Theme.ControlHoverBackgroundBrush, Source={x:Static shared:Theme.Instance}}" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="line1" Property="Stroke" Value="{Binding Path=Theme.ControlPressedForegroundBrush, Source={x:Static shared:Theme.Instance}}" />
                            <Setter TargetName="line2" Property="Stroke" Value="{Binding Path=Theme.ControlPressedForegroundBrush, Source={x:Static shared:Theme.Instance}}" />
                            <Setter TargetName="border" Property="Background" Value="{Binding Path=Theme.ControlPressedBackgroundBrush, Source={x:Static shared:Theme.Instance}}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type shared:LayoutTabControl}">
        <Setter Property="ItemContainerStyle" Value="{StaticResource LayoutTabItemStyle}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type shared:LayoutTabControl}">
                    <Grid>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto" />
                            <RowDefinition Height="*" />
                        </Grid.RowDefinitions>
                        <DockPanel Grid.Row="0" Margin="0,1,0,0" Panel.ZIndex="1">
                            <Button x:Name="PART_FileTab" DockPanel.Dock="Left" Content="FILE" Style="{StaticResource FileButtonStyle}" VerticalAlignment="Bottom"
                      AutomationProperties.AutomationId="FileTab" Command="{x:Static shared:ToolsUIWindow.ToggleFileTabCommand}"
                      Visibility="{Binding Path=IsFileButtonVisible, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource b2v}}"
                      IsEnabled="{TemplateBinding IsFileButtonEnabled}" shared:ShortcutManager.Shortcut="F" />
                            <ComboBox x:Name="PART_DocumentCombo" DockPanel.Dock="Right" BorderBrush="{shared:ThemeBinding LayoutTabItemBorderBrush}"
                        ItemsSource="{Binding Path=DocumentTracker.DocumentPickList, RelativeSource={RelativeSource FindAncestor, {x:Type shared:ToolsUIWindow}, 1}}"
                        SelectedItem="{Binding Path=DocumentTracker.SelectedDocument, RelativeSource={RelativeSource FindAncestor, {x:Type shared:ToolsUIWindow}, 1}}"
                        ItemTemplate="{StaticResource DocumentComboBoxItemTemplate}"
                        AutomationProperties.AutomationId="DocumentDropdown"
                        shared:ShortcutManager.Shortcut="D" shared:ShortcutManager.Command="{x:Static shared:ToolsUIWindow.OpenDocumentDropdownCommand}"
                        shared:ShortcutManager.CommandTarget="{Binding RelativeSource={RelativeSource Templatedparent}}" />
                            <Button x:Name="PART_DocumentCloseButton" DockPanel.Dock="Right" Style="{StaticResource CloseDocumentButtonStyle}" Width="{Binding Path=ActualHeight, RelativeSource={RelativeSource Self}}"
                      AutomationProperties.AutomationId="DocumentCloseButton"
                      Command="{x:Static shared:ToolsUIWindow.CloseDocumentCommand}"
                      ToolTip="{Binding Path=DocumentTracker.ActiveDocument.DisplayName, RelativeSource={RelativeSource FindAncestor, {x:Type shared:ToolsUIWindow}, 1}, Converter={StaticResource CloseActiveDocumentConverter}}" />
                            <shared:LayoutTabPanel IsItemsHost="True" SelectedIndex="{Binding Path=SelectedIndex, RelativeSource={RelativeSource TemplatedParent}}"
                                   SnapsToDevicePixels="True" TabSpacing="3" BorderBrush="{shared:ThemeBinding LayoutTabItemBorderBrush}"
                                   SelectedItemBackground="{shared:ThemeBinding LayoutTabControlBackgroundBrush}" />
                        </DockPanel>
                        <Border Background="{shared:ThemeBinding LayoutTabControlBackgroundBrush}" Grid.Row="1" Margin="0,-1,0,0">
                            <ContentPresenter x:Name="PART_SelectedContentHost" ContentSource="SelectedContent" />
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsVisible" Value="True">
                            <Trigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation From="0" Storyboard.TargetProperty="Opacity" Duration="0:0:0.2" DecelerationRatio="0.5" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.EnterActions>
                            <Trigger.ExitActions>

                            </Trigger.ExitActions>
                        </Trigger>
                        <EventTrigger RoutedEvent="{x:Static shared:LayoutTabControl.ActiveContentChangedEvent}">
                            <EventTrigger.Actions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation From="0" Storyboard.TargetName="PART_SelectedContentHost" Storyboard.TargetProperty="Opacity" Duration="0:0:0.2" DecelerationRatio="0.5" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </EventTrigger.Actions>
                        </EventTrigger>
                        <Trigger Property="IsInLayoutEditMode" Value="False">
                            <Setter TargetName="PART_DocumentCombo" Property="IsDropDownOpen" Value="{Binding Path=IsDocumentDropdownOpen, RelativeSource={RelativeSource FindAncestor, {x:Type shared:ToolsUIWindow}, 1}}" />
                        </Trigger>
                        <Trigger Property="IsInLayoutEditMode" Value="True">
                            <Setter TargetName="PART_DocumentCombo" Property="ItemsSource" Value="{Binding Path=DocumentCategories, RelativeSource={RelativeSource FindAncestor, {x:Type shared:ViewLayoutEditor}, 1}}" />
                            <Setter TargetName="PART_DocumentCombo" Property="SelectedItem" Value="{Binding Path=SelectedDocumentCategory, RelativeSource={RelativeSource FindAncestor, {x:Type shared:ViewLayoutEditor}, 1}}" />
                            <Setter TargetName="PART_DocumentCombo" Property="ItemTemplate" Value="{StaticResource DocumentComboBoxCategoryItemTemplate}" />
                            <Setter TargetName="PART_DocumentCombo" Property="shared:ShortcutManager.Shortcut" Value="{x:Null}" />
                            <Setter TargetName="PART_FileTab" Property="shared:ShortcutManager.Shortcut" Value="{x:Null}" />
                        </Trigger>
                        <DataTrigger Binding="{Binding Path=DocumentTracker.ActiveDocument, RelativeSource={RelativeSource FindAncestor, {x:Type shared:ToolsUIWindow}, 1}}" Value="{x:Null}">
                            <Setter TargetName="PART_DocumentCloseButton" Property="Visibility" Value="Collapsed" />
                            <Setter TargetName="PART_DocumentCombo" Property="Visibility" Value="Collapsed" />
                        </DataTrigger>
                        <Trigger Property="IsInLayoutEditMode" Value="True">
                            <Setter TargetName="PART_DocumentCloseButton" Property="Visibility" Value="Collapsed" />
                            <Setter TargetName="PART_DocumentCombo" Property="Visibility" 
                      Value="{Binding Path=DocumentCategories.Count, RelativeSource={RelativeSource FindAncestor, {x:Type shared:ViewLayoutEditor}, 1}, Converter={StaticResource DocumentCategoryCountToVisibilityConverter}}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsInLayoutEditMode" Value="True">
                <Setter Property="ItemContainerStyle" Value="{StaticResource EditModeLayoutTabItemStyle}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="FileTabItemStyle" TargetType="{x:Type shared:FileTabItem}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type shared:FileTabItem}">
                    <Border x:Name="border" Padding="24,11" Background="{Binding Path=Theme.FileTabItemBackgroundBrush, Source={x:Static shared:Theme.Instance}}">
                        <ContentControl x:Name="content" Foreground="{Binding Path=Theme.FileTabItemForegroundBrush, Source={x:Static shared:Theme.Instance}}" Focusable="False"
                            shared:ShortcutManager.Shortcut="{Binding Path=Shortcut}" shared:ShortcutManager.HorizontalAlignment="Left" shared:ShortcutManager.VerticalAlignment="Top"
                            shared:ShortcutManager.Offset="-15,-15" shared:ShortcutManager.IsEnabled="{Binding Path=IsEnabled, RelativeSource={RelativeSource TemplatedParent}}"
                            shared:ShortcutManager.Command="{x:Static shared:FileTabControl.ShortcutCommand}" shared:ShortcutManager.CommandParameter="{Binding}"
                            shared:ShortcutManager.CommandTarget="{Binding RelativeSource={RelativeSource TemplatedParent}}">
                            <Grid>
                                <ContentPresenter x:Name="headerContent" ContentSource="Header" Focusable="False"/>
                                <Border x:Name="separator" Height="1" BorderThickness="1" BorderBrush="{shared:ThemeBinding FileTabItemSelectedBackgroundBrush}" Visibility="Collapsed"/>
                            </Grid>
                        </ContentControl>
                    </Border>
                    <ControlTemplate.Triggers>
                        <DataTrigger Binding="{Binding IsSeparator}" Value="True">
                            <Setter TargetName="headerContent" Property="Visibility" Value="Hidden" />
                            <Setter TargetName="separator" Property="Visibility" Value="Visible" />
                        </DataTrigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="content" Property="Foreground" Value="{Binding Path=Theme.FileTabItemDisabledForegroundBrush, Source={x:Static shared:Theme.Instance}}" />
                            <Setter TargetName="border" Property="Background" Value="{Binding Path=Theme.FileTabItemDisabledBackgroundBrush, Source={x:Static shared:Theme.Instance}}" />
                        </Trigger>
                        <Trigger Property="IsSelected" Value="True">
                            <Setter TargetName="content" Property="Foreground" Value="{Binding Path=Theme.FileTabItemSelectedForegroundBrush, Source={x:Static shared:Theme.Instance}}" />
                            <Setter TargetName="border" Property="Background" Value="{Binding Path=Theme.FileTabItemSelectedBackgroundBrush, Source={x:Static shared:Theme.Instance}}" />
                        </Trigger>
                        <Trigger SourceName="border" Property="IsMouseOver" Value="True">
                            <Setter TargetName="content" Property="Foreground" Value="{Binding Path=Theme.FileTabItemHoverForegroundBrush, Source={x:Static shared:Theme.Instance}}" />
                            <Setter TargetName="border" Property="Background" Value="{Binding Path=Theme.FileTabItemHoverBackgroundBrush, Source={x:Static shared:Theme.Instance}}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type shared:FileTabControl}">
        <Setter Property="ItemContainerStyle" Value="{StaticResource FileTabItemStyle}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type shared:FileTabControl}">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="*" />
                        </Grid.ColumnDefinitions>
                        <Grid.RenderTransform>
                            <TranslateTransform x:Name="xlat" />
                        </Grid.RenderTransform>
                        <DockPanel Background="{shared:ThemeBinding FileTabItemBackgroundBrush}" MinWidth="125" Margin="0,-30,0,0">
                            <Button x:Name="PART_HideButton" Margin="24,18" DockPanel.Dock="Top" HorizontalAlignment="Left" AutomationProperties.AutomationId="FileTabHideButton"
                      Command="{x:Static shared:ToolsUIWindow.ToggleFileTabCommand}" Style="{StaticResource CloseFileTabButtonStyle}" />
                            <StackPanel IsItemsHost="True" />
                        </DockPanel>
                        <DockPanel x:Name="mainDock" Grid.Column="1" Margin="24">
                            <TextBlock DockPanel.Dock="Top" FontSize="{shared:ThemeBinding FileTabHeaderFontSize}" FontFamily="{shared:ThemeBinding FileTabHeaderFontFamily}"
                         FontStyle="{shared:ThemeBinding FileTabHeaderFontStyle}" FontWeight="{shared:ThemeBinding FileTabHeaderFontWeight}"
                         Text="{Binding Path=SelectedItem.Header, RelativeSource={RelativeSource TemplatedParent}}" Margin="0,0,0,12" />
                            <ContentPresenter x:Name="PART_SelectedContentHost" ContentSource="SelectedContent" />
                        </DockPanel>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsVisible" Value="True">
                            <Trigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation To="0" Storyboard.TargetName="mainDock" Storyboard.TargetProperty="Opacity" Duration="0:0:0" />
                                        <DoubleAnimation Storyboard.TargetName="mainDock" Storyboard.TargetProperty="Opacity" Duration="0:0:0.3" BeginTime="0:0:0.2" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.EnterActions>
                        </Trigger>
                        <EventTrigger RoutedEvent="shared:FileTabControl.TabChanged">
                            <EventTrigger.Actions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation From="0" Storyboard.TargetName="mainDock" Storyboard.TargetProperty="Opacity" Duration="0:0:0.2" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </EventTrigger.Actions>
                        </EventTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ViewTabItemStyle" TargetType="{x:Type TabItem}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TabItem}">
                    <Border x:Name="border"
                  Margin="{shared:ThemeBinding TabItemBorderMargin}" Padding="{shared:ThemeBinding TabItemBorderPadding}" BorderThickness="{shared:ThemeBinding TabItemBorderThickness}"
                  Background="{shared:ThemeBinding TabItemBackgroundBrush}"
                  BorderBrush="{shared:ThemeBinding TabItemBorderBrush}">
                        <ContentControl x:Name="content"
                            Foreground="{shared:ThemeBinding TabItemForegroundBrush}"
                            Background="{shared:ThemeBinding TabItemBackgroundBrush}"
                            FontFamily="{shared:ThemeBinding TabItemFontFamily}" FontSize="{shared:ThemeBinding TabItemFontSize}"
                            FontWeight="{shared:ThemeBinding TabItemFontWeight}" FontStyle="{shared:ThemeBinding TabItemFontStyle}"
                            shared:ShortcutManager.Shortcut="{Binding Path=ViewSource.ShortcutKey, StringFormat={}{0}:ViewSelect}"
                            shared:ShortcutManager.Command="{x:Static shared:LayoutControl.ViewShortcutCommand}" shared:ShortcutManager.CommandParameter="{Binding}"
                            shared:ShortcutManager.CommandTarget="{Binding RelativeSource={RelativeSource FindAncestor, {x:Type shared:LayoutControl}, 1}}"
                            >
                            <DockPanel>
                                <Button x:Name="closeButton" DockPanel.Dock="Right" Margin="4,0"
                        Visibility="{Binding Path=IsInLayoutEditMode, Source={x:Static shared:ToolsUIApplication.Instance}, Converter={StaticResource b2v}}">
                                    <Button.Template>
                                        <ControlTemplate TargetType="{x:Type Button}">
                                            <Border x:Name="border" Background="Transparent" Width="16" Height="16">
                                                <ContentControl x:Name="content" Focusable="False" ContentTemplate="{StaticResource CloseButtonContentTemplate}"
                                        VerticalAlignment="Center" HorizontalAlignment="Center" Margin="2,2,0,0"/>
                                            </Border>
                                            <ControlTemplate.Triggers>
                                                <Trigger Property="IsMouseOver" Value="True">
                                                    <Setter TargetName="content" Property="Foreground" Value="{Binding Theme.TitleBarButtonHoverForegroundBrush, Source={x:Static shared:Theme.Instance}}" />
                                                </Trigger>
                                                <Trigger Property="IsPressed" Value="True">
                                                    <Setter TargetName="content" Property="Foreground" Value="{Binding Theme.TitleBarButtonPressedForegroundBrush, Source={x:Static shared:Theme.Instance}}" />
                                                </Trigger>
                                            </ControlTemplate.Triggers>
                                        </ControlTemplate>
                                    </Button.Template>
                                </Button>
                                <ContentPresenter ContentSource="Header" Focusable="False" RecognizesAccessKey="True" />
                            </DockPanel>
                        </ContentControl>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="content" Property="Foreground" Value="{Binding Path=Theme.TabItemHoverForegroundBrush, Source={x:Static shared:Theme.Instance}}" />
                            <Setter TargetName="content" Property="Background" Value="{Binding Path=Theme.TabItemHoverBackgroundBrush, Source={x:Static shared:Theme.Instance}}" />
                            <Setter TargetName="border" Property="Background" Value="{Binding Path=Theme.TabItemHoverBackgroundBrush, Source={x:Static shared:Theme.Instance}}" />
                            <Setter TargetName="border" Property="BorderBrush" Value="{Binding Path=Theme.TabItemHoverBorderBrush, Source={x:Static shared:Theme.Instance}}" />
                        </Trigger>
                        <Trigger Property="IsSelected" Value="True">
                            <Setter TargetName="content" Property="Foreground" Value="{Binding Path=Theme.TabItemSelectedForegroundBrush, Source={x:Static shared:Theme.Instance}}" />
                            <Setter TargetName="content" Property="Background" Value="{Binding Path=Theme.TabItemSelectedBackgroundBrush, Source={x:Static shared:Theme.Instance}}" />
                            <Setter TargetName="border" Property="Background" Value="{Binding Path=Theme.TabItemSelectedBackgroundBrush, Source={x:Static shared:Theme.Instance}}" />
                            <Setter TargetName="border" Property="BorderBrush" Value="{Binding Path=Theme.TabItemSelectedBorderBrush, Source={x:Static shared:Theme.Instance}}" />
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="shared:ViewTabControl.ParentTabControlHasFocus" Value="True" />
                                <Condition Property="IsSelected" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="content" Property="Foreground" Value="{Binding Path=Theme.TabItemActiveSelectedForegroundBrush, Source={x:Static shared:Theme.Instance}}" />
                            <Setter TargetName="content" Property="Background" Value="{Binding Path=Theme.TabItemActiveSelectedBackgroundBrush, Source={x:Static shared:Theme.Instance}}" />
                            <Setter TargetName="border" Property="Background" Value="{Binding Path=Theme.TabItemActiveSelectedBackgroundBrush, Source={x:Static shared:Theme.Instance}}" />
                            <Setter TargetName="border" Property="BorderBrush" Value="{Binding Path=Theme.TabItemActiveSelectedBorderBrush, Source={x:Static shared:Theme.Instance}}" />
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="StandardTabItemStyle" TargetType="{x:Type TabItem}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TabItem}">
                    <Border x:Name="border"
                  Margin="{shared:ThemeBinding TabItemBorderMargin}" Padding="{shared:ThemeBinding TabItemBorderPadding}" BorderThickness="{shared:ThemeBinding TabItemBorderThickness}"
                  Background="{shared:ThemeBinding TabItemBackgroundBrush}"
                  BorderBrush="{shared:ThemeBinding TabItemBorderBrush}">
                        <ContentControl x:Name="content"
                            Foreground="{shared:ThemeBinding TabItemForegroundBrush}"
                            Background="{shared:ThemeBinding TabItemBackgroundBrush}"
                            FontFamily="{shared:ThemeBinding TabItemFontFamily}" FontSize="{shared:ThemeBinding TabItemFontSize}"
                            FontWeight="{shared:ThemeBinding TabItemFontWeight}" FontStyle="{shared:ThemeBinding TabItemFontStyle}"
                            >
                            <DockPanel>
                                <ContentPresenter ContentSource="Header" Focusable="False" RecognizesAccessKey="True" />
                            </DockPanel>
                        </ContentControl>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="content" Property="Foreground" Value="{Binding Path=Theme.TabItemHoverForegroundBrush, Source={x:Static shared:Theme.Instance}}" />
                            <Setter TargetName="content" Property="Background" Value="{Binding Path=Theme.TabItemHoverBackgroundBrush, Source={x:Static shared:Theme.Instance}}" />
                            <Setter TargetName="border" Property="Background" Value="{Binding Path=Theme.TabItemHoverBackgroundBrush, Source={x:Static shared:Theme.Instance}}" />
                            <Setter TargetName="border" Property="BorderBrush" Value="{Binding Path=Theme.TabItemHoverBorderBrush, Source={x:Static shared:Theme.Instance}}" />
                        </Trigger>
                        <Trigger Property="IsSelected" Value="True">
                            <Setter TargetName="content" Property="Foreground" Value="{Binding Path=Theme.TabItemSelectedForegroundBrush, Source={x:Static shared:Theme.Instance}}" />
                            <Setter TargetName="content" Property="Background" Value="{Binding Path=Theme.TabItemSelectedBackgroundBrush, Source={x:Static shared:Theme.Instance}}" />
                            <Setter TargetName="border" Property="Background" Value="{Binding Path=Theme.TabItemSelectedBackgroundBrush, Source={x:Static shared:Theme.Instance}}" />
                            <Setter TargetName="border" Property="BorderBrush" Value="{Binding Path=Theme.TabItemSelectedBorderBrush, Source={x:Static shared:Theme.Instance}}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type TabControl}">
        <Setter Property="ItemContainerStyle" Value="{StaticResource StandardTabItemStyle}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TabControl}">
                    <Border Background="{shared:ThemeBinding ViewBackgroundBrush}" BorderThickness="{shared:ThemeBinding ViewBorderThickness}" BorderBrush="{shared:ThemeBinding ViewBorderBrush}">
                        <Grid>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto" />
                                <RowDefinition Height="*" />
                            </Grid.RowDefinitions>
                            <Border Grid.Row="0" Background="{shared:ThemeBinding TabPanelBackgroundBrush}" BorderThickness="{shared:ThemeBinding TabPanelBorderThickness}" BorderBrush="{shared:ThemeBinding TabPanelBorderBrush}">
                                <StackPanel Grid.Row="0" Margin="{shared:ThemeBinding TabPanelMargin}" IsItemsHost="True" Orientation="Horizontal" />
                            </Border>
                            <ContentPresenter x:Name="PART_SelectedContentHost" Grid.Row="1" ContentSource="SelectedContent" />
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <EventTrigger RoutedEvent="{x:Static shared:ViewTabControl.ActiveContentChangedEvent}">
                            <EventTrigger.Actions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation From="0" Storyboard.TargetName="PART_SelectedContentHost" Storyboard.TargetProperty="Opacity" Duration="0:0:0.2" DecelerationRatio="0.5" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </EventTrigger.Actions>
                        </EventTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type shared:ViewTabControl}" BasedOn="{StaticResource {x:Type TabControl}}">
        <Setter Property="ItemContainerStyle" Value="{StaticResource ViewTabItemStyle}" />
    </Style>

    <Style x:Key="OpenTabItemStyle" TargetType="{x:Type TabItem}">
        <Setter Property="AutomationProperties.Name" Value="{Binding Path=Header.Header, RelativeSource={RelativeSource Self}}" />
        <Setter Property="AutomationProperties.AutomationId" Value="{Binding Path=Header.Header, RelativeSource={RelativeSource Self}, StringFormat=OpenTabItem:{0}}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TabItem}">
                    <Border x:Name="border" Padding="24,11" Background="{Binding Path=Theme.OpenTabItemBackgroundBrush, Source={x:Static shared:Theme.Instance}}">
                        <ContentControl x:Name="content" Foreground="{Binding Path=Theme.OpenTabItemForegroundBrush, Source={x:Static shared:Theme.Instance}}"
                            shared:ShortcutManager.Shortcut="{Binding Path=Shortcut}" shared:ShortcutManager.HorizontalAlignment="Left" shared:ShortcutManager.VerticalAlignment="Top"
                            shared:ShortcutManager.Offset="-15,-15"
                            shared:ShortcutManager.Command="{x:Static shared:OpenTabControl.ShortcutCommand}" shared:ShortcutManager.CommandParameter="{Binding}"
                            shared:ShortcutManager.CommandTarget="{Binding RelativeSource={RelativeSource TemplatedParent}}">
                            <DockPanel>
                                <ContentPresenter DockPanel.Dock="Left" Width="32" Height="32" ContentTemplate="{Binding IconTemplate}" Focusable="False" />
                                <TextBlock Text="{Binding Header}" Margin="12,4" FontSize="16" />
                            </DockPanel>
                        </ContentControl>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger SourceName="border" Property="IsMouseOver" Value="True">
                            <Setter TargetName="content" Property="Foreground" Value="{Binding Path=Theme.OpenTabItemHoverForegroundBrush, Source={x:Static shared:Theme.Instance}}" />
                            <Setter TargetName="border" Property="Background" Value="{Binding Path=Theme.OpenTabItemHoverBackgroundBrush, Source={x:Static shared:Theme.Instance}}" />
                        </Trigger>
                        <Trigger Property="IsSelected" Value="True">
                            <Setter TargetName="content" Property="Foreground" Value="{Binding Path=Theme.OpenTabItemSelectedForegroundBrush, Source={x:Static shared:Theme.Instance}}" />
                            <Setter TargetName="border" Property="Background" Value="{Binding Path=Theme.OpenTabItemSelectedBackgroundBrush, Source={x:Static shared:Theme.Instance}}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type shared:OpenTabControl}">
        <Setter Property="ItemContainerStyle" Value="{StaticResource OpenTabItemStyle}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type shared:OpenTabControl}">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="*" />
                        </Grid.ColumnDefinitions>
                        <DockPanel MinWidth="300">
                            <Border DockPanel.Dock="Right" Width="1" Background="{shared:ThemeBinding OpenTabBorderBrush}" />
                            <StackPanel IsItemsHost="True" />
                        </DockPanel>
                        <DockPanel x:Name="mainDock" Grid.Column="1" Margin="24,4">
                            <DockPanel DockPanel.Dock="Top">
                                <ContentPresenter DockPanel.Dock="Left" Width="32" Height="32" ContentTemplate="{Binding Path=SelectedContent.IconTemplate, RelativeSource={RelativeSource TemplatedParent}}" Focusable="False" />
                                <TextBlock Text="{Binding Path=SelectedContent.Header, RelativeSource={RelativeSource TemplatedParent}}" Margin="12,4"
                           Foreground="{shared:ThemeBinding Heading1ForegroundBrush}"
                           FontSize="{shared:ThemeBinding Heading1FontSize}" FontFamily="{shared:ThemeBinding Heading1FontFamily}"
                           FontStyle="{shared:ThemeBinding Heading1FontStyle}" FontWeight="{shared:ThemeBinding Heading1FontWeight}" />
                            </DockPanel>
                            <ContentPresenter x:Name="PART_SelectedContentHost" Content="{Binding Path=SelectedContent.Content, RelativeSource={RelativeSource TemplatedParent}}"
                                ContentTemplate="{Binding Path=SelectedContent.ContentTemplate, RelativeSource={RelativeSource TemplatedParent}}">
                            </ContentPresenter>
                            <DockPanel.RenderTransform>
                                <TranslateTransform x:Name="xlat" />
                            </DockPanel.RenderTransform>
                        </DockPanel>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsVisible" Value="True">
                            <Trigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation To="0" Storyboard.TargetName="mainDock" Storyboard.TargetProperty="Opacity" Duration="0:0:0" />
                                        <DoubleAnimation Storyboard.TargetName="mainDock" Storyboard.TargetProperty="Opacity" Duration="0:0:0.3" BeginTime="0:0:0.2" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.EnterActions>
                        </Trigger>
                        <EventTrigger RoutedEvent="shared:OpenTabControl.TabChanged">
                            <EventTrigger.Actions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation From="0" Storyboard.TargetName="mainDock" Storyboard.TargetProperty="Opacity" Duration="0:0:0.3" />
                                        <DoubleAnimation From="65" Storyboard.TargetName="xlat" Storyboard.TargetProperty="X" Duration="0:0:0.3" DecelerationRatio="0.8" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </EventTrigger.Actions>
                        </EventTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="FloatingWindow" TargetType="{x:Type shared:ToolsUIWindow}">
        <Setter Property="ResizeMode" Value="CanResizeWithGrip" />
        <Setter Property="WindowStyle" Value="None" />
        <Setter Property="Background" Value="White" />
        <Setter Property="Foreground" Value="Black" />
        <Setter Property="AllowsTransparency" Value="True" />
        <Setter Property="ShowInTaskbar" Value="False" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type shared:ToolsUIWindow}">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="*" />
                            <ColumnDefinition Width="Auto" />
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto" />
                            <RowDefinition Height="*" />
                            <RowDefinition Height="Auto" />
                        </Grid.RowDefinitions>

                        <Border x:Name="shadowBorder" BorderThickness="1" Margin="3" BorderBrush="#10000000" Grid.ColumnSpan="3" Grid.RowSpan="3" Visibility="Hidden">
                            <Border BorderThickness="1" BorderBrush="#28000000">
                                <Border BorderThickness="1" BorderBrush="#40000000" />
                            </Border>
                        </Border>
                        <Border x:Name="outerBorder" BorderThickness="1" Margin="6" BorderBrush="Black" Grid.ColumnSpan="3" Grid.RowSpan="3" Background="{TemplateBinding Background}">
                            <DockPanel ClipToBounds="True">
                                <Grid DockPanel.Dock="Top">
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="Auto" />
                                        <ColumnDefinition Width="Auto" />
                                        <ColumnDefinition Width="*" />
                                        <ColumnDefinition Width="Auto" />
                                    </Grid.ColumnDefinitions>
                                    <TextBlock x:Name="titleText" Grid.Column="2" HorizontalAlignment="Center" Text="{TemplateBinding Title}" Margin="4" Foreground="{shared:ThemeBinding WindowTitleForegroundBrush}"
                             FontWeight="{shared:ThemeBinding WindowTitleFontWeight}" FontSize="{shared:ThemeBinding WindowTitleFontSize}" FontFamily="{shared:ThemeBinding WindowTitleFontFamily}" FontStyle="{shared:ThemeBinding WindowTitleFontStyle}" />
                                    <Border x:Name="PART_Mover" Grid.Column="0" Grid.ColumnSpan="4" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Background="Transparent" />
                                    <Image x:Name="PART_SysMenuIcon" Grid.Column="0" Source="{Binding Path=Icon, RelativeSource={RelativeSource TemplatedParent}}" HorizontalAlignment="Left" VerticalAlignment="Top" Width="20" Height="20" Margin="4" />
                                    <shared:QATItemsControl x:Name="PART_QATItemsControl" Grid.Column="1" HorizontalAlignment="Left" VerticalAlignment="Stretch"
                                          ItemsSource="{Binding Path=QATButtonDefinitions, Source={x:Static shared:ToolsUIApplication.Instance}}"
                                          ItemContainerStyle="{StaticResource TitleBarButtonStyle}" ButtonMargin="0,2">
                                        <ItemsControl.ItemsPanel>
                                            <ItemsPanelTemplate>
                                                <StackPanel Orientation="Horizontal" />
                                            </ItemsPanelTemplate>
                                        </ItemsControl.ItemsPanel>
                                    </shared:QATItemsControl>
                                    <StackPanel Grid.Column="3" Orientation="Horizontal" HorizontalAlignment="Right" VerticalAlignment="Stretch">
                                        <Button Style="{StaticResource TitleBarButtonStyle}" Margin="0,2" Command="{x:Static shared:ToolsUIWindow.MinimizeCommand}" ContentTemplate="{StaticResource MinimizeButtonContentTemplate}" />
                                        <Button x:Name="maximizeButton" Style="{StaticResource TitleBarButtonStyle}" Margin="0,2" Command="{x:Static shared:ToolsUIWindow.MaximizeCommand}" ContentTemplate="{StaticResource MaximizeButtonContentTemplate}" />
                                        <Button Style="{StaticResource TitleBarButtonStyle}" Margin="0,2" Command="{x:Static shared:ToolsUIWindow.CloseWindowCommand}" ContentTemplate="{StaticResource CloseButtonContentTemplate}"/>
                                    </StackPanel>
                                </Grid>
                                <AdornerDecorator>
                                    <Grid>
                                        <shared:LayoutTabControl x:Name="PART_LayoutTabControl" ItemsSource="{Binding Path=Layouts, RelativeSource={RelativeSource TemplatedParent}}"
                                           ServiceProvider="{TemplateBinding ServiceProvider}" IsFileButtonVisible="False" />
                                        <shared:FileTabControl x:Name="PART_FileTabControl" ItemsSource="{Binding Path=FileTabDefinitions, Source={x:Static shared:ToolsUIApplication.Instance}}" Visibility="Collapsed">
                                            <shared:FileTabControl.RenderTransform>
                                                <TranslateTransform x:Name="xlat" />
                                            </shared:FileTabControl.RenderTransform>
                                        </shared:FileTabControl>
                                    </Grid>
                                </AdornerDecorator>
                            </DockPanel>
                        </Border>

                        <Thumb x:Name="PART_LeftSizer" Grid.Row="1" Grid.Column="0" Style="{StaticResource SizerThumbStyle}" Cursor="SizeWE" HorizontalAlignment="Left" VerticalAlignment="Stretch" />
                        <Thumb x:Name="PART_TopSizer" Grid.Row="0" Grid.Column="1" Style="{StaticResource SizerThumbStyle}" Cursor="SizeNS" HorizontalAlignment="Stretch" VerticalAlignment="Top" />
                        <Thumb x:Name="PART_RightSizer" Grid.Row="1" Grid.Column="2" Style="{StaticResource SizerThumbStyle}" Cursor="SizeWE" HorizontalAlignment="Right" VerticalAlignment="Stretch" />
                        <Thumb x:Name="PART_BottomSizer" Grid.Row="2" Grid.Column="1" Style="{StaticResource SizerThumbStyle}" Cursor="SizeNS" HorizontalAlignment="Stretch" VerticalAlignment="Bottom" />

                        <Thumb x:Name="PART_TopLeftSizer" Grid.Row="0" Grid.Column="0" Style="{StaticResource CornerSizerThumbStyle}" Cursor="SizeNWSE" HorizontalAlignment="Left" VerticalAlignment="Top" />
                        <Thumb x:Name="PART_TopRightSizer" Grid.Row="0" Grid.Column="2" Style="{StaticResource CornerSizerThumbStyle}" Cursor="SizeNESW" HorizontalAlignment="Right" VerticalAlignment="Top" />
                        <Thumb x:Name="PART_BottomLeftSizer" Grid.Row="2" Grid.Column="0" Style="{StaticResource CornerSizerThumbStyle}" Cursor="SizeNESW" HorizontalAlignment="Left" VerticalAlignment="Bottom" />
                        <Thumb x:Name="PART_BottomRightSizer" Grid.Row="2" Grid.Column="2" Style="{StaticResource CornerSizerThumbStyle}" Cursor="SizeNWSE" HorizontalAlignment="Right" VerticalAlignment="Bottom" />

                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="WindowState" Value="Maximized">
                            <Setter TargetName="outerBorder" Property="Margin" Value="0" />
                            <Setter TargetName="PART_LeftSizer" Property="Visibility" Value="Collapsed" />
                            <Setter TargetName="PART_TopSizer" Property="Visibility" Value="Collapsed" />
                            <Setter TargetName="PART_RightSizer" Property="Visibility" Value="Collapsed" />
                            <Setter TargetName="PART_BottomSizer" Property="Visibility" Value="Collapsed" />
                            <Setter TargetName="PART_TopLeftSizer" Property="Visibility" Value="Collapsed" />
                            <Setter TargetName="PART_TopRightSizer" Property="Visibility" Value="Collapsed" />
                            <Setter TargetName="PART_BottomLeftSizer" Property="Visibility" Value="Collapsed" />
                            <Setter TargetName="PART_BottomRightSizer" Property="Visibility" Value="Collapsed" />
                            <Setter TargetName="maximizeButton" Property="Command" Value="{x:Static shared:ToolsUIWindow.RestoreCommand}" />
                            <Setter TargetName="maximizeButton" Property="ContentTemplate" Value="{StaticResource RestoreButtonContentTemplate}" />
                        </Trigger>
                        <Trigger Property="IsActive" Value="False">
                            <Setter TargetName="titleText" Property="Foreground" Value="{Binding Path=Theme.WindowTitleInactiveForegroundBrush, Source={x:Static shared:Theme.Instance}}" />
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsActive" Value="True" />
                                <Condition Property="WindowState" Value="Normal" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="shadowBorder" Property="Visibility" Value="Visible" />
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>



    <Style TargetType="{x:Type shared:ToolsUIWindow}">
        <Setter Property="ResizeMode" Value="CanResizeWithGrip" />
        <Setter Property="WindowStyle" Value="None" />
        <Setter Property="Background" Value="White" />
        <Setter Property="Foreground" Value="Black" />
        <Setter Property="AllowsTransparency" Value="True" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type shared:ToolsUIWindow}">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="*" />
                            <ColumnDefinition Width="Auto" />
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto" />
                            <RowDefinition Height="*" />
                            <RowDefinition Height="Auto" />
                        </Grid.RowDefinitions>

                        <Border x:Name="shadowBorder" BorderThickness="1" Margin="3" BorderBrush="#10000000" Grid.ColumnSpan="3" Grid.RowSpan="3" Visibility="Hidden">
                            <Border BorderThickness="1" BorderBrush="#28000000">
                                <Border BorderThickness="1" BorderBrush="#40000000" />
                            </Border>
                        </Border>
                        <Border x:Name="outerBorder" BorderThickness="1" Margin="6" BorderBrush="Black" Grid.ColumnSpan="3" Grid.RowSpan="3" Background="{TemplateBinding Background}">
                            <DockPanel ClipToBounds="True">
                                <Grid DockPanel.Dock="Top">
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="Auto" />
                                        <ColumnDefinition Width="Auto" />
                                        <ColumnDefinition Width="*" />
                                        <ColumnDefinition Width="Auto" />
                                    </Grid.ColumnDefinitions>
                                    <TextBlock x:Name="titleText" Grid.Column="2" HorizontalAlignment="Center" Text="{TemplateBinding Title}" Margin="4" Foreground="{shared:ThemeBinding WindowTitleForegroundBrush}" />
                                    <Border x:Name="PART_Mover" Grid.Column="0" Grid.ColumnSpan="4" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Background="Transparent" />
                                    <Image x:Name="PART_SysMenuIcon" Grid.Column="0" Source="{Binding Path=Icon, RelativeSource={RelativeSource TemplatedParent}}" HorizontalAlignment="Left" VerticalAlignment="Top" Width="20" Height="20" Margin="4" />
                                    <shared:QATItemsControl x:Name="PART_QATItemsControl" Grid.Column="1" HorizontalAlignment="Left" VerticalAlignment="Stretch"
                                          ItemsSource="{Binding Path=QATButtonDefinitions, Source={x:Static shared:ToolsUIApplication.Instance}}"
                                          ItemContainerStyle="{StaticResource TitleBarButtonStyle}" ButtonMargin="0,2">
                                        <ItemsControl.ItemsPanel>
                                            <ItemsPanelTemplate>
                                                <StackPanel Orientation="Horizontal" />
                                            </ItemsPanelTemplate>
                                        </ItemsControl.ItemsPanel>
                                    </shared:QATItemsControl>
                                    <StackPanel Grid.Column="3" Orientation="Horizontal" HorizontalAlignment="Right" VerticalAlignment="Stretch">
                                        <Button Style="{StaticResource TitleBarButtonStyle}" Margin="0,2" Command="{x:Static shared:ToolsUIWindow.MinimizeCommand}" ContentTemplate="{StaticResource MinimizeButtonContentTemplate}" />
                                        <Button x:Name="maximizeButton" Style="{StaticResource TitleBarButtonStyle}" Margin="0,2" Command="{x:Static shared:ToolsUIWindow.MaximizeCommand}" ContentTemplate="{StaticResource MaximizeButtonContentTemplate}" />
                                        <Button Style="{StaticResource TitleBarButtonStyle}" Margin="0,2" Command="{x:Static shared:ToolsUIWindow.CloseWindowCommand}" ContentTemplate="{StaticResource CloseButtonContentTemplate}"/>
                                    </StackPanel>
                                </Grid>
                                <AdornerDecorator>
                                    <Grid>
                                        <shared:LayoutTabControl x:Name="PART_LayoutTabControl" ItemsSource="{Binding Path=Layouts, RelativeSource={RelativeSource TemplatedParent}}"
                                           ServiceProvider="{TemplateBinding ServiceProvider}"/>
                                        <shared:FileTabControl x:Name="PART_FileTabControl" ItemsSource="{Binding Path=FileTabDefinitions, Source={x:Static shared:ToolsUIApplication.Instance}}" Visibility="Collapsed">
                                            <shared:FileTabControl.RenderTransform>
                                                <TranslateTransform x:Name="xlat" />
                                            </shared:FileTabControl.RenderTransform>
                                        </shared:FileTabControl>
                                    </Grid>
                                </AdornerDecorator>
                            </DockPanel>
                        </Border>

                        <Thumb x:Name="PART_LeftSizer" Grid.Row="1" Grid.Column="0" Style="{StaticResource SizerThumbStyle}" Cursor="SizeWE" HorizontalAlignment="Left" VerticalAlignment="Stretch" />
                        <Thumb x:Name="PART_TopSizer" Grid.Row="0" Grid.Column="1" Style="{StaticResource SizerThumbStyle}" Cursor="SizeNS" HorizontalAlignment="Stretch" VerticalAlignment="Top" />
                        <Thumb x:Name="PART_RightSizer" Grid.Row="1" Grid.Column="2" Style="{StaticResource SizerThumbStyle}" Cursor="SizeWE" HorizontalAlignment="Right" VerticalAlignment="Stretch" />
                        <Thumb x:Name="PART_BottomSizer" Grid.Row="2" Grid.Column="1" Style="{StaticResource SizerThumbStyle}" Cursor="SizeNS" HorizontalAlignment="Stretch" VerticalAlignment="Bottom" />

                        <Thumb x:Name="PART_TopLeftSizer" Grid.Row="0" Grid.Column="0" Style="{StaticResource CornerSizerThumbStyle}" Cursor="SizeNWSE" HorizontalAlignment="Left" VerticalAlignment="Top" />
                        <Thumb x:Name="PART_TopRightSizer" Grid.Row="0" Grid.Column="2" Style="{StaticResource CornerSizerThumbStyle}" Cursor="SizeNESW" HorizontalAlignment="Right" VerticalAlignment="Top" />
                        <Thumb x:Name="PART_BottomLeftSizer" Grid.Row="2" Grid.Column="0" Style="{StaticResource CornerSizerThumbStyle}" Cursor="SizeNESW" HorizontalAlignment="Left" VerticalAlignment="Bottom" />
                        <Thumb x:Name="PART_BottomRightSizer" Grid.Row="2" Grid.Column="2" Style="{StaticResource CornerSizerThumbStyle}" Cursor="SizeNWSE" HorizontalAlignment="Right" VerticalAlignment="Bottom" />

                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="WindowState" Value="Maximized">
                            <Setter TargetName="outerBorder" Property="Margin" Value="0" />
                            <Setter TargetName="PART_LeftSizer" Property="Visibility" Value="Collapsed" />
                            <Setter TargetName="PART_TopSizer" Property="Visibility" Value="Collapsed" />
                            <Setter TargetName="PART_RightSizer" Property="Visibility" Value="Collapsed" />
                            <Setter TargetName="PART_BottomSizer" Property="Visibility" Value="Collapsed" />
                            <Setter TargetName="PART_TopLeftSizer" Property="Visibility" Value="Collapsed" />
                            <Setter TargetName="PART_TopRightSizer" Property="Visibility" Value="Collapsed" />
                            <Setter TargetName="PART_BottomLeftSizer" Property="Visibility" Value="Collapsed" />
                            <Setter TargetName="PART_BottomRightSizer" Property="Visibility" Value="Collapsed" />
                            <Setter TargetName="maximizeButton" Property="Command" Value="{x:Static shared:ToolsUIWindow.RestoreCommand}" />
                            <Setter TargetName="maximizeButton" Property="ContentTemplate" Value="{StaticResource RestoreButtonContentTemplate}" />
                        </Trigger>
                        <Trigger Property="IsActive" Value="False">
                            <Setter TargetName="titleText" Property="Foreground" Value="{Binding Path=Theme.WindowTitleInactiveForegroundBrush, Source={x:Static shared:Theme.Instance}}" />
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsActive" Value="True" />
                                <Condition Property="WindowState" Value="Normal" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="shadowBorder" Property="Visibility" Value="Visible" />
                        </MultiTrigger>
                        <Trigger Property="IsFileTabOpen" Value="True">
                            <Trigger.EnterActions>
                                <BeginStoryboard x:Name="foo">
                                    <Storyboard>
                                        <!-- Show File tab, slide + fade in -->
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetName="PART_FileTabControl" Storyboard.TargetProperty="Visibility" Duration="0:0:0">
                                            <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="{x:Static Visibility.Visible}" />
                                        </ObjectAnimationUsingKeyFrames>
                                        <DoubleAnimation From="-125" Storyboard.TargetName="xlat" Storyboard.TargetProperty="X" Duration="0:0:0.2" DecelerationRatio="0.7" />

                                        <!-- Fade out main content, and hide -->
                                        <DoubleAnimation To="0" Storyboard.TargetName="PART_LayoutTabControl" Storyboard.TargetProperty="Opacity" Duration="0:0:0.2" />
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetName="PART_LayoutTabControl" Storyboard.TargetProperty="Visibility" Duration="0:0:0.5">
                                            <DiscreteObjectKeyFrame KeyTime="0:0:0.3" Value="{x:Static Visibility.Collapsed}" />
                                        </ObjectAnimationUsingKeyFrames>
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.EnterActions>
                            <Trigger.ExitActions>
                                <StopStoryboard BeginStoryboardName="foo" />
                                <BeginStoryboard>
                                    <Storyboard>
                                        <!-- Show main content, fade in -->
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetName="PART_LayoutTabControl" Storyboard.TargetProperty="Visibility" Duration="0:0:1">
                                            <DiscreteObjectKeyFrame KeyTime="0:0:0.1" Value="{x:Static Visibility.Visible}" />
                                        </ObjectAnimationUsingKeyFrames>
                                        <DoubleAnimation Storyboard.TargetName="PART_LayoutTabControl" Storyboard.TargetProperty="Opacity" BeginTime="0:0:0.1" Duration="0:0:0.1" />

                                        <!-- Slide File tab left, fade it out, and hide -->
                                        <DoubleAnimation To="-125" Storyboard.TargetName="xlat" Storyboard.TargetProperty="X" Duration="0:0:0.05" />
                                        <DoubleAnimation To="0" Storyboard.TargetName="PART_FileTabControl" Storyboard.TargetProperty="Opacity" Duration="0:0:0.1" BeginTime="0:0:0" />
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetName="PART_FileTabControl" Storyboard.TargetProperty="Visibility" Duration="0:0:0.5">
                                            <DiscreteObjectKeyFrame KeyTime="0:0:0.2" Value="{x:Static Visibility.Collapsed}" />
                                        </ObjectAnimationUsingKeyFrames>
                                        <DoubleAnimation Storyboard.TargetName="PART_FileTabControl" Storyboard.TargetProperty="Opacity" BeginTime="0:0:0.4" Duration="0:0:0" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.ExitActions>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type shared:ThemeEditorView}">
        <Setter Property="TextElement.Foreground" Value="{Binding Path=Theme.ControlForegroundBrush, Source={x:Static shared:Theme.Instance}}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type shared:ThemeEditorView}">
                    <Grid Margin="{shared:ThemeBinding ViewMargin}">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="*" />
                        </Grid.ColumnDefinitions>
                        <Grid Grid.Column="0">
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto" />
                                <RowDefinition Height="*" />
                            </Grid.RowDefinitions>
                            <DockPanel Grid.Row="0" Margin="8,0">
                                <TextBlock DockPanel.Dock="Left" Text="Filter:" VerticalAlignment="Center" />
                                <TextBox x:Name="PART_FilterBox" Margin="4,0,0,0" VerticalAlignment="Center" />
                            </DockPanel>
                            <ListBox x:Name="PART_PropertyList" Grid.Row="1" Margin="8" SelectionMode="Extended"
                       ItemsSource="{Binding Path=ThemePropertySource.View, RelativeSource={RelativeSource TemplatedParent}}">
                                <ListBox.GroupStyle>
                                    <GroupStyle>
                                        <GroupStyle.HeaderTemplate>
                                            <DataTemplate>
                                                <TextBlock Text="{Binding Path=Name}" FontWeight="Bold" Margin="3,8,3,2" />
                                            </DataTemplate>
                                        </GroupStyle.HeaderTemplate>
                                    </GroupStyle>
                                </ListBox.GroupStyle>
                                <ListBox.ItemTemplate>
                                    <DataTemplate>
                                        <DockPanel>
                                            <ContentControl DockPanel.Dock="Right" Width="60" Margin="4,0" Content="{Binding}" ContentTemplate="{Binding Path=SwatchTemplate}" />
                                            <TextBlock DockPanel.Dock="Right" Text="{Binding Path=Type}" FontSize="10" />
                                            <TextBlock HorizontalAlignment="Left" Margin="5,0" Text="{Binding Path=Name}" FontSize="12" />
                                        </DockPanel>
                                    </DataTemplate>
                                </ListBox.ItemTemplate>
                            </ListBox>
                        </Grid>
                        <Grid Grid.Column="1">
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto" />
                                <RowDefinition Height="*" />
                            </Grid.RowDefinitions>
                            <DockPanel Grid.Row="0" Margin="8">
                                <StackPanel Orientation="Horizontal" DockPanel.Dock="Top">
                                    <TextBlock Text="Active Theme: " VerticalAlignment="Center" Margin="8" />
                                    <ComboBox ItemsSource="{Binding Path=Themes, Source={x:Static shared:Theme.Instance}}" DisplayMemberPath="ThemeName" Width="150" Margin="8"
                            SelectedItem="{Binding Path=Theme, Source={x:Static shared:Theme.Instance}}" />
                                    <TextBox Text="{Binding Path=Theme.ThemeName, Source={x:Static shared:Theme.Instance}, UpdateSourceTrigger=PropertyChanged}"  Margin="8" VerticalAlignment="Center" Width="150" />
                                    <Button Content="Add Theme" Margin="8" VerticalAlignment="Center" Command="{x:Static shared:ThemeEditorView.AddThemeCommand}" />
                                    <Button Content="Delete Theme" Margin="8" VerticalAlignment="Center" Command="{x:Static shared:ThemeEditorView.DeleteThemeCommand}" />
                                </StackPanel>
                                <TextBlock DockPanel.Dock="Top" Text="{Binding Path=SelectedItem.Name, ElementName=PART_PropertyList}" FontWeight="Bold"/>
                                <TextBlock DockPanel.Dock="Top" Text="{Binding Path=SelectedItem.Type, ElementName=PART_PropertyList}" />
                                <ContentPresenter Content="{Binding Path=Editor, RelativeSource={RelativeSource TemplatedParent}}" Margin="8" MinHeight="275" />
                            </DockPanel>
                            <ScrollViewer Grid.Row="1">
                                <GroupBox Header="Sample Controls" Margin="8">
                                    <StackPanel Margin="0,8">
                                        <TextBlock Text="Buttons:" Margin="8,0" />
                                        <StackPanel Orientation="Horizontal">
                                            <Button Content="Normal" Margin="8" />
                                            <Button Content="Disabled" Margin="8" IsEnabled="False" />
                                        </StackPanel>
                                        <TextBlock Text="Toggle Buttons:" Margin="8,0" />
                                        <StackPanel Orientation="Horizontal">
                                            <ToggleButton Content="Normal" Margin="8" />
                                            <ToggleButton Content="Non-focusable" Margin="8" Focusable="False" />
                                            <ToggleButton Content="Disabled" Margin="8" IsEnabled="False" />
                                            <ToggleButton Content="Disabled / Checked" Margin="8" IsEnabled="False" IsChecked="True" />
                                        </StackPanel>
                                        <TextBlock Text="Checkboxes:" Margin="8,0" />
                                        <StackPanel Orientation="Horizontal">
                                            <CheckBox Content="Normal" Margin="8" />
                                            <CheckBox Content="Three-state" Margin="8" IsThreeState="True" />
                                            <CheckBox Content="Disabled" Margin="8" IsEnabled="False" />
                                            <CheckBox Content="Disabled / Checked" Margin="8" IsEnabled="False" IsChecked="True" />
                                        </StackPanel>
                                        <TextBlock Text="Text boxes:" Margin="8,0" />
                                        <StackPanel Orientation="Horizontal">
                                            <TextBox Text="Normal" Margin="8" Width="150" />
                                            <TextBox Text="Read-Only" Margin="8" Width="150" IsReadOnly="True" />
                                            <TextBox Text="Disabled" Margin="8" Width="150" IsEnabled="False" />
                                        </StackPanel>
                                        <StackPanel Orientation="Horizontal">
                                            <ListBox Margin="8" ItemsSource="{Binding Path=ThemePropertySource.View, RelativeSource={RelativeSource TemplatedParent}}" DisplayMemberPath="Name" Height="150" Width="250" />
                                            <ComboBox Margin="8" ItemsSource="{Binding Path=ThemePropertySource.View, RelativeSource={RelativeSource TemplatedParent}}" DisplayMemberPath="Name" Width="250" VerticalAlignment="Top"/>
                                        </StackPanel>

                                    </StackPanel>
                                </GroupBox>
                            </ScrollViewer>

                        </Grid>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <DataTemplate x:Key="ColorSwatchTemplate">
        <Border>
            <Border.Background>
                <SolidColorBrush Color="{Binding Path=Value}" />
            </Border.Background>
            <TextBlock Text="{Binding Path=PaletteItemName}" HorizontalAlignment="Center" FontSize="10" Foreground="{Binding Path=Value, Converter={StaticResource ContrastingBlackWhiteConverter}}" />
        </Border>
    </DataTemplate>

    <DataTemplate x:Key="TextSwatchTemplate">
        <TextBlock Text="{Binding Path=Value}" FontSize="10" />
    </DataTemplate>

    <Style TargetType="{x:Type shared:GenericPropertyEditor}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type shared:GenericPropertyEditor}">
                    <TextBox AcceptsReturn="True" Text="{Binding Path=Value, RelativeSource={RelativeSource TemplatedParent}, UpdateSourceTrigger=PropertyChanged}" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type shared:MessagePropertyEditor}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type shared:MessagePropertyEditor}">
                    <TextBlock TextWrapping="Wrap" Text="{Binding Path=Message, RelativeSource={RelativeSource TemplatedParent}}"
                     HorizontalAlignment="Center" VerticalAlignment="Center" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <shared:ChannelMinMaxConverter x:Key="RMin" Value="0" R="True" />
    <shared:ChannelMinMaxConverter x:Key="RMax" Value="255" R="True" />
    <shared:ChannelMinMaxConverter x:Key="GMin" Value="0" G="True" />
    <shared:ChannelMinMaxConverter x:Key="GMax" Value="255" G="True" />
    <shared:ChannelMinMaxConverter x:Key="BMin" Value="0" B="True" />
    <shared:ChannelMinMaxConverter x:Key="BMax" Value="255" B="True" />
    <shared:ChannelMinMaxConverter x:Key="AMin" Value="0" A="True" />
    <shared:ChannelMinMaxConverter x:Key="AMax" Value="255" A="True" />

    <Style TargetType="{x:Type shared:ColorPropertyEditor}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type shared:ColorPropertyEditor}">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="*" />
                        </Grid.ColumnDefinitions>
                        <Border Margin="10" BorderThickness="3" CornerRadius="3" Width="200" VerticalAlignment="Stretch" BorderBrush="Black" Background="{Binding Path=Brush, RelativeSource={RelativeSource TemplatedParent}}" />
                        <DockPanel Grid.Column="1" LastChildFill="False">
                            <Slider DockPanel.Dock="Top" Focusable="False" Margin="10,10,10,0" Minimum="0" Maximum="255" Value="{Binding Path=R, RelativeSource={RelativeSource TemplatedParent}}">
                                <Slider.Background>
                                    <LinearGradientBrush EndPoint="1,0">
                                        <GradientStop Offset="0" Color="{Binding Path=Color, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource RMin}}" />
                                        <GradientStop Offset="1" Color="{Binding Path=Color, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource RMax}}" />
                                    </LinearGradientBrush>
                                </Slider.Background>
                            </Slider>
                            <Slider DockPanel.Dock="Top" Focusable="False" Margin="10,10,10,0" Minimum="0" Maximum="255" Value="{Binding Path=G, RelativeSource={RelativeSource TemplatedParent}}">
                                <Slider.Background>
                                    <LinearGradientBrush EndPoint="1,0">
                                        <GradientStop Offset="0" Color="{Binding Path=Color, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource GMin}}" />
                                        <GradientStop Offset="1" Color="{Binding Path=Color, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource GMax}}" />
                                    </LinearGradientBrush>
                                </Slider.Background>
                            </Slider>
                            <Slider DockPanel.Dock="Top" Focusable="False" Margin="10,10,10,0" Minimum="0" Maximum="255" Value="{Binding Path=B, RelativeSource={RelativeSource TemplatedParent}}">
                                <Slider.Background>
                                    <LinearGradientBrush EndPoint="1,0">
                                        <GradientStop Offset="0" Color="{Binding Path=Color, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource BMin}}" />
                                        <GradientStop Offset="1" Color="{Binding Path=Color, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource BMax}}" />
                                    </LinearGradientBrush>
                                </Slider.Background>
                            </Slider>
                            <Slider DockPanel.Dock="Top" Focusable="False" Margin="10,10,10,0" Minimum="0" Maximum="255" Value="{Binding Path=A, RelativeSource={RelativeSource TemplatedParent}}">
                                <Slider.Background>
                                    <LinearGradientBrush EndPoint="1,0">
                                        <GradientStop Offset="0" Color="{Binding Path=Color, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource AMin}}" />
                                        <GradientStop Offset="1" Color="{Binding Path=Color, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource AMax}}" />
                                    </LinearGradientBrush>
                                </Slider.Background>
                            </Slider>
                            <TextBlock DockPanel.Dock="Top" Text="Gray Scale" Margin="10,10,10,2"/>
                            <Slider DockPanel.Dock="Top" Focusable="False" Margin="10,10,10,0" Minimum="0" Maximum="255" Value="{Binding Path=GrayScale, RelativeSource={RelativeSource TemplatedParent}}">
                                <Slider.Background>
                                    <LinearGradientBrush EndPoint="1,0">
                                        <GradientStop Offset="0" Color="#000000" />
                                        <GradientStop Offset="1" Color="#ffffff" />
                                    </LinearGradientBrush>
                                </Slider.Background>
                            </Slider>
                            <TextBox DockPanel.Dock="Top" Margin="10" Text="{Binding Path=Color, RelativeSource={RelativeSource TemplatedParent}}" />
                            <TextBlock DockPanel.Dock="Top" Text="Palette" Margin="10,10,10,2"/>
                            <shared:PaletteColorListBox x:Name="PART_PaletteList" DockPanel.Dock="Top"
                       ItemsSource="{Binding Path=Theme.Palette, Source={x:Static shared:Theme.Instance}}"
                       SelectedItem="{Binding Path=SelectedPaletteColor, RelativeSource={RelativeSource TemplatedParent}}"
                       VerticalAlignment="Center" Margin="10,2,10,10">
                                <ListBox.ItemsPanel>
                                    <ItemsPanelTemplate>
                                        <StackPanel Orientation="Horizontal" />
                                    </ItemsPanelTemplate>
                                </ListBox.ItemsPanel>
                                <ListBox.ItemTemplate>
                                    <DataTemplate>
                                        <Border Width="16" Height="16" BorderBrush="Black" BorderThickness="1" CornerRadius="2" Margin="2"
                            ToolTip="{Binding Path=Name}">
                                            <Border.Background>
                                                <SolidColorBrush Color="{Binding Path=Color}" />
                                            </Border.Background>
                                        </Border>
                                    </DataTemplate>
                                </ListBox.ItemTemplate>
                            </shared:PaletteColorListBox>
                            <DockPanel DockPanel.Dock="Top" Margin="10,0">
                                <Button DockPanel.Dock="Right" VerticalAlignment="Center" Content="New" Command="{x:Static shared:ColorPropertyEditor.NewPaletteColorCommand}" />
                                <TextBox VerticalAlignment="Center" Text="{Binding Path=SelectedItem.Name, ElementName=PART_PaletteList}" Margin="0,0,4,0" />
                            </DockPanel>
                        </DockPanel>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

</ResourceDictionary>