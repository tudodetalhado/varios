<!--
THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF 
ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO 
THE IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A 
PARTICULAR PURPOSE.  
Copyright (c) Microsoft Corporation. All rights reserved.
-->

<ListView x:Class="Microsoft.Xbox.Tools.Shared.TreeGridView"
          xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
          xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
          xmlns:l="clr-namespace:Microsoft.Xbox.Tools.Shared"
          BorderThickness="0"
          KeyboardNavigation.DirectionalNavigation="Contained"
          VirtualizingStackPanel.IsVirtualizing="true">
    <ListView.Resources>

        <!-- defines the gridline style; the gridline is a horizontal ItemsControl whose items are borders, 
        ItemsSource is bound to GridViewColumnCollection, and the width of border is bound
        to GridViewColumn.ActualWidth -->
        <Style x:Key="TreeGridLineStyle" TargetType="{x:Type ItemsControl}">
            <Setter Property="BorderThickness" Value="0"/>
            <Setter Property="Background" Value="Transparent"/>
            <Setter Property="Focusable" Value="False"/>
            <Setter Property="IsHitTestVisible" Value="False"/>
            <Setter Property="ItemTemplate">
                <Setter.Value>
                    <DataTemplate>
                        <Grid>
                            <Border BorderBrush="#d0d0d0" BorderThickness="0,0,1,0" Background="Transparent"
                      Width="{Binding ActualWidth}" VerticalAlignment="Stretch" SnapsToDevicePixels="True"/>
                        </Grid>
                    </DataTemplate>
                </Setter.Value>
            </Setter>
            <Setter Property="ItemsPanel">
                <Setter.Value>
                    <ItemsPanelTemplate>
                        <StackPanel Orientation="Horizontal"/>
                    </ItemsPanelTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <Style TargetType="{x:Type l:TreeGridViewItem}">
            <Setter Property="Margin" Value="0"/>
            <Setter Property="HorizontalContentAlignment" Value="Stretch" />
            <Setter Property="VerticalContentAlignment" Value="Stretch" />
            <Setter Property="FocusVisualStyle" Value="{x:Null}" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type l:TreeGridViewItem}">
                        <Grid>
                            <!-- the row -->
                            <Border x:Name="Bd" Background="Transparent" BorderThickness="1,0,0,1" SnapsToDevicePixels="True" BorderBrush="#d0d0d0">
                                <GridViewRowPresenter x:Name="PART_Header" MinWidth="75" MinHeight="18" Focusable="False" />
                            </Border>

                            <!-- overlap the gridlines -->
                            <ItemsControl Grid.Row="0" Style="{StaticResource TreeGridLineStyle}" ItemsSource="{TemplateBinding GridView.ColumnCollection}"/>

                            <!-- on top of all that, add the focus rect -->
                            <Border x:Name="FocusBorder" Background="Transparent" BorderThickness="2" SnapsToDevicePixels="True" Margin="0,-1,0,0"
                      BorderBrush="{Binding Path=SelectionBorder, RelativeSource={RelativeSource AncestorType={x:Type l:TreeGridView}}}" 
                      Visibility="Hidden" IsHitTestVisible="False" />
                        </Grid>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsSelected" Value="true">
                                <Setter Property="Background" TargetName="Bd" Value="{Binding SelectionBackground, RelativeSource={RelativeSource AncestorType={x:Type l:TreeGridView}}}"/>
                                <Setter Property="Foreground" Value="{Binding SelectionForeground, RelativeSource={RelativeSource AncestorType={x:Type l:TreeGridView}}}"/>
                            </Trigger>
                            <Trigger Property="IsFocused" Value="true">
                                <Setter TargetName="FocusBorder" Property="Visibility" Value="Visible" />
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <!-- the expander style -->
        <PathGeometry x:Key="TreeArrow" Figures="M0,0 L0,6 L6,0 z"/>
        <Style x:Key="ExpandCollapseToggleStyle" TargetType="{x:Type ToggleButton}">
            <Setter Property="Focusable" Value="False"/>
            <Setter Property="Width" Value="16"/>
            <Setter Property="Height" Value="16"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ToggleButton}">
                        <Border Width="16" Height="16" Background="Transparent" Padding="5">
                            <Path x:Name="ExpandPath" Fill="{TemplateBinding Foreground}" Data="{StaticResource TreeArrow}">
                                <Path.RenderTransform>
                                    <RotateTransform Angle="135" CenterX="3" CenterY="3"/>
                                </Path.RenderTransform>
                            </Path>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsChecked" Value="True">
                                <Setter Property="RenderTransform" TargetName="ExpandPath">
                                    <Setter.Value>
                                        <RotateTransform Angle="180" CenterX="3" CenterY="3"/>
                                    </Setter.Value>
                                </Setter>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>


        <l:TreeGridIndentConverter x:Key="IndentConverter"/>

        <!-- The template for first column, showing an expander before the actual datatemplate -->
        <DataTemplate x:Key="TreeGridViewFirstColumnTemplate">
            <Grid Background="Transparent">
                <Grid.ContextMenu>
                    <ContextMenu>
                        <MenuItem Header="Expand" Command="{x:Static l:TreeGridViewItem.ExpandCommand}" TextElement.FontWeight="Bold" />
                        <MenuItem Header="Expand This Branch" Command="{x:Static l:TreeGridViewItem.ExpandFullyCommand}" />
                        <MenuItem Header="Expand All" Command="{x:Static l:TreeGridViewItem.ExpandAllCommand}" />
                    </ContextMenu>
                </Grid.ContextMenu>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto"/>
                    <ColumnDefinition/>
                </Grid.ColumnDefinitions>
                <ToggleButton x:Name="_Expander" Grid.Column="0"
                      Style="{StaticResource ExpandCollapseToggleStyle}"
                      Foreground="{Binding Path=(Control.Foreground), RelativeSource={RelativeSource TemplatedParent}}"
                      IsChecked="{Binding Path=IsExpanded, RelativeSource={RelativeSource AncestorType={x:Type l:TreeGridViewItem}}}"
                      Margin="{Binding Path=Level, RelativeSource={RelativeSource AncestorType={x:Type l:TreeGridViewItem}}, Converter={StaticResource ResourceKey=IndentConverter}}"
                      ClickMode="Press">
                </ToggleButton>
                <ContentPresenter Grid.Column="1"
                          Content="{Binding Content, RelativeSource={RelativeSource AncestorType={x:Type l:TreeGridViewItem}}}"
                          ContentTemplate="{Binding ItemTemplate, RelativeSource={RelativeSource AncestorType={x:Type l:TreeGridView}}}"/>
            </Grid>
            <DataTemplate.Triggers>
                <DataTrigger Binding="{Binding Path=HasChildren, RelativeSource={RelativeSource AncestorType={x:Type l:TreeGridViewItem}}}" Value="False">
                    <Setter TargetName="_Expander" Property="Visibility" Value="Hidden"/>
                </DataTrigger>
            </DataTemplate.Triggers>
        </DataTemplate>

    </ListView.Resources>
</ListView>
