//// THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF 
//// ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO 
//// THE IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A 
//// PARTICULAR PURPOSE. 
//// 
//// Copyright (c) Microsoft Corporation. All rights reserved.

using System.Linq;
using System.Windows;
using System.Windows.Data;
using System.Windows.Media;
using Microsoft.Xbox.Tools.Shared;

// DO NOT EDIT THIS FILE!
// Edit BaseTheme.theme and re-run ThemeGenerator instead.

namespace Microsoft.Xbox.Tools.Shared
{
    public class BaseTheme : Microsoft.Xbox.Tools.Shared.Theme
    {
        public static DependencyProperty BladePageHoverBackgroundColorProperty = DependencyProperty.Register("BladePageHoverBackgroundColor", typeof(Color), typeof(Theme));
        static DependencyPropertyKey _BladePageHoverBackgroundBrushPropertyKey = DependencyProperty.RegisterReadOnly("BladePageHoverBackgroundBrush", typeof(Brush), typeof(Theme), new FrameworkPropertyMetadata());
        public static DependencyProperty BladePageHoverBackgroundBrushProperty = _BladePageHoverBackgroundBrushPropertyKey.DependencyProperty;
        public static DependencyProperty BladePageHoverForegroundColorProperty = DependencyProperty.Register("BladePageHoverForegroundColor", typeof(Color), typeof(Theme));
        static DependencyPropertyKey _BladePageHoverForegroundBrushPropertyKey = DependencyProperty.RegisterReadOnly("BladePageHoverForegroundBrush", typeof(Brush), typeof(Theme), new FrameworkPropertyMetadata());
        public static DependencyProperty BladePageHoverForegroundBrushProperty = _BladePageHoverForegroundBrushPropertyKey.DependencyProperty;
        public static DependencyProperty ButtonPaddingProperty = DependencyProperty.Register("ButtonPadding", typeof(Thickness), typeof(Theme), new FrameworkPropertyMetadata(new Thickness(12,2,12,2)));
        public static DependencyProperty CheckBoxContentMarginProperty = DependencyProperty.Register("CheckBoxContentMargin", typeof(Thickness), typeof(Theme), new FrameworkPropertyMetadata(new Thickness(4,0,2,0)));
        public static DependencyProperty ComboBoxDropdownBackgroundColorProperty = DependencyProperty.Register("ComboBoxDropdownBackgroundColor", typeof(Color), typeof(Theme));
        static DependencyPropertyKey _ComboBoxDropdownBackgroundBrushPropertyKey = DependencyProperty.RegisterReadOnly("ComboBoxDropdownBackgroundBrush", typeof(Brush), typeof(Theme), new FrameworkPropertyMetadata());
        public static DependencyProperty ComboBoxDropdownBackgroundBrushProperty = _ComboBoxDropdownBackgroundBrushPropertyKey.DependencyProperty;
        public static DependencyProperty ComboBoxItemHighlightedBackgroundColorProperty = DependencyProperty.Register("ComboBoxItemHighlightedBackgroundColor", typeof(Color), typeof(Theme));
        static DependencyPropertyKey _ComboBoxItemHighlightedBackgroundBrushPropertyKey = DependencyProperty.RegisterReadOnly("ComboBoxItemHighlightedBackgroundBrush", typeof(Brush), typeof(Theme), new FrameworkPropertyMetadata());
        public static DependencyProperty ComboBoxItemHighlightedBackgroundBrushProperty = _ComboBoxItemHighlightedBackgroundBrushPropertyKey.DependencyProperty;
        public static DependencyProperty ComboBoxItemHighlightedForegroundColorProperty = DependencyProperty.Register("ComboBoxItemHighlightedForegroundColor", typeof(Color), typeof(Theme));
        static DependencyPropertyKey _ComboBoxItemHighlightedForegroundBrushPropertyKey = DependencyProperty.RegisterReadOnly("ComboBoxItemHighlightedForegroundBrush", typeof(Brush), typeof(Theme), new FrameworkPropertyMetadata());
        public static DependencyProperty ComboBoxItemHighlightedForegroundBrushProperty = _ComboBoxItemHighlightedForegroundBrushPropertyKey.DependencyProperty;
        public static DependencyProperty ComboBoxItemMarginProperty = DependencyProperty.Register("ComboBoxItemMargin", typeof(Thickness), typeof(Theme), new FrameworkPropertyMetadata(new Thickness(2)));
        public static DependencyProperty ComboBoxItemSelectedBackgroundColorProperty = DependencyProperty.Register("ComboBoxItemSelectedBackgroundColor", typeof(Color), typeof(Theme));
        static DependencyPropertyKey _ComboBoxItemSelectedBackgroundBrushPropertyKey = DependencyProperty.RegisterReadOnly("ComboBoxItemSelectedBackgroundBrush", typeof(Brush), typeof(Theme), new FrameworkPropertyMetadata());
        public static DependencyProperty ComboBoxItemSelectedBackgroundBrushProperty = _ComboBoxItemSelectedBackgroundBrushPropertyKey.DependencyProperty;
        public static DependencyProperty ComboBoxItemSelectedForegroundColorProperty = DependencyProperty.Register("ComboBoxItemSelectedForegroundColor", typeof(Color), typeof(Theme));
        static DependencyPropertyKey _ComboBoxItemSelectedForegroundBrushPropertyKey = DependencyProperty.RegisterReadOnly("ComboBoxItemSelectedForegroundBrush", typeof(Brush), typeof(Theme), new FrameworkPropertyMetadata());
        public static DependencyProperty ComboBoxItemSelectedForegroundBrushProperty = _ComboBoxItemSelectedForegroundBrushPropertyKey.DependencyProperty;
        public static DependencyProperty ControlBackgroundColorProperty = DependencyProperty.Register("ControlBackgroundColor", typeof(Color), typeof(Theme));
        static DependencyPropertyKey _ControlBackgroundBrushPropertyKey = DependencyProperty.RegisterReadOnly("ControlBackgroundBrush", typeof(Brush), typeof(Theme), new FrameworkPropertyMetadata());
        public static DependencyProperty ControlBackgroundBrushProperty = _ControlBackgroundBrushPropertyKey.DependencyProperty;
        public static DependencyProperty ControlBorderColorProperty = DependencyProperty.Register("ControlBorderColor", typeof(Color), typeof(Theme));
        static DependencyPropertyKey _ControlBorderBrushPropertyKey = DependencyProperty.RegisterReadOnly("ControlBorderBrush", typeof(Brush), typeof(Theme), new FrameworkPropertyMetadata());
        public static DependencyProperty ControlBorderBrushProperty = _ControlBorderBrushPropertyKey.DependencyProperty;
        public static DependencyProperty ControlBorderThicknessProperty = DependencyProperty.Register("ControlBorderThickness", typeof(Thickness), typeof(Theme), new FrameworkPropertyMetadata(new Thickness(1)));
        public static DependencyProperty ControlDisabledBackgroundColorProperty = DependencyProperty.Register("ControlDisabledBackgroundColor", typeof(Color), typeof(Theme));
        static DependencyPropertyKey _ControlDisabledBackgroundBrushPropertyKey = DependencyProperty.RegisterReadOnly("ControlDisabledBackgroundBrush", typeof(Brush), typeof(Theme), new FrameworkPropertyMetadata());
        public static DependencyProperty ControlDisabledBackgroundBrushProperty = _ControlDisabledBackgroundBrushPropertyKey.DependencyProperty;
        public static DependencyProperty ControlDisabledBorderColorProperty = DependencyProperty.Register("ControlDisabledBorderColor", typeof(Color), typeof(Theme));
        static DependencyPropertyKey _ControlDisabledBorderBrushPropertyKey = DependencyProperty.RegisterReadOnly("ControlDisabledBorderBrush", typeof(Brush), typeof(Theme), new FrameworkPropertyMetadata());
        public static DependencyProperty ControlDisabledBorderBrushProperty = _ControlDisabledBorderBrushPropertyKey.DependencyProperty;
        public static DependencyProperty ControlDisabledForegroundColorProperty = DependencyProperty.Register("ControlDisabledForegroundColor", typeof(Color), typeof(Theme));
        static DependencyPropertyKey _ControlDisabledForegroundBrushPropertyKey = DependencyProperty.RegisterReadOnly("ControlDisabledForegroundBrush", typeof(Brush), typeof(Theme), new FrameworkPropertyMetadata());
        public static DependencyProperty ControlDisabledForegroundBrushProperty = _ControlDisabledForegroundBrushPropertyKey.DependencyProperty;
        public static DependencyProperty ControlFocusedBackgroundColorProperty = DependencyProperty.Register("ControlFocusedBackgroundColor", typeof(Color), typeof(Theme));
        static DependencyPropertyKey _ControlFocusedBackgroundBrushPropertyKey = DependencyProperty.RegisterReadOnly("ControlFocusedBackgroundBrush", typeof(Brush), typeof(Theme), new FrameworkPropertyMetadata());
        public static DependencyProperty ControlFocusedBackgroundBrushProperty = _ControlFocusedBackgroundBrushPropertyKey.DependencyProperty;
        public static DependencyProperty ControlFocusedBorderColorProperty = DependencyProperty.Register("ControlFocusedBorderColor", typeof(Color), typeof(Theme));
        static DependencyPropertyKey _ControlFocusedBorderBrushPropertyKey = DependencyProperty.RegisterReadOnly("ControlFocusedBorderBrush", typeof(Brush), typeof(Theme), new FrameworkPropertyMetadata());
        public static DependencyProperty ControlFocusedBorderBrushProperty = _ControlFocusedBorderBrushPropertyKey.DependencyProperty;
        public static DependencyProperty ControlFocusedForegroundColorProperty = DependencyProperty.Register("ControlFocusedForegroundColor", typeof(Color), typeof(Theme));
        static DependencyPropertyKey _ControlFocusedForegroundBrushPropertyKey = DependencyProperty.RegisterReadOnly("ControlFocusedForegroundBrush", typeof(Brush), typeof(Theme), new FrameworkPropertyMetadata());
        public static DependencyProperty ControlFocusedForegroundBrushProperty = _ControlFocusedForegroundBrushPropertyKey.DependencyProperty;
        public static DependencyProperty ControlFocusedHoverBackgroundColorProperty = DependencyProperty.Register("ControlFocusedHoverBackgroundColor", typeof(Color), typeof(Theme));
        static DependencyPropertyKey _ControlFocusedHoverBackgroundBrushPropertyKey = DependencyProperty.RegisterReadOnly("ControlFocusedHoverBackgroundBrush", typeof(Brush), typeof(Theme), new FrameworkPropertyMetadata());
        public static DependencyProperty ControlFocusedHoverBackgroundBrushProperty = _ControlFocusedHoverBackgroundBrushPropertyKey.DependencyProperty;
        public static DependencyProperty ControlFocusedHoverBorderColorProperty = DependencyProperty.Register("ControlFocusedHoverBorderColor", typeof(Color), typeof(Theme));
        static DependencyPropertyKey _ControlFocusedHoverBorderBrushPropertyKey = DependencyProperty.RegisterReadOnly("ControlFocusedHoverBorderBrush", typeof(Brush), typeof(Theme), new FrameworkPropertyMetadata());
        public static DependencyProperty ControlFocusedHoverBorderBrushProperty = _ControlFocusedHoverBorderBrushPropertyKey.DependencyProperty;
        public static DependencyProperty ControlFocusedHoverForegroundColorProperty = DependencyProperty.Register("ControlFocusedHoverForegroundColor", typeof(Color), typeof(Theme));
        static DependencyPropertyKey _ControlFocusedHoverForegroundBrushPropertyKey = DependencyProperty.RegisterReadOnly("ControlFocusedHoverForegroundBrush", typeof(Brush), typeof(Theme), new FrameworkPropertyMetadata());
        public static DependencyProperty ControlFocusedHoverForegroundBrushProperty = _ControlFocusedHoverForegroundBrushPropertyKey.DependencyProperty;
        public static DependencyProperty ControlForegroundColorProperty = DependencyProperty.Register("ControlForegroundColor", typeof(Color), typeof(Theme));
        static DependencyPropertyKey _ControlForegroundBrushPropertyKey = DependencyProperty.RegisterReadOnly("ControlForegroundBrush", typeof(Brush), typeof(Theme), new FrameworkPropertyMetadata());
        public static DependencyProperty ControlForegroundBrushProperty = _ControlForegroundBrushPropertyKey.DependencyProperty;
        public static DependencyProperty ControlHoverBackgroundColorProperty = DependencyProperty.Register("ControlHoverBackgroundColor", typeof(Color), typeof(Theme));
        static DependencyPropertyKey _ControlHoverBackgroundBrushPropertyKey = DependencyProperty.RegisterReadOnly("ControlHoverBackgroundBrush", typeof(Brush), typeof(Theme), new FrameworkPropertyMetadata());
        public static DependencyProperty ControlHoverBackgroundBrushProperty = _ControlHoverBackgroundBrushPropertyKey.DependencyProperty;
        public static DependencyProperty ControlHoverBorderColorProperty = DependencyProperty.Register("ControlHoverBorderColor", typeof(Color), typeof(Theme));
        static DependencyPropertyKey _ControlHoverBorderBrushPropertyKey = DependencyProperty.RegisterReadOnly("ControlHoverBorderBrush", typeof(Brush), typeof(Theme), new FrameworkPropertyMetadata());
        public static DependencyProperty ControlHoverBorderBrushProperty = _ControlHoverBorderBrushPropertyKey.DependencyProperty;
        public static DependencyProperty ControlHoverForegroundColorProperty = DependencyProperty.Register("ControlHoverForegroundColor", typeof(Color), typeof(Theme));
        static DependencyPropertyKey _ControlHoverForegroundBrushPropertyKey = DependencyProperty.RegisterReadOnly("ControlHoverForegroundBrush", typeof(Brush), typeof(Theme), new FrameworkPropertyMetadata());
        public static DependencyProperty ControlHoverForegroundBrushProperty = _ControlHoverForegroundBrushPropertyKey.DependencyProperty;
        public static DependencyProperty ControlPressedBackgroundColorProperty = DependencyProperty.Register("ControlPressedBackgroundColor", typeof(Color), typeof(Theme));
        static DependencyPropertyKey _ControlPressedBackgroundBrushPropertyKey = DependencyProperty.RegisterReadOnly("ControlPressedBackgroundBrush", typeof(Brush), typeof(Theme), new FrameworkPropertyMetadata());
        public static DependencyProperty ControlPressedBackgroundBrushProperty = _ControlPressedBackgroundBrushPropertyKey.DependencyProperty;
        public static DependencyProperty ControlPressedBorderColorProperty = DependencyProperty.Register("ControlPressedBorderColor", typeof(Color), typeof(Theme));
        static DependencyPropertyKey _ControlPressedBorderBrushPropertyKey = DependencyProperty.RegisterReadOnly("ControlPressedBorderBrush", typeof(Brush), typeof(Theme), new FrameworkPropertyMetadata());
        public static DependencyProperty ControlPressedBorderBrushProperty = _ControlPressedBorderBrushPropertyKey.DependencyProperty;
        public static DependencyProperty ControlPressedForegroundColorProperty = DependencyProperty.Register("ControlPressedForegroundColor", typeof(Color), typeof(Theme));
        static DependencyPropertyKey _ControlPressedForegroundBrushPropertyKey = DependencyProperty.RegisterReadOnly("ControlPressedForegroundBrush", typeof(Brush), typeof(Theme), new FrameworkPropertyMetadata());
        public static DependencyProperty ControlPressedForegroundBrushProperty = _ControlPressedForegroundBrushPropertyKey.DependencyProperty;
        public static DependencyProperty DarkFocusVisualColorProperty = DependencyProperty.Register("DarkFocusVisualColor", typeof(Color), typeof(Theme));
        static DependencyPropertyKey _DarkFocusVisualBrushPropertyKey = DependencyProperty.RegisterReadOnly("DarkFocusVisualBrush", typeof(Brush), typeof(Theme), new FrameworkPropertyMetadata());
        public static DependencyProperty DarkFocusVisualBrushProperty = _DarkFocusVisualBrushPropertyKey.DependencyProperty;
        public static DependencyProperty LightFocusVisualColorProperty = DependencyProperty.Register("LightFocusVisualColor", typeof(Color), typeof(Theme));
        static DependencyPropertyKey _LightFocusVisualBrushPropertyKey = DependencyProperty.RegisterReadOnly("LightFocusVisualBrush", typeof(Brush), typeof(Theme), new FrameworkPropertyMetadata());
        public static DependencyProperty LightFocusVisualBrushProperty = _LightFocusVisualBrushPropertyKey.DependencyProperty;
        public static DependencyProperty DocumentAffinityFadeProperty = DependencyProperty.Register("DocumentAffinityFade", typeof(double), typeof(Theme), new FrameworkPropertyMetadata(0.6d));
        public static DependencyProperty DocumentAffinityLineThicknessProperty = DependencyProperty.Register("DocumentAffinityLineThickness", typeof(double), typeof(Theme), new FrameworkPropertyMetadata(3d));
        public static DependencyProperty DocumentAffinityMarginProperty = DependencyProperty.Register("DocumentAffinityMargin", typeof(Thickness), typeof(Theme), new FrameworkPropertyMetadata(new Thickness(20,7,4,0)));
        public static DependencyProperty EventLaneBarHeightProperty = DependencyProperty.Register("EventLaneBarHeight", typeof(double), typeof(Theme), new FrameworkPropertyMetadata(12d));
        public static DependencyProperty EventLaneFocusedBackgroundColorProperty = DependencyProperty.Register("EventLaneFocusedBackgroundColor", typeof(Color), typeof(Theme));
        static DependencyPropertyKey _EventLaneFocusedBackgroundBrushPropertyKey = DependencyProperty.RegisterReadOnly("EventLaneFocusedBackgroundBrush", typeof(Brush), typeof(Theme), new FrameworkPropertyMetadata());
        public static DependencyProperty EventLaneFocusedBackgroundBrushProperty = _EventLaneFocusedBackgroundBrushPropertyKey.DependencyProperty;
        public static DependencyProperty EventLaneFocusedForegroundColorProperty = DependencyProperty.Register("EventLaneFocusedForegroundColor", typeof(Color), typeof(Theme));
        static DependencyPropertyKey _EventLaneFocusedForegroundBrushPropertyKey = DependencyProperty.RegisterReadOnly("EventLaneFocusedForegroundBrush", typeof(Brush), typeof(Theme), new FrameworkPropertyMetadata());
        public static DependencyProperty EventLaneFocusedForegroundBrushProperty = _EventLaneFocusedForegroundBrushPropertyKey.DependencyProperty;
        public static DependencyProperty EventLaneFocusedSelectionBackgroundColorProperty = DependencyProperty.Register("EventLaneFocusedSelectionBackgroundColor", typeof(Color), typeof(Theme));
        static DependencyPropertyKey _EventLaneFocusedSelectionBackgroundBrushPropertyKey = DependencyProperty.RegisterReadOnly("EventLaneFocusedSelectionBackgroundBrush", typeof(Brush), typeof(Theme), new FrameworkPropertyMetadata());
        public static DependencyProperty EventLaneFocusedSelectionBackgroundBrushProperty = _EventLaneFocusedSelectionBackgroundBrushPropertyKey.DependencyProperty;
        public static DependencyProperty EventLaneFocusedSelectionForegroundColorProperty = DependencyProperty.Register("EventLaneFocusedSelectionForegroundColor", typeof(Color), typeof(Theme));
        static DependencyPropertyKey _EventLaneFocusedSelectionForegroundBrushPropertyKey = DependencyProperty.RegisterReadOnly("EventLaneFocusedSelectionForegroundBrush", typeof(Brush), typeof(Theme), new FrameworkPropertyMetadata());
        public static DependencyProperty EventLaneFocusedSelectionForegroundBrushProperty = _EventLaneFocusedSelectionForegroundBrushPropertyKey.DependencyProperty;
        public static DependencyProperty EventLaneLabelFontFamilyProperty = DependencyProperty.Register("EventLaneLabelFontFamily", typeof(FontFamily), typeof(Theme), new FrameworkPropertyMetadata(new FontFamily("SmallCaption")));
        public static DependencyProperty EventLaneLabelFontSizeProperty = DependencyProperty.Register("EventLaneLabelFontSize", typeof(double), typeof(Theme), new FrameworkPropertyMetadata(10d));
        public static DependencyProperty EventLaneLabelFontWeightProperty = DependencyProperty.Register("EventLaneLabelFontWeight", typeof(FontWeight), typeof(Theme), new FrameworkPropertyMetadata(FontWeights.Normal));
        public static DependencyProperty EventLaneLabelFontStyleProperty = DependencyProperty.Register("EventLaneLabelFontStyle", typeof(FontStyle), typeof(Theme), new FrameworkPropertyMetadata(FontStyles.Normal));
        public static DependencyProperty EventLaneSelectionBackgroundColorProperty = DependencyProperty.Register("EventLaneSelectionBackgroundColor", typeof(Color), typeof(Theme));
        static DependencyPropertyKey _EventLaneSelectionBackgroundBrushPropertyKey = DependencyProperty.RegisterReadOnly("EventLaneSelectionBackgroundBrush", typeof(Brush), typeof(Theme), new FrameworkPropertyMetadata());
        public static DependencyProperty EventLaneSelectionBackgroundBrushProperty = _EventLaneSelectionBackgroundBrushPropertyKey.DependencyProperty;
        public static DependencyProperty EventLaneSelectionForegroundColorProperty = DependencyProperty.Register("EventLaneSelectionForegroundColor", typeof(Color), typeof(Theme));
        static DependencyPropertyKey _EventLaneSelectionForegroundBrushPropertyKey = DependencyProperty.RegisterReadOnly("EventLaneSelectionForegroundBrush", typeof(Brush), typeof(Theme), new FrameworkPropertyMetadata());
        public static DependencyProperty EventLaneSelectionForegroundBrushProperty = _EventLaneSelectionForegroundBrushPropertyKey.DependencyProperty;
        public static DependencyProperty DefaultFontFamilyProperty = DependencyProperty.Register("DefaultFontFamily", typeof(FontFamily), typeof(Theme), new FrameworkPropertyMetadata(new FontFamily("Segoe UI")));
        public static DependencyProperty DefaultFontSizeProperty = DependencyProperty.Register("DefaultFontSize", typeof(double), typeof(Theme), new FrameworkPropertyMetadata(12d));
        public static DependencyProperty DefaultFontWeightProperty = DependencyProperty.Register("DefaultFontWeight", typeof(FontWeight), typeof(Theme), new FrameworkPropertyMetadata(FontWeights.Normal));
        public static DependencyProperty DefaultFontStyleProperty = DependencyProperty.Register("DefaultFontStyle", typeof(FontStyle), typeof(Theme), new FrameworkPropertyMetadata(FontStyles.Normal));
        public static DependencyProperty Heading1FontFamilyProperty = DependencyProperty.Register("Heading1FontFamily", typeof(FontFamily), typeof(Theme), new FrameworkPropertyMetadata(new FontFamily("Segoe UI")));
        public static DependencyProperty Heading1FontSizeProperty = DependencyProperty.Register("Heading1FontSize", typeof(double), typeof(Theme), new FrameworkPropertyMetadata(21d));
        public static DependencyProperty Heading1FontWeightProperty = DependencyProperty.Register("Heading1FontWeight", typeof(FontWeight), typeof(Theme), new FrameworkPropertyMetadata(FontWeights.Normal));
        public static DependencyProperty Heading1FontStyleProperty = DependencyProperty.Register("Heading1FontStyle", typeof(FontStyle), typeof(Theme), new FrameworkPropertyMetadata(FontStyles.Normal));
        public static DependencyProperty Heading1ForegroundColorProperty = DependencyProperty.Register("Heading1ForegroundColor", typeof(Color), typeof(Theme));
        static DependencyPropertyKey _Heading1ForegroundBrushPropertyKey = DependencyProperty.RegisterReadOnly("Heading1ForegroundBrush", typeof(Brush), typeof(Theme), new FrameworkPropertyMetadata());
        public static DependencyProperty Heading1ForegroundBrushProperty = _Heading1ForegroundBrushPropertyKey.DependencyProperty;
        public static DependencyProperty Heading2FontFamilyProperty = DependencyProperty.Register("Heading2FontFamily", typeof(FontFamily), typeof(Theme), new FrameworkPropertyMetadata(new FontFamily("Segoe UI")));
        public static DependencyProperty Heading2FontSizeProperty = DependencyProperty.Register("Heading2FontSize", typeof(double), typeof(Theme), new FrameworkPropertyMetadata(16d));
        public static DependencyProperty Heading2FontWeightProperty = DependencyProperty.Register("Heading2FontWeight", typeof(FontWeight), typeof(Theme), new FrameworkPropertyMetadata(FontWeights.Normal));
        public static DependencyProperty Heading2FontStyleProperty = DependencyProperty.Register("Heading2FontStyle", typeof(FontStyle), typeof(Theme), new FrameworkPropertyMetadata(FontStyles.Normal));
        public static DependencyProperty Heading2ForegroundColorProperty = DependencyProperty.Register("Heading2ForegroundColor", typeof(Color), typeof(Theme));
        static DependencyPropertyKey _Heading2ForegroundBrushPropertyKey = DependencyProperty.RegisterReadOnly("Heading2ForegroundBrush", typeof(Brush), typeof(Theme), new FrameworkPropertyMetadata());
        public static DependencyProperty Heading2ForegroundBrushProperty = _Heading2ForegroundBrushPropertyKey.DependencyProperty;
        public static DependencyProperty GroupBoxContentPaddingProperty = DependencyProperty.Register("GroupBoxContentPadding", typeof(Thickness), typeof(Theme), new FrameworkPropertyMetadata(new Thickness(12,8,12,8)));
        public static DependencyProperty GroupBoxHeaderBackgroundColorProperty = DependencyProperty.Register("GroupBoxHeaderBackgroundColor", typeof(Color), typeof(Theme));
        static DependencyPropertyKey _GroupBoxHeaderBackgroundBrushPropertyKey = DependencyProperty.RegisterReadOnly("GroupBoxHeaderBackgroundBrush", typeof(Brush), typeof(Theme), new FrameworkPropertyMetadata());
        public static DependencyProperty GroupBoxHeaderBackgroundBrushProperty = _GroupBoxHeaderBackgroundBrushPropertyKey.DependencyProperty;
        public static DependencyProperty GroupBoxHeaderForegroundColorProperty = DependencyProperty.Register("GroupBoxHeaderForegroundColor", typeof(Color), typeof(Theme));
        static DependencyPropertyKey _GroupBoxHeaderForegroundBrushPropertyKey = DependencyProperty.RegisterReadOnly("GroupBoxHeaderForegroundBrush", typeof(Brush), typeof(Theme), new FrameworkPropertyMetadata());
        public static DependencyProperty GroupBoxHeaderForegroundBrushProperty = _GroupBoxHeaderForegroundBrushPropertyKey.DependencyProperty;
        public static DependencyProperty GroupBoxHeaderFontFamilyProperty = DependencyProperty.Register("GroupBoxHeaderFontFamily", typeof(FontFamily), typeof(Theme), new FrameworkPropertyMetadata(new FontFamily("Segoe UI")));
        public static DependencyProperty GroupBoxHeaderFontSizeProperty = DependencyProperty.Register("GroupBoxHeaderFontSize", typeof(double), typeof(Theme), new FrameworkPropertyMetadata(11d));
        public static DependencyProperty GroupBoxHeaderFontWeightProperty = DependencyProperty.Register("GroupBoxHeaderFontWeight", typeof(FontWeight), typeof(Theme), new FrameworkPropertyMetadata(FontWeights.Bold));
        public static DependencyProperty GroupBoxHeaderFontStyleProperty = DependencyProperty.Register("GroupBoxHeaderFontStyle", typeof(FontStyle), typeof(Theme), new FrameworkPropertyMetadata(FontStyles.Normal));
        public static DependencyProperty GroupBoxHeaderPaddingProperty = DependencyProperty.Register("GroupBoxHeaderPadding", typeof(Thickness), typeof(Theme), new FrameworkPropertyMetadata(new Thickness(8,2,8,2)));
        public static DependencyProperty CloseFileButtonForegroundColorProperty = DependencyProperty.Register("CloseFileButtonForegroundColor", typeof(Color), typeof(Theme));
        static DependencyPropertyKey _CloseFileButtonForegroundBrushPropertyKey = DependencyProperty.RegisterReadOnly("CloseFileButtonForegroundBrush", typeof(Brush), typeof(Theme), new FrameworkPropertyMetadata());
        public static DependencyProperty CloseFileButtonForegroundBrushProperty = _CloseFileButtonForegroundBrushPropertyKey.DependencyProperty;
        public static DependencyProperty CloseFileButtonHoverForegroundColorProperty = DependencyProperty.Register("CloseFileButtonHoverForegroundColor", typeof(Color), typeof(Theme));
        static DependencyPropertyKey _CloseFileButtonHoverForegroundBrushPropertyKey = DependencyProperty.RegisterReadOnly("CloseFileButtonHoverForegroundBrush", typeof(Brush), typeof(Theme), new FrameworkPropertyMetadata());
        public static DependencyProperty CloseFileButtonHoverForegroundBrushProperty = _CloseFileButtonHoverForegroundBrushPropertyKey.DependencyProperty;
        public static DependencyProperty FileButtonBackgroundColorProperty = DependencyProperty.Register("FileButtonBackgroundColor", typeof(Color), typeof(Theme));
        static DependencyPropertyKey _FileButtonBackgroundBrushPropertyKey = DependencyProperty.RegisterReadOnly("FileButtonBackgroundBrush", typeof(Brush), typeof(Theme), new FrameworkPropertyMetadata());
        public static DependencyProperty FileButtonBackgroundBrushProperty = _FileButtonBackgroundBrushPropertyKey.DependencyProperty;
        public static DependencyProperty FileButtonForegroundColorProperty = DependencyProperty.Register("FileButtonForegroundColor", typeof(Color), typeof(Theme));
        static DependencyPropertyKey _FileButtonForegroundBrushPropertyKey = DependencyProperty.RegisterReadOnly("FileButtonForegroundBrush", typeof(Brush), typeof(Theme), new FrameworkPropertyMetadata());
        public static DependencyProperty FileButtonForegroundBrushProperty = _FileButtonForegroundBrushPropertyKey.DependencyProperty;
        public static DependencyProperty FileButtonHoverBackgroundColorProperty = DependencyProperty.Register("FileButtonHoverBackgroundColor", typeof(Color), typeof(Theme));
        static DependencyPropertyKey _FileButtonHoverBackgroundBrushPropertyKey = DependencyProperty.RegisterReadOnly("FileButtonHoverBackgroundBrush", typeof(Brush), typeof(Theme), new FrameworkPropertyMetadata());
        public static DependencyProperty FileButtonHoverBackgroundBrushProperty = _FileButtonHoverBackgroundBrushPropertyKey.DependencyProperty;
        public static DependencyProperty FileButtonHoverForegroundColorProperty = DependencyProperty.Register("FileButtonHoverForegroundColor", typeof(Color), typeof(Theme));
        static DependencyPropertyKey _FileButtonHoverForegroundBrushPropertyKey = DependencyProperty.RegisterReadOnly("FileButtonHoverForegroundBrush", typeof(Brush), typeof(Theme), new FrameworkPropertyMetadata());
        public static DependencyProperty FileButtonHoverForegroundBrushProperty = _FileButtonHoverForegroundBrushPropertyKey.DependencyProperty;
        public static DependencyProperty FileTabHeaderFontFamilyProperty = DependencyProperty.Register("FileTabHeaderFontFamily", typeof(FontFamily), typeof(Theme), new FrameworkPropertyMetadata(new FontFamily("Segoe UI")));
        public static DependencyProperty FileTabHeaderFontSizeProperty = DependencyProperty.Register("FileTabHeaderFontSize", typeof(double), typeof(Theme), new FrameworkPropertyMetadata(38d));
        public static DependencyProperty FileTabHeaderFontWeightProperty = DependencyProperty.Register("FileTabHeaderFontWeight", typeof(FontWeight), typeof(Theme), new FrameworkPropertyMetadata(FontWeights.Light));
        public static DependencyProperty FileTabHeaderFontStyleProperty = DependencyProperty.Register("FileTabHeaderFontStyle", typeof(FontStyle), typeof(Theme), new FrameworkPropertyMetadata(FontStyles.Normal));
        public static DependencyProperty FileTabItemBackgroundColorProperty = DependencyProperty.Register("FileTabItemBackgroundColor", typeof(Color), typeof(Theme));
        static DependencyPropertyKey _FileTabItemBackgroundBrushPropertyKey = DependencyProperty.RegisterReadOnly("FileTabItemBackgroundBrush", typeof(Brush), typeof(Theme), new FrameworkPropertyMetadata());
        public static DependencyProperty FileTabItemBackgroundBrushProperty = _FileTabItemBackgroundBrushPropertyKey.DependencyProperty;
        public static DependencyProperty FileTabItemDisabledBackgroundColorProperty = DependencyProperty.Register("FileTabItemDisabledBackgroundColor", typeof(Color), typeof(Theme));
        static DependencyPropertyKey _FileTabItemDisabledBackgroundBrushPropertyKey = DependencyProperty.RegisterReadOnly("FileTabItemDisabledBackgroundBrush", typeof(Brush), typeof(Theme), new FrameworkPropertyMetadata());
        public static DependencyProperty FileTabItemDisabledBackgroundBrushProperty = _FileTabItemDisabledBackgroundBrushPropertyKey.DependencyProperty;
        public static DependencyProperty FileTabItemDisabledForegroundColorProperty = DependencyProperty.Register("FileTabItemDisabledForegroundColor", typeof(Color), typeof(Theme));
        static DependencyPropertyKey _FileTabItemDisabledForegroundBrushPropertyKey = DependencyProperty.RegisterReadOnly("FileTabItemDisabledForegroundBrush", typeof(Brush), typeof(Theme), new FrameworkPropertyMetadata());
        public static DependencyProperty FileTabItemDisabledForegroundBrushProperty = _FileTabItemDisabledForegroundBrushPropertyKey.DependencyProperty;
        public static DependencyProperty FileTabItemForegroundColorProperty = DependencyProperty.Register("FileTabItemForegroundColor", typeof(Color), typeof(Theme));
        static DependencyPropertyKey _FileTabItemForegroundBrushPropertyKey = DependencyProperty.RegisterReadOnly("FileTabItemForegroundBrush", typeof(Brush), typeof(Theme), new FrameworkPropertyMetadata());
        public static DependencyProperty FileTabItemForegroundBrushProperty = _FileTabItemForegroundBrushPropertyKey.DependencyProperty;
        public static DependencyProperty FileTabItemHoverBackgroundColorProperty = DependencyProperty.Register("FileTabItemHoverBackgroundColor", typeof(Color), typeof(Theme));
        static DependencyPropertyKey _FileTabItemHoverBackgroundBrushPropertyKey = DependencyProperty.RegisterReadOnly("FileTabItemHoverBackgroundBrush", typeof(Brush), typeof(Theme), new FrameworkPropertyMetadata());
        public static DependencyProperty FileTabItemHoverBackgroundBrushProperty = _FileTabItemHoverBackgroundBrushPropertyKey.DependencyProperty;
        public static DependencyProperty FileTabItemHoverForegroundColorProperty = DependencyProperty.Register("FileTabItemHoverForegroundColor", typeof(Color), typeof(Theme));
        static DependencyPropertyKey _FileTabItemHoverForegroundBrushPropertyKey = DependencyProperty.RegisterReadOnly("FileTabItemHoverForegroundBrush", typeof(Brush), typeof(Theme), new FrameworkPropertyMetadata());
        public static DependencyProperty FileTabItemHoverForegroundBrushProperty = _FileTabItemHoverForegroundBrushPropertyKey.DependencyProperty;
        public static DependencyProperty FileTabItemSelectedBackgroundColorProperty = DependencyProperty.Register("FileTabItemSelectedBackgroundColor", typeof(Color), typeof(Theme));
        static DependencyPropertyKey _FileTabItemSelectedBackgroundBrushPropertyKey = DependencyProperty.RegisterReadOnly("FileTabItemSelectedBackgroundBrush", typeof(Brush), typeof(Theme), new FrameworkPropertyMetadata());
        public static DependencyProperty FileTabItemSelectedBackgroundBrushProperty = _FileTabItemSelectedBackgroundBrushPropertyKey.DependencyProperty;
        public static DependencyProperty FileTabItemSelectedForegroundColorProperty = DependencyProperty.Register("FileTabItemSelectedForegroundColor", typeof(Color), typeof(Theme));
        static DependencyPropertyKey _FileTabItemSelectedForegroundBrushPropertyKey = DependencyProperty.RegisterReadOnly("FileTabItemSelectedForegroundBrush", typeof(Brush), typeof(Theme), new FrameworkPropertyMetadata());
        public static DependencyProperty FileTabItemSelectedForegroundBrushProperty = _FileTabItemSelectedForegroundBrushPropertyKey.DependencyProperty;
        public static DependencyProperty LayoutTabControlBackgroundColorProperty = DependencyProperty.Register("LayoutTabControlBackgroundColor", typeof(Color), typeof(Theme));
        static DependencyPropertyKey _LayoutTabControlBackgroundBrushPropertyKey = DependencyProperty.RegisterReadOnly("LayoutTabControlBackgroundBrush", typeof(Brush), typeof(Theme), new FrameworkPropertyMetadata());
        public static DependencyProperty LayoutTabControlBackgroundBrushProperty = _LayoutTabControlBackgroundBrushPropertyKey.DependencyProperty;
        public static DependencyProperty LayoutTabItemBackgroundColorProperty = DependencyProperty.Register("LayoutTabItemBackgroundColor", typeof(Color), typeof(Theme));
        static DependencyPropertyKey _LayoutTabItemBackgroundBrushPropertyKey = DependencyProperty.RegisterReadOnly("LayoutTabItemBackgroundBrush", typeof(Brush), typeof(Theme), new FrameworkPropertyMetadata());
        public static DependencyProperty LayoutTabItemBackgroundBrushProperty = _LayoutTabItemBackgroundBrushPropertyKey.DependencyProperty;
        public static DependencyProperty LayoutTabItemBorderColorProperty = DependencyProperty.Register("LayoutTabItemBorderColor", typeof(Color), typeof(Theme));
        static DependencyPropertyKey _LayoutTabItemBorderBrushPropertyKey = DependencyProperty.RegisterReadOnly("LayoutTabItemBorderBrush", typeof(Brush), typeof(Theme), new FrameworkPropertyMetadata());
        public static DependencyProperty LayoutTabItemBorderBrushProperty = _LayoutTabItemBorderBrushPropertyKey.DependencyProperty;
        public static DependencyProperty LayoutTabItemForegroundColorProperty = DependencyProperty.Register("LayoutTabItemForegroundColor", typeof(Color), typeof(Theme));
        static DependencyPropertyKey _LayoutTabItemForegroundBrushPropertyKey = DependencyProperty.RegisterReadOnly("LayoutTabItemForegroundBrush", typeof(Brush), typeof(Theme), new FrameworkPropertyMetadata());
        public static DependencyProperty LayoutTabItemForegroundBrushProperty = _LayoutTabItemForegroundBrushPropertyKey.DependencyProperty;
        public static DependencyProperty LayoutTabItemHoverBackgroundColorProperty = DependencyProperty.Register("LayoutTabItemHoverBackgroundColor", typeof(Color), typeof(Theme));
        static DependencyPropertyKey _LayoutTabItemHoverBackgroundBrushPropertyKey = DependencyProperty.RegisterReadOnly("LayoutTabItemHoverBackgroundBrush", typeof(Brush), typeof(Theme), new FrameworkPropertyMetadata());
        public static DependencyProperty LayoutTabItemHoverBackgroundBrushProperty = _LayoutTabItemHoverBackgroundBrushPropertyKey.DependencyProperty;
        public static DependencyProperty LayoutTabItemHoverForegroundColorProperty = DependencyProperty.Register("LayoutTabItemHoverForegroundColor", typeof(Color), typeof(Theme));
        static DependencyPropertyKey _LayoutTabItemHoverForegroundBrushPropertyKey = DependencyProperty.RegisterReadOnly("LayoutTabItemHoverForegroundBrush", typeof(Brush), typeof(Theme), new FrameworkPropertyMetadata());
        public static DependencyProperty LayoutTabItemHoverForegroundBrushProperty = _LayoutTabItemHoverForegroundBrushPropertyKey.DependencyProperty;
        public static DependencyProperty LayoutTabItemSelectedBackgroundColorProperty = DependencyProperty.Register("LayoutTabItemSelectedBackgroundColor", typeof(Color), typeof(Theme));
        static DependencyPropertyKey _LayoutTabItemSelectedBackgroundBrushPropertyKey = DependencyProperty.RegisterReadOnly("LayoutTabItemSelectedBackgroundBrush", typeof(Brush), typeof(Theme), new FrameworkPropertyMetadata());
        public static DependencyProperty LayoutTabItemSelectedBackgroundBrushProperty = _LayoutTabItemSelectedBackgroundBrushPropertyKey.DependencyProperty;
        public static DependencyProperty LayoutTabItemSelectedForegroundColorProperty = DependencyProperty.Register("LayoutTabItemSelectedForegroundColor", typeof(Color), typeof(Theme));
        static DependencyPropertyKey _LayoutTabItemSelectedForegroundBrushPropertyKey = DependencyProperty.RegisterReadOnly("LayoutTabItemSelectedForegroundBrush", typeof(Brush), typeof(Theme), new FrameworkPropertyMetadata());
        public static DependencyProperty LayoutTabItemSelectedForegroundBrushProperty = _LayoutTabItemSelectedForegroundBrushPropertyKey.DependencyProperty;
        public static DependencyProperty OpenTabBorderColorProperty = DependencyProperty.Register("OpenTabBorderColor", typeof(Color), typeof(Theme));
        static DependencyPropertyKey _OpenTabBorderBrushPropertyKey = DependencyProperty.RegisterReadOnly("OpenTabBorderBrush", typeof(Brush), typeof(Theme), new FrameworkPropertyMetadata());
        public static DependencyProperty OpenTabBorderBrushProperty = _OpenTabBorderBrushPropertyKey.DependencyProperty;
        public static DependencyProperty OpenTabItemBackgroundColorProperty = DependencyProperty.Register("OpenTabItemBackgroundColor", typeof(Color), typeof(Theme));
        static DependencyPropertyKey _OpenTabItemBackgroundBrushPropertyKey = DependencyProperty.RegisterReadOnly("OpenTabItemBackgroundBrush", typeof(Brush), typeof(Theme), new FrameworkPropertyMetadata());
        public static DependencyProperty OpenTabItemBackgroundBrushProperty = _OpenTabItemBackgroundBrushPropertyKey.DependencyProperty;
        public static DependencyProperty OpenTabItemForegroundColorProperty = DependencyProperty.Register("OpenTabItemForegroundColor", typeof(Color), typeof(Theme));
        static DependencyPropertyKey _OpenTabItemForegroundBrushPropertyKey = DependencyProperty.RegisterReadOnly("OpenTabItemForegroundBrush", typeof(Brush), typeof(Theme), new FrameworkPropertyMetadata());
        public static DependencyProperty OpenTabItemForegroundBrushProperty = _OpenTabItemForegroundBrushPropertyKey.DependencyProperty;
        public static DependencyProperty OpenTabItemHoverBackgroundColorProperty = DependencyProperty.Register("OpenTabItemHoverBackgroundColor", typeof(Color), typeof(Theme));
        static DependencyPropertyKey _OpenTabItemHoverBackgroundBrushPropertyKey = DependencyProperty.RegisterReadOnly("OpenTabItemHoverBackgroundBrush", typeof(Brush), typeof(Theme), new FrameworkPropertyMetadata());
        public static DependencyProperty OpenTabItemHoverBackgroundBrushProperty = _OpenTabItemHoverBackgroundBrushPropertyKey.DependencyProperty;
        public static DependencyProperty OpenTabItemHoverForegroundColorProperty = DependencyProperty.Register("OpenTabItemHoverForegroundColor", typeof(Color), typeof(Theme));
        static DependencyPropertyKey _OpenTabItemHoverForegroundBrushPropertyKey = DependencyProperty.RegisterReadOnly("OpenTabItemHoverForegroundBrush", typeof(Brush), typeof(Theme), new FrameworkPropertyMetadata());
        public static DependencyProperty OpenTabItemHoverForegroundBrushProperty = _OpenTabItemHoverForegroundBrushPropertyKey.DependencyProperty;
        public static DependencyProperty OpenTabItemSelectedBackgroundColorProperty = DependencyProperty.Register("OpenTabItemSelectedBackgroundColor", typeof(Color), typeof(Theme));
        static DependencyPropertyKey _OpenTabItemSelectedBackgroundBrushPropertyKey = DependencyProperty.RegisterReadOnly("OpenTabItemSelectedBackgroundBrush", typeof(Brush), typeof(Theme), new FrameworkPropertyMetadata());
        public static DependencyProperty OpenTabItemSelectedBackgroundBrushProperty = _OpenTabItemSelectedBackgroundBrushPropertyKey.DependencyProperty;
        public static DependencyProperty OpenTabItemSelectedForegroundColorProperty = DependencyProperty.Register("OpenTabItemSelectedForegroundColor", typeof(Color), typeof(Theme));
        static DependencyPropertyKey _OpenTabItemSelectedForegroundBrushPropertyKey = DependencyProperty.RegisterReadOnly("OpenTabItemSelectedForegroundBrush", typeof(Brush), typeof(Theme), new FrameworkPropertyMetadata());
        public static DependencyProperty OpenTabItemSelectedForegroundBrushProperty = _OpenTabItemSelectedForegroundBrushPropertyKey.DependencyProperty;
        public static DependencyProperty ListBoxItemFocusedSelectedBackgroundColorProperty = DependencyProperty.Register("ListBoxItemFocusedSelectedBackgroundColor", typeof(Color), typeof(Theme));
        static DependencyPropertyKey _ListBoxItemFocusedSelectedBackgroundBrushPropertyKey = DependencyProperty.RegisterReadOnly("ListBoxItemFocusedSelectedBackgroundBrush", typeof(Brush), typeof(Theme), new FrameworkPropertyMetadata());
        public static DependencyProperty ListBoxItemFocusedSelectedBackgroundBrushProperty = _ListBoxItemFocusedSelectedBackgroundBrushPropertyKey.DependencyProperty;
        public static DependencyProperty ListBoxItemFocusedSelectedForegroundColorProperty = DependencyProperty.Register("ListBoxItemFocusedSelectedForegroundColor", typeof(Color), typeof(Theme));
        static DependencyPropertyKey _ListBoxItemFocusedSelectedForegroundBrushPropertyKey = DependencyProperty.RegisterReadOnly("ListBoxItemFocusedSelectedForegroundBrush", typeof(Brush), typeof(Theme), new FrameworkPropertyMetadata());
        public static DependencyProperty ListBoxItemFocusedSelectedForegroundBrushProperty = _ListBoxItemFocusedSelectedForegroundBrushPropertyKey.DependencyProperty;
        public static DependencyProperty ListBoxItemMarginProperty = DependencyProperty.Register("ListBoxItemMargin", typeof(Thickness), typeof(Theme), new FrameworkPropertyMetadata(new Thickness(2)));
        public static DependencyProperty ListBoxItemSelectedBackgroundColorProperty = DependencyProperty.Register("ListBoxItemSelectedBackgroundColor", typeof(Color), typeof(Theme));
        static DependencyPropertyKey _ListBoxItemSelectedBackgroundBrushPropertyKey = DependencyProperty.RegisterReadOnly("ListBoxItemSelectedBackgroundBrush", typeof(Brush), typeof(Theme), new FrameworkPropertyMetadata());
        public static DependencyProperty ListBoxItemSelectedBackgroundBrushProperty = _ListBoxItemSelectedBackgroundBrushPropertyKey.DependencyProperty;
        public static DependencyProperty ListBoxItemSelectedForegroundColorProperty = DependencyProperty.Register("ListBoxItemSelectedForegroundColor", typeof(Color), typeof(Theme));
        static DependencyPropertyKey _ListBoxItemSelectedForegroundBrushPropertyKey = DependencyProperty.RegisterReadOnly("ListBoxItemSelectedForegroundBrush", typeof(Brush), typeof(Theme), new FrameworkPropertyMetadata());
        public static DependencyProperty ListBoxItemSelectedForegroundBrushProperty = _ListBoxItemSelectedForegroundBrushPropertyKey.DependencyProperty;
        public static DependencyProperty WindowBackgroundColorProperty = DependencyProperty.Register("WindowBackgroundColor", typeof(Color), typeof(Theme));
        static DependencyPropertyKey _WindowBackgroundBrushPropertyKey = DependencyProperty.RegisterReadOnly("WindowBackgroundBrush", typeof(Brush), typeof(Theme), new FrameworkPropertyMetadata());
        public static DependencyProperty WindowBackgroundBrushProperty = _WindowBackgroundBrushPropertyKey.DependencyProperty;
        public static DependencyProperty WindowTitleForegroundColorProperty = DependencyProperty.Register("WindowTitleForegroundColor", typeof(Color), typeof(Theme));
        static DependencyPropertyKey _WindowTitleForegroundBrushPropertyKey = DependencyProperty.RegisterReadOnly("WindowTitleForegroundBrush", typeof(Brush), typeof(Theme), new FrameworkPropertyMetadata());
        public static DependencyProperty WindowTitleForegroundBrushProperty = _WindowTitleForegroundBrushPropertyKey.DependencyProperty;
        public static DependencyProperty WindowTitleInactiveForegroundColorProperty = DependencyProperty.Register("WindowTitleInactiveForegroundColor", typeof(Color), typeof(Theme));
        static DependencyPropertyKey _WindowTitleInactiveForegroundBrushPropertyKey = DependencyProperty.RegisterReadOnly("WindowTitleInactiveForegroundBrush", typeof(Brush), typeof(Theme), new FrameworkPropertyMetadata());
        public static DependencyProperty WindowTitleInactiveForegroundBrushProperty = _WindowTitleInactiveForegroundBrushPropertyKey.DependencyProperty;
        public static DependencyProperty WindowTitleFontFamilyProperty = DependencyProperty.Register("WindowTitleFontFamily", typeof(FontFamily), typeof(Theme), new FrameworkPropertyMetadata(new FontFamily("Segoe UI")));
        public static DependencyProperty WindowTitleFontSizeProperty = DependencyProperty.Register("WindowTitleFontSize", typeof(double), typeof(Theme), new FrameworkPropertyMetadata(12d));
        public static DependencyProperty WindowTitleFontWeightProperty = DependencyProperty.Register("WindowTitleFontWeight", typeof(FontWeight), typeof(Theme), new FrameworkPropertyMetadata(FontWeights.Normal));
        public static DependencyProperty WindowTitleFontStyleProperty = DependencyProperty.Register("WindowTitleFontStyle", typeof(FontStyle), typeof(Theme), new FrameworkPropertyMetadata(FontStyles.Normal));
        public static DependencyProperty ScrollBarThumbColorProperty = DependencyProperty.Register("ScrollBarThumbColor", typeof(Color), typeof(Theme));
        static DependencyPropertyKey _ScrollBarThumbBrushPropertyKey = DependencyProperty.RegisterReadOnly("ScrollBarThumbBrush", typeof(Brush), typeof(Theme), new FrameworkPropertyMetadata());
        public static DependencyProperty ScrollBarThumbBrushProperty = _ScrollBarThumbBrushPropertyKey.DependencyProperty;
        public static DependencyProperty ScrollBarThumbHoverColorProperty = DependencyProperty.Register("ScrollBarThumbHoverColor", typeof(Color), typeof(Theme));
        static DependencyPropertyKey _ScrollBarThumbHoverBrushPropertyKey = DependencyProperty.RegisterReadOnly("ScrollBarThumbHoverBrush", typeof(Brush), typeof(Theme), new FrameworkPropertyMetadata());
        public static DependencyProperty ScrollBarThumbHoverBrushProperty = _ScrollBarThumbHoverBrushPropertyKey.DependencyProperty;
        public static DependencyProperty ScrollBarThumbPressedColorProperty = DependencyProperty.Register("ScrollBarThumbPressedColor", typeof(Color), typeof(Theme));
        static DependencyPropertyKey _ScrollBarThumbPressedBrushPropertyKey = DependencyProperty.RegisterReadOnly("ScrollBarThumbPressedBrush", typeof(Brush), typeof(Theme), new FrameworkPropertyMetadata());
        public static DependencyProperty ScrollBarThumbPressedBrushProperty = _ScrollBarThumbPressedBrushPropertyKey.DependencyProperty;
        public static DependencyProperty TabControlActiveBackgroundColorProperty = DependencyProperty.Register("TabControlActiveBackgroundColor", typeof(Color), typeof(Theme));
        static DependencyPropertyKey _TabControlActiveBackgroundBrushPropertyKey = DependencyProperty.RegisterReadOnly("TabControlActiveBackgroundBrush", typeof(Brush), typeof(Theme), new FrameworkPropertyMetadata());
        public static DependencyProperty TabControlActiveBackgroundBrushProperty = _TabControlActiveBackgroundBrushPropertyKey.DependencyProperty;
        public static DependencyProperty TabControlActiveBorderColorProperty = DependencyProperty.Register("TabControlActiveBorderColor", typeof(Color), typeof(Theme));
        static DependencyPropertyKey _TabControlActiveBorderBrushPropertyKey = DependencyProperty.RegisterReadOnly("TabControlActiveBorderBrush", typeof(Brush), typeof(Theme), new FrameworkPropertyMetadata());
        public static DependencyProperty TabControlActiveBorderBrushProperty = _TabControlActiveBorderBrushPropertyKey.DependencyProperty;
        public static DependencyProperty TabControlBackgroundColorProperty = DependencyProperty.Register("TabControlBackgroundColor", typeof(Color), typeof(Theme));
        static DependencyPropertyKey _TabControlBackgroundBrushPropertyKey = DependencyProperty.RegisterReadOnly("TabControlBackgroundBrush", typeof(Brush), typeof(Theme), new FrameworkPropertyMetadata());
        public static DependencyProperty TabControlBackgroundBrushProperty = _TabControlBackgroundBrushPropertyKey.DependencyProperty;
        public static DependencyProperty TabControlBorderColorProperty = DependencyProperty.Register("TabControlBorderColor", typeof(Color), typeof(Theme));
        static DependencyPropertyKey _TabControlBorderBrushPropertyKey = DependencyProperty.RegisterReadOnly("TabControlBorderBrush", typeof(Brush), typeof(Theme), new FrameworkPropertyMetadata());
        public static DependencyProperty TabControlBorderBrushProperty = _TabControlBorderBrushPropertyKey.DependencyProperty;
        public static DependencyProperty TabControlBorderThicknessProperty = DependencyProperty.Register("TabControlBorderThickness", typeof(Thickness), typeof(Theme), new FrameworkPropertyMetadata(new Thickness(2)));
        public static DependencyProperty TabItemActiveBackgroundColorProperty = DependencyProperty.Register("TabItemActiveBackgroundColor", typeof(Color), typeof(Theme));
        static DependencyPropertyKey _TabItemActiveBackgroundBrushPropertyKey = DependencyProperty.RegisterReadOnly("TabItemActiveBackgroundBrush", typeof(Brush), typeof(Theme), new FrameworkPropertyMetadata());
        public static DependencyProperty TabItemActiveBackgroundBrushProperty = _TabItemActiveBackgroundBrushPropertyKey.DependencyProperty;
        public static DependencyProperty TabItemActiveBorderColorProperty = DependencyProperty.Register("TabItemActiveBorderColor", typeof(Color), typeof(Theme));
        static DependencyPropertyKey _TabItemActiveBorderBrushPropertyKey = DependencyProperty.RegisterReadOnly("TabItemActiveBorderBrush", typeof(Brush), typeof(Theme), new FrameworkPropertyMetadata());
        public static DependencyProperty TabItemActiveBorderBrushProperty = _TabItemActiveBorderBrushPropertyKey.DependencyProperty;
        public static DependencyProperty TabItemActiveForegroundColorProperty = DependencyProperty.Register("TabItemActiveForegroundColor", typeof(Color), typeof(Theme));
        static DependencyPropertyKey _TabItemActiveForegroundBrushPropertyKey = DependencyProperty.RegisterReadOnly("TabItemActiveForegroundBrush", typeof(Brush), typeof(Theme), new FrameworkPropertyMetadata());
        public static DependencyProperty TabItemActiveForegroundBrushProperty = _TabItemActiveForegroundBrushPropertyKey.DependencyProperty;
        public static DependencyProperty TabItemActiveSelectedBackgroundColorProperty = DependencyProperty.Register("TabItemActiveSelectedBackgroundColor", typeof(Color), typeof(Theme));
        static DependencyPropertyKey _TabItemActiveSelectedBackgroundBrushPropertyKey = DependencyProperty.RegisterReadOnly("TabItemActiveSelectedBackgroundBrush", typeof(Brush), typeof(Theme), new FrameworkPropertyMetadata());
        public static DependencyProperty TabItemActiveSelectedBackgroundBrushProperty = _TabItemActiveSelectedBackgroundBrushPropertyKey.DependencyProperty;
        public static DependencyProperty TabItemActiveSelectedBorderColorProperty = DependencyProperty.Register("TabItemActiveSelectedBorderColor", typeof(Color), typeof(Theme));
        static DependencyPropertyKey _TabItemActiveSelectedBorderBrushPropertyKey = DependencyProperty.RegisterReadOnly("TabItemActiveSelectedBorderBrush", typeof(Brush), typeof(Theme), new FrameworkPropertyMetadata());
        public static DependencyProperty TabItemActiveSelectedBorderBrushProperty = _TabItemActiveSelectedBorderBrushPropertyKey.DependencyProperty;
        public static DependencyProperty TabItemActiveSelectedForegroundColorProperty = DependencyProperty.Register("TabItemActiveSelectedForegroundColor", typeof(Color), typeof(Theme));
        static DependencyPropertyKey _TabItemActiveSelectedForegroundBrushPropertyKey = DependencyProperty.RegisterReadOnly("TabItemActiveSelectedForegroundBrush", typeof(Brush), typeof(Theme), new FrameworkPropertyMetadata());
        public static DependencyProperty TabItemActiveSelectedForegroundBrushProperty = _TabItemActiveSelectedForegroundBrushPropertyKey.DependencyProperty;
        public static DependencyProperty TabItemBackgroundColorProperty = DependencyProperty.Register("TabItemBackgroundColor", typeof(Color), typeof(Theme));
        static DependencyPropertyKey _TabItemBackgroundBrushPropertyKey = DependencyProperty.RegisterReadOnly("TabItemBackgroundBrush", typeof(Brush), typeof(Theme), new FrameworkPropertyMetadata());
        public static DependencyProperty TabItemBackgroundBrushProperty = _TabItemBackgroundBrushPropertyKey.DependencyProperty;
        public static DependencyProperty TabItemBorderColorProperty = DependencyProperty.Register("TabItemBorderColor", typeof(Color), typeof(Theme));
        static DependencyPropertyKey _TabItemBorderBrushPropertyKey = DependencyProperty.RegisterReadOnly("TabItemBorderBrush", typeof(Brush), typeof(Theme), new FrameworkPropertyMetadata());
        public static DependencyProperty TabItemBorderBrushProperty = _TabItemBorderBrushPropertyKey.DependencyProperty;
        public static DependencyProperty TabItemBorderPaddingProperty = DependencyProperty.Register("TabItemBorderPadding", typeof(Thickness), typeof(Theme), new FrameworkPropertyMetadata(new Thickness(12,2,12,2)));
        public static DependencyProperty TabItemBorderMarginProperty = DependencyProperty.Register("TabItemBorderMargin", typeof(Thickness), typeof(Theme), new FrameworkPropertyMetadata(new Thickness(2)));
        public static DependencyProperty TabItemBorderThicknessProperty = DependencyProperty.Register("TabItemBorderThickness", typeof(Thickness), typeof(Theme), new FrameworkPropertyMetadata(new Thickness(1)));
        public static DependencyProperty TabItemForegroundColorProperty = DependencyProperty.Register("TabItemForegroundColor", typeof(Color), typeof(Theme));
        static DependencyPropertyKey _TabItemForegroundBrushPropertyKey = DependencyProperty.RegisterReadOnly("TabItemForegroundBrush", typeof(Brush), typeof(Theme), new FrameworkPropertyMetadata());
        public static DependencyProperty TabItemForegroundBrushProperty = _TabItemForegroundBrushPropertyKey.DependencyProperty;
        public static DependencyProperty TabItemFontFamilyProperty = DependencyProperty.Register("TabItemFontFamily", typeof(FontFamily), typeof(Theme), new FrameworkPropertyMetadata(new FontFamily("Segoe UI")));
        public static DependencyProperty TabItemFontSizeProperty = DependencyProperty.Register("TabItemFontSize", typeof(double), typeof(Theme), new FrameworkPropertyMetadata(14d));
        public static DependencyProperty TabItemFontWeightProperty = DependencyProperty.Register("TabItemFontWeight", typeof(FontWeight), typeof(Theme), new FrameworkPropertyMetadata(FontWeights.Normal));
        public static DependencyProperty TabItemFontStyleProperty = DependencyProperty.Register("TabItemFontStyle", typeof(FontStyle), typeof(Theme), new FrameworkPropertyMetadata(FontStyles.Normal));
        public static DependencyProperty TabItemHeaderMarginProperty = DependencyProperty.Register("TabItemHeaderMargin", typeof(Thickness), typeof(Theme), new FrameworkPropertyMetadata(new Thickness(4,0,10,0)));
        public static DependencyProperty TabItemHoverBackgroundColorProperty = DependencyProperty.Register("TabItemHoverBackgroundColor", typeof(Color), typeof(Theme));
        static DependencyPropertyKey _TabItemHoverBackgroundBrushPropertyKey = DependencyProperty.RegisterReadOnly("TabItemHoverBackgroundBrush", typeof(Brush), typeof(Theme), new FrameworkPropertyMetadata());
        public static DependencyProperty TabItemHoverBackgroundBrushProperty = _TabItemHoverBackgroundBrushPropertyKey.DependencyProperty;
        public static DependencyProperty TabItemHoverBorderColorProperty = DependencyProperty.Register("TabItemHoverBorderColor", typeof(Color), typeof(Theme));
        static DependencyPropertyKey _TabItemHoverBorderBrushPropertyKey = DependencyProperty.RegisterReadOnly("TabItemHoverBorderBrush", typeof(Brush), typeof(Theme), new FrameworkPropertyMetadata());
        public static DependencyProperty TabItemHoverBorderBrushProperty = _TabItemHoverBorderBrushPropertyKey.DependencyProperty;
        public static DependencyProperty TabItemHoverForegroundColorProperty = DependencyProperty.Register("TabItemHoverForegroundColor", typeof(Color), typeof(Theme));
        static DependencyPropertyKey _TabItemHoverForegroundBrushPropertyKey = DependencyProperty.RegisterReadOnly("TabItemHoverForegroundBrush", typeof(Brush), typeof(Theme), new FrameworkPropertyMetadata());
        public static DependencyProperty TabItemHoverForegroundBrushProperty = _TabItemHoverForegroundBrushPropertyKey.DependencyProperty;
        public static DependencyProperty TabItemSelectedBackgroundColorProperty = DependencyProperty.Register("TabItemSelectedBackgroundColor", typeof(Color), typeof(Theme));
        static DependencyPropertyKey _TabItemSelectedBackgroundBrushPropertyKey = DependencyProperty.RegisterReadOnly("TabItemSelectedBackgroundBrush", typeof(Brush), typeof(Theme), new FrameworkPropertyMetadata());
        public static DependencyProperty TabItemSelectedBackgroundBrushProperty = _TabItemSelectedBackgroundBrushPropertyKey.DependencyProperty;
        public static DependencyProperty TabItemSelectedBorderColorProperty = DependencyProperty.Register("TabItemSelectedBorderColor", typeof(Color), typeof(Theme));
        static DependencyPropertyKey _TabItemSelectedBorderBrushPropertyKey = DependencyProperty.RegisterReadOnly("TabItemSelectedBorderBrush", typeof(Brush), typeof(Theme), new FrameworkPropertyMetadata());
        public static DependencyProperty TabItemSelectedBorderBrushProperty = _TabItemSelectedBorderBrushPropertyKey.DependencyProperty;
        public static DependencyProperty TabItemSelectedForegroundColorProperty = DependencyProperty.Register("TabItemSelectedForegroundColor", typeof(Color), typeof(Theme));
        static DependencyPropertyKey _TabItemSelectedForegroundBrushPropertyKey = DependencyProperty.RegisterReadOnly("TabItemSelectedForegroundBrush", typeof(Brush), typeof(Theme), new FrameworkPropertyMetadata());
        public static DependencyProperty TabItemSelectedForegroundBrushProperty = _TabItemSelectedForegroundBrushPropertyKey.DependencyProperty;
        public static DependencyProperty TabItemSelectedFontFamilyProperty = DependencyProperty.Register("TabItemSelectedFontFamily", typeof(FontFamily), typeof(Theme), new FrameworkPropertyMetadata(new FontFamily("Segoe UI")));
        public static DependencyProperty TabItemSelectedFontSizeProperty = DependencyProperty.Register("TabItemSelectedFontSize", typeof(double), typeof(Theme), new FrameworkPropertyMetadata(14d));
        public static DependencyProperty TabItemSelectedFontWeightProperty = DependencyProperty.Register("TabItemSelectedFontWeight", typeof(FontWeight), typeof(Theme), new FrameworkPropertyMetadata(FontWeights.Normal));
        public static DependencyProperty TabItemSelectedFontStyleProperty = DependencyProperty.Register("TabItemSelectedFontStyle", typeof(FontStyle), typeof(Theme), new FrameworkPropertyMetadata(FontStyles.Normal));
        public static DependencyProperty TabPanelActiveBackgroundColorProperty = DependencyProperty.Register("TabPanelActiveBackgroundColor", typeof(Color), typeof(Theme));
        static DependencyPropertyKey _TabPanelActiveBackgroundBrushPropertyKey = DependencyProperty.RegisterReadOnly("TabPanelActiveBackgroundBrush", typeof(Brush), typeof(Theme), new FrameworkPropertyMetadata());
        public static DependencyProperty TabPanelActiveBackgroundBrushProperty = _TabPanelActiveBackgroundBrushPropertyKey.DependencyProperty;
        public static DependencyProperty TabPanelBackgroundColorProperty = DependencyProperty.Register("TabPanelBackgroundColor", typeof(Color), typeof(Theme));
        static DependencyPropertyKey _TabPanelBackgroundBrushPropertyKey = DependencyProperty.RegisterReadOnly("TabPanelBackgroundBrush", typeof(Brush), typeof(Theme), new FrameworkPropertyMetadata());
        public static DependencyProperty TabPanelBackgroundBrushProperty = _TabPanelBackgroundBrushPropertyKey.DependencyProperty;
        public static DependencyProperty TabPanelBorderColorProperty = DependencyProperty.Register("TabPanelBorderColor", typeof(Color), typeof(Theme));
        static DependencyPropertyKey _TabPanelBorderBrushPropertyKey = DependencyProperty.RegisterReadOnly("TabPanelBorderBrush", typeof(Brush), typeof(Theme), new FrameworkPropertyMetadata());
        public static DependencyProperty TabPanelBorderBrushProperty = _TabPanelBorderBrushPropertyKey.DependencyProperty;
        public static DependencyProperty TabPanelBorderThicknessProperty = DependencyProperty.Register("TabPanelBorderThickness", typeof(Thickness), typeof(Theme), new FrameworkPropertyMetadata(new Thickness(0,0,0,1)));
        public static DependencyProperty TabPanelMarginProperty = DependencyProperty.Register("TabPanelMargin", typeof(Thickness), typeof(Theme), new FrameworkPropertyMetadata(new Thickness(12)));
        public static DependencyProperty TextBoxContentMarginProperty = DependencyProperty.Register("TextBoxContentMargin", typeof(Thickness), typeof(Theme), new FrameworkPropertyMetadata(new Thickness(2)));
        public static DependencyProperty TextBoxBorderThicknessProperty = DependencyProperty.Register("TextBoxBorderThickness", typeof(Thickness), typeof(Theme), new FrameworkPropertyMetadata(new Thickness(1)));
        public static DependencyProperty TextBoxSelectionColorProperty = DependencyProperty.Register("TextBoxSelectionColor", typeof(Color), typeof(Theme));
        static DependencyPropertyKey _TextBoxSelectionBrushPropertyKey = DependencyProperty.RegisterReadOnly("TextBoxSelectionBrush", typeof(Brush), typeof(Theme), new FrameworkPropertyMetadata());
        public static DependencyProperty TextBoxSelectionBrushProperty = _TextBoxSelectionBrushPropertyKey.DependencyProperty;
        public static DependencyProperty TextBoxSelectionOpacityProperty = DependencyProperty.Register("TextBoxSelectionOpacity", typeof(double), typeof(Theme), new FrameworkPropertyMetadata(0.3d));
        public static DependencyProperty TextEditorFocusedSelectionBorderColorProperty = DependencyProperty.Register("TextEditorFocusedSelectionBorderColor", typeof(Color), typeof(Theme));
        static DependencyPropertyKey _TextEditorFocusedSelectionBorderBrushPropertyKey = DependencyProperty.RegisterReadOnly("TextEditorFocusedSelectionBorderBrush", typeof(Brush), typeof(Theme), new FrameworkPropertyMetadata());
        public static DependencyProperty TextEditorFocusedSelectionBorderBrushProperty = _TextEditorFocusedSelectionBorderBrushPropertyKey.DependencyProperty;
        public static DependencyProperty TextEditorFocusedSelectionColorProperty = DependencyProperty.Register("TextEditorFocusedSelectionColor", typeof(Color), typeof(Theme), new FrameworkPropertyMetadata(Color.FromArgb(0x23, 0x10, 0x7C, 0x1A)));
        static DependencyPropertyKey _TextEditorFocusedSelectionBrushPropertyKey = DependencyProperty.RegisterReadOnly("TextEditorFocusedSelectionBrush", typeof(Brush), typeof(Theme), new FrameworkPropertyMetadata());
        public static DependencyProperty TextEditorFocusedSelectionBrushProperty = _TextEditorFocusedSelectionBrushPropertyKey.DependencyProperty;
        public static DependencyProperty TextEditorSelectionBorderThicknessProperty = DependencyProperty.Register("TextEditorSelectionBorderThickness", typeof(double), typeof(Theme), new FrameworkPropertyMetadata(1d));
        public static DependencyProperty TextEditorSelectionBorderColorProperty = DependencyProperty.Register("TextEditorSelectionBorderColor", typeof(Color), typeof(Theme));
        static DependencyPropertyKey _TextEditorSelectionBorderBrushPropertyKey = DependencyProperty.RegisterReadOnly("TextEditorSelectionBorderBrush", typeof(Brush), typeof(Theme), new FrameworkPropertyMetadata());
        public static DependencyProperty TextEditorSelectionBorderBrushProperty = _TextEditorSelectionBorderBrushPropertyKey.DependencyProperty;
        public static DependencyProperty TextEditorSelectionColorProperty = DependencyProperty.Register("TextEditorSelectionColor", typeof(Color), typeof(Theme), new FrameworkPropertyMetadata(Color.FromArgb(0x3D, 0xB7, 0xB7, 0xB7)));
        static DependencyPropertyKey _TextEditorSelectionBrushPropertyKey = DependencyProperty.RegisterReadOnly("TextEditorSelectionBrush", typeof(Brush), typeof(Theme), new FrameworkPropertyMetadata());
        public static DependencyProperty TextEditorSelectionBrushProperty = _TextEditorSelectionBrushPropertyKey.DependencyProperty;
        public static DependencyProperty TimelineSelectionBorderColorProperty = DependencyProperty.Register("TimelineSelectionBorderColor", typeof(Color), typeof(Theme));
        static DependencyPropertyKey _TimelineSelectionBorderBrushPropertyKey = DependencyProperty.RegisterReadOnly("TimelineSelectionBorderBrush", typeof(Brush), typeof(Theme), new FrameworkPropertyMetadata());
        public static DependencyProperty TimelineSelectionBorderBrushProperty = _TimelineSelectionBorderBrushPropertyKey.DependencyProperty;
        public static DependencyProperty TimelineSelectionColorProperty = DependencyProperty.Register("TimelineSelectionColor", typeof(Color), typeof(Theme));
        static DependencyPropertyKey _TimelineSelectionBrushPropertyKey = DependencyProperty.RegisterReadOnly("TimelineSelectionBrush", typeof(Brush), typeof(Theme), new FrameworkPropertyMetadata());
        public static DependencyProperty TimelineSelectionBrushProperty = _TimelineSelectionBrushPropertyKey.DependencyProperty;
        public static DependencyProperty TimelineMousePointColorProperty = DependencyProperty.Register("TimelineMousePointColor", typeof(Color), typeof(Theme), new FrameworkPropertyMetadata(Color.FromArgb(0x80, 0x00, 0x00, 0x00)));
        static DependencyPropertyKey _TimelineMousePointBrushPropertyKey = DependencyProperty.RegisterReadOnly("TimelineMousePointBrush", typeof(Brush), typeof(Theme), new FrameworkPropertyMetadata());
        public static DependencyProperty TimelineMousePointBrushProperty = _TimelineMousePointBrushPropertyKey.DependencyProperty;
        public static DependencyProperty TimelineFontFamilyProperty = DependencyProperty.Register("TimelineFontFamily", typeof(FontFamily), typeof(Theme), new FrameworkPropertyMetadata(new FontFamily("SmallCaption")));
        public static DependencyProperty TimelineFontSizeProperty = DependencyProperty.Register("TimelineFontSize", typeof(double), typeof(Theme), new FrameworkPropertyMetadata(10d));
        public static DependencyProperty TimelineFontWeightProperty = DependencyProperty.Register("TimelineFontWeight", typeof(FontWeight), typeof(Theme), new FrameworkPropertyMetadata(FontWeights.Normal));
        public static DependencyProperty TimelineFontStyleProperty = DependencyProperty.Register("TimelineFontStyle", typeof(FontStyle), typeof(Theme), new FrameworkPropertyMetadata(FontStyles.Normal));
        public static DependencyProperty ToggleButtonCheckedBackgroundColorProperty = DependencyProperty.Register("ToggleButtonCheckedBackgroundColor", typeof(Color), typeof(Theme));
        static DependencyPropertyKey _ToggleButtonCheckedBackgroundBrushPropertyKey = DependencyProperty.RegisterReadOnly("ToggleButtonCheckedBackgroundBrush", typeof(Brush), typeof(Theme), new FrameworkPropertyMetadata());
        public static DependencyProperty ToggleButtonCheckedBackgroundBrushProperty = _ToggleButtonCheckedBackgroundBrushPropertyKey.DependencyProperty;
        public static DependencyProperty ToggleButtonCheckedBorderColorProperty = DependencyProperty.Register("ToggleButtonCheckedBorderColor", typeof(Color), typeof(Theme));
        static DependencyPropertyKey _ToggleButtonCheckedBorderBrushPropertyKey = DependencyProperty.RegisterReadOnly("ToggleButtonCheckedBorderBrush", typeof(Brush), typeof(Theme), new FrameworkPropertyMetadata());
        public static DependencyProperty ToggleButtonCheckedBorderBrushProperty = _ToggleButtonCheckedBorderBrushPropertyKey.DependencyProperty;
        public static DependencyProperty ToggleButtonCheckedForegroundColorProperty = DependencyProperty.Register("ToggleButtonCheckedForegroundColor", typeof(Color), typeof(Theme));
        static DependencyPropertyKey _ToggleButtonCheckedForegroundBrushPropertyKey = DependencyProperty.RegisterReadOnly("ToggleButtonCheckedForegroundBrush", typeof(Brush), typeof(Theme), new FrameworkPropertyMetadata());
        public static DependencyProperty ToggleButtonCheckedForegroundBrushProperty = _ToggleButtonCheckedForegroundBrushPropertyKey.DependencyProperty;
        public static DependencyProperty ToggleButtonDisabledCheckedBackgroundColorProperty = DependencyProperty.Register("ToggleButtonDisabledCheckedBackgroundColor", typeof(Color), typeof(Theme));
        static DependencyPropertyKey _ToggleButtonDisabledCheckedBackgroundBrushPropertyKey = DependencyProperty.RegisterReadOnly("ToggleButtonDisabledCheckedBackgroundBrush", typeof(Brush), typeof(Theme), new FrameworkPropertyMetadata());
        public static DependencyProperty ToggleButtonDisabledCheckedBackgroundBrushProperty = _ToggleButtonDisabledCheckedBackgroundBrushPropertyKey.DependencyProperty;
        public static DependencyProperty ToggleButtonDisabledCheckedBorderColorProperty = DependencyProperty.Register("ToggleButtonDisabledCheckedBorderColor", typeof(Color), typeof(Theme));
        static DependencyPropertyKey _ToggleButtonDisabledCheckedBorderBrushPropertyKey = DependencyProperty.RegisterReadOnly("ToggleButtonDisabledCheckedBorderBrush", typeof(Brush), typeof(Theme), new FrameworkPropertyMetadata());
        public static DependencyProperty ToggleButtonDisabledCheckedBorderBrushProperty = _ToggleButtonDisabledCheckedBorderBrushPropertyKey.DependencyProperty;
        public static DependencyProperty ToggleButtonDisabledCheckedForegroundColorProperty = DependencyProperty.Register("ToggleButtonDisabledCheckedForegroundColor", typeof(Color), typeof(Theme));
        static DependencyPropertyKey _ToggleButtonDisabledCheckedForegroundBrushPropertyKey = DependencyProperty.RegisterReadOnly("ToggleButtonDisabledCheckedForegroundBrush", typeof(Brush), typeof(Theme), new FrameworkPropertyMetadata());
        public static DependencyProperty ToggleButtonDisabledCheckedForegroundBrushProperty = _ToggleButtonDisabledCheckedForegroundBrushPropertyKey.DependencyProperty;
        public static DependencyProperty ToggleButtonFocusedCheckedBackgroundColorProperty = DependencyProperty.Register("ToggleButtonFocusedCheckedBackgroundColor", typeof(Color), typeof(Theme));
        static DependencyPropertyKey _ToggleButtonFocusedCheckedBackgroundBrushPropertyKey = DependencyProperty.RegisterReadOnly("ToggleButtonFocusedCheckedBackgroundBrush", typeof(Brush), typeof(Theme), new FrameworkPropertyMetadata());
        public static DependencyProperty ToggleButtonFocusedCheckedBackgroundBrushProperty = _ToggleButtonFocusedCheckedBackgroundBrushPropertyKey.DependencyProperty;
        public static DependencyProperty ToggleButtonFocusedCheckedBorderColorProperty = DependencyProperty.Register("ToggleButtonFocusedCheckedBorderColor", typeof(Color), typeof(Theme));
        static DependencyPropertyKey _ToggleButtonFocusedCheckedBorderBrushPropertyKey = DependencyProperty.RegisterReadOnly("ToggleButtonFocusedCheckedBorderBrush", typeof(Brush), typeof(Theme), new FrameworkPropertyMetadata());
        public static DependencyProperty ToggleButtonFocusedCheckedBorderBrushProperty = _ToggleButtonFocusedCheckedBorderBrushPropertyKey.DependencyProperty;
        public static DependencyProperty ToggleButtonFocusedCheckedForegroundColorProperty = DependencyProperty.Register("ToggleButtonFocusedCheckedForegroundColor", typeof(Color), typeof(Theme));
        static DependencyPropertyKey _ToggleButtonFocusedCheckedForegroundBrushPropertyKey = DependencyProperty.RegisterReadOnly("ToggleButtonFocusedCheckedForegroundBrush", typeof(Brush), typeof(Theme), new FrameworkPropertyMetadata());
        public static DependencyProperty ToggleButtonFocusedCheckedForegroundBrushProperty = _ToggleButtonFocusedCheckedForegroundBrushPropertyKey.DependencyProperty;
        public static DependencyProperty ToggleButtonHoverCheckedBackgroundColorProperty = DependencyProperty.Register("ToggleButtonHoverCheckedBackgroundColor", typeof(Color), typeof(Theme));
        static DependencyPropertyKey _ToggleButtonHoverCheckedBackgroundBrushPropertyKey = DependencyProperty.RegisterReadOnly("ToggleButtonHoverCheckedBackgroundBrush", typeof(Brush), typeof(Theme), new FrameworkPropertyMetadata());
        public static DependencyProperty ToggleButtonHoverCheckedBackgroundBrushProperty = _ToggleButtonHoverCheckedBackgroundBrushPropertyKey.DependencyProperty;
        public static DependencyProperty ToggleButtonHoverCheckedBorderColorProperty = DependencyProperty.Register("ToggleButtonHoverCheckedBorderColor", typeof(Color), typeof(Theme));
        static DependencyPropertyKey _ToggleButtonHoverCheckedBorderBrushPropertyKey = DependencyProperty.RegisterReadOnly("ToggleButtonHoverCheckedBorderBrush", typeof(Brush), typeof(Theme), new FrameworkPropertyMetadata());
        public static DependencyProperty ToggleButtonHoverCheckedBorderBrushProperty = _ToggleButtonHoverCheckedBorderBrushPropertyKey.DependencyProperty;
        public static DependencyProperty ToggleButtonHoverCheckedForegroundColorProperty = DependencyProperty.Register("ToggleButtonHoverCheckedForegroundColor", typeof(Color), typeof(Theme));
        static DependencyPropertyKey _ToggleButtonHoverCheckedForegroundBrushPropertyKey = DependencyProperty.RegisterReadOnly("ToggleButtonHoverCheckedForegroundBrush", typeof(Brush), typeof(Theme), new FrameworkPropertyMetadata());
        public static DependencyProperty ToggleButtonHoverCheckedForegroundBrushProperty = _ToggleButtonHoverCheckedForegroundBrushPropertyKey.DependencyProperty;
        public static DependencyProperty TreeGridBackgroundColorProperty = DependencyProperty.Register("TreeGridBackgroundColor", typeof(Color), typeof(Theme));
        static DependencyPropertyKey _TreeGridBackgroundBrushPropertyKey = DependencyProperty.RegisterReadOnly("TreeGridBackgroundBrush", typeof(Brush), typeof(Theme), new FrameworkPropertyMetadata());
        public static DependencyProperty TreeGridBackgroundBrushProperty = _TreeGridBackgroundBrushPropertyKey.DependencyProperty;
        public static DependencyProperty TreeGridCurrentRowBorderColorProperty = DependencyProperty.Register("TreeGridCurrentRowBorderColor", typeof(Color), typeof(Theme));
        static DependencyPropertyKey _TreeGridCurrentRowBorderBrushPropertyKey = DependencyProperty.RegisterReadOnly("TreeGridCurrentRowBorderBrush", typeof(Brush), typeof(Theme), new FrameworkPropertyMetadata());
        public static DependencyProperty TreeGridCurrentRowBorderBrushProperty = _TreeGridCurrentRowBorderBrushPropertyKey.DependencyProperty;
        public static DependencyProperty TreeGridFocusedCurrentRowBorderColorProperty = DependencyProperty.Register("TreeGridFocusedCurrentRowBorderColor", typeof(Color), typeof(Theme));
        static DependencyPropertyKey _TreeGridFocusedCurrentRowBorderBrushPropertyKey = DependencyProperty.RegisterReadOnly("TreeGridFocusedCurrentRowBorderBrush", typeof(Brush), typeof(Theme), new FrameworkPropertyMetadata());
        public static DependencyProperty TreeGridFocusedCurrentRowBorderBrushProperty = _TreeGridFocusedCurrentRowBorderBrushPropertyKey.DependencyProperty;
        public static DependencyProperty TreeGridFocusedSelectedBackgroundColorProperty = DependencyProperty.Register("TreeGridFocusedSelectedBackgroundColor", typeof(Color), typeof(Theme));
        static DependencyPropertyKey _TreeGridFocusedSelectedBackgroundBrushPropertyKey = DependencyProperty.RegisterReadOnly("TreeGridFocusedSelectedBackgroundBrush", typeof(Brush), typeof(Theme), new FrameworkPropertyMetadata());
        public static DependencyProperty TreeGridFocusedSelectedBackgroundBrushProperty = _TreeGridFocusedSelectedBackgroundBrushPropertyKey.DependencyProperty;
        public static DependencyProperty TreeGridFocusedSelectedForegroundColorProperty = DependencyProperty.Register("TreeGridFocusedSelectedForegroundColor", typeof(Color), typeof(Theme));
        static DependencyPropertyKey _TreeGridFocusedSelectedForegroundBrushPropertyKey = DependencyProperty.RegisterReadOnly("TreeGridFocusedSelectedForegroundBrush", typeof(Brush), typeof(Theme), new FrameworkPropertyMetadata());
        public static DependencyProperty TreeGridFocusedSelectedForegroundBrushProperty = _TreeGridFocusedSelectedForegroundBrushPropertyKey.DependencyProperty;
        public static DependencyProperty TreeGridForegroundColorProperty = DependencyProperty.Register("TreeGridForegroundColor", typeof(Color), typeof(Theme));
        static DependencyPropertyKey _TreeGridForegroundBrushPropertyKey = DependencyProperty.RegisterReadOnly("TreeGridForegroundBrush", typeof(Brush), typeof(Theme), new FrameworkPropertyMetadata());
        public static DependencyProperty TreeGridForegroundBrushProperty = _TreeGridForegroundBrushPropertyKey.DependencyProperty;
        public static DependencyProperty TreeGridHeaderBackgroundColorProperty = DependencyProperty.Register("TreeGridHeaderBackgroundColor", typeof(Color), typeof(Theme));
        static DependencyPropertyKey _TreeGridHeaderBackgroundBrushPropertyKey = DependencyProperty.RegisterReadOnly("TreeGridHeaderBackgroundBrush", typeof(Brush), typeof(Theme), new FrameworkPropertyMetadata());
        public static DependencyProperty TreeGridHeaderBackgroundBrushProperty = _TreeGridHeaderBackgroundBrushPropertyKey.DependencyProperty;
        public static DependencyProperty TreeGridHeaderFocusedBackgroundColorProperty = DependencyProperty.Register("TreeGridHeaderFocusedBackgroundColor", typeof(Color), typeof(Theme));
        static DependencyPropertyKey _TreeGridHeaderFocusedBackgroundBrushPropertyKey = DependencyProperty.RegisterReadOnly("TreeGridHeaderFocusedBackgroundBrush", typeof(Brush), typeof(Theme), new FrameworkPropertyMetadata());
        public static DependencyProperty TreeGridHeaderFocusedBackgroundBrushProperty = _TreeGridHeaderFocusedBackgroundBrushPropertyKey.DependencyProperty;
        public static DependencyProperty TreeGridHeaderFocusedForegroundColorProperty = DependencyProperty.Register("TreeGridHeaderFocusedForegroundColor", typeof(Color), typeof(Theme));
        static DependencyPropertyKey _TreeGridHeaderFocusedForegroundBrushPropertyKey = DependencyProperty.RegisterReadOnly("TreeGridHeaderFocusedForegroundBrush", typeof(Brush), typeof(Theme), new FrameworkPropertyMetadata());
        public static DependencyProperty TreeGridHeaderFocusedForegroundBrushProperty = _TreeGridHeaderFocusedForegroundBrushPropertyKey.DependencyProperty;
        public static DependencyProperty TreeGridHeaderFocusedHoverBackgroundColorProperty = DependencyProperty.Register("TreeGridHeaderFocusedHoverBackgroundColor", typeof(Color), typeof(Theme));
        static DependencyPropertyKey _TreeGridHeaderFocusedHoverBackgroundBrushPropertyKey = DependencyProperty.RegisterReadOnly("TreeGridHeaderFocusedHoverBackgroundBrush", typeof(Brush), typeof(Theme), new FrameworkPropertyMetadata());
        public static DependencyProperty TreeGridHeaderFocusedHoverBackgroundBrushProperty = _TreeGridHeaderFocusedHoverBackgroundBrushPropertyKey.DependencyProperty;
        public static DependencyProperty TreeGridHeaderFocusedHoverForegroundColorProperty = DependencyProperty.Register("TreeGridHeaderFocusedHoverForegroundColor", typeof(Color), typeof(Theme));
        static DependencyPropertyKey _TreeGridHeaderFocusedHoverForegroundBrushPropertyKey = DependencyProperty.RegisterReadOnly("TreeGridHeaderFocusedHoverForegroundBrush", typeof(Brush), typeof(Theme), new FrameworkPropertyMetadata());
        public static DependencyProperty TreeGridHeaderFocusedHoverForegroundBrushProperty = _TreeGridHeaderFocusedHoverForegroundBrushPropertyKey.DependencyProperty;
        public static DependencyProperty TreeGridHeaderFontFamilyProperty = DependencyProperty.Register("TreeGridHeaderFontFamily", typeof(FontFamily), typeof(Theme), new FrameworkPropertyMetadata(new FontFamily("Segoe UI")));
        public static DependencyProperty TreeGridHeaderFontSizeProperty = DependencyProperty.Register("TreeGridHeaderFontSize", typeof(double), typeof(Theme), new FrameworkPropertyMetadata(12d));
        public static DependencyProperty TreeGridHeaderFontWeightProperty = DependencyProperty.Register("TreeGridHeaderFontWeight", typeof(FontWeight), typeof(Theme), new FrameworkPropertyMetadata(FontWeights.Bold));
        public static DependencyProperty TreeGridHeaderFontStyleProperty = DependencyProperty.Register("TreeGridHeaderFontStyle", typeof(FontStyle), typeof(Theme), new FrameworkPropertyMetadata(FontStyles.Normal));
        public static DependencyProperty TreeGridHeaderForegroundColorProperty = DependencyProperty.Register("TreeGridHeaderForegroundColor", typeof(Color), typeof(Theme));
        static DependencyPropertyKey _TreeGridHeaderForegroundBrushPropertyKey = DependencyProperty.RegisterReadOnly("TreeGridHeaderForegroundBrush", typeof(Brush), typeof(Theme), new FrameworkPropertyMetadata());
        public static DependencyProperty TreeGridHeaderForegroundBrushProperty = _TreeGridHeaderForegroundBrushPropertyKey.DependencyProperty;
        public static DependencyProperty TreeGridHeaderHoverBackgroundColorProperty = DependencyProperty.Register("TreeGridHeaderHoverBackgroundColor", typeof(Color), typeof(Theme));
        static DependencyPropertyKey _TreeGridHeaderHoverBackgroundBrushPropertyKey = DependencyProperty.RegisterReadOnly("TreeGridHeaderHoverBackgroundBrush", typeof(Brush), typeof(Theme), new FrameworkPropertyMetadata());
        public static DependencyProperty TreeGridHeaderHoverBackgroundBrushProperty = _TreeGridHeaderHoverBackgroundBrushPropertyKey.DependencyProperty;
        public static DependencyProperty TreeGridHeaderHoverForegroundColorProperty = DependencyProperty.Register("TreeGridHeaderHoverForegroundColor", typeof(Color), typeof(Theme));
        static DependencyPropertyKey _TreeGridHeaderHoverForegroundBrushPropertyKey = DependencyProperty.RegisterReadOnly("TreeGridHeaderHoverForegroundBrush", typeof(Brush), typeof(Theme), new FrameworkPropertyMetadata());
        public static DependencyProperty TreeGridHeaderHoverForegroundBrushProperty = _TreeGridHeaderHoverForegroundBrushPropertyKey.DependencyProperty;
        public static DependencyProperty TreeGridHeaderPressedBackgroundColorProperty = DependencyProperty.Register("TreeGridHeaderPressedBackgroundColor", typeof(Color), typeof(Theme));
        static DependencyPropertyKey _TreeGridHeaderPressedBackgroundBrushPropertyKey = DependencyProperty.RegisterReadOnly("TreeGridHeaderPressedBackgroundBrush", typeof(Brush), typeof(Theme), new FrameworkPropertyMetadata());
        public static DependencyProperty TreeGridHeaderPressedBackgroundBrushProperty = _TreeGridHeaderPressedBackgroundBrushPropertyKey.DependencyProperty;
        public static DependencyProperty TreeGridHeaderPressedForegroundColorProperty = DependencyProperty.Register("TreeGridHeaderPressedForegroundColor", typeof(Color), typeof(Theme));
        static DependencyPropertyKey _TreeGridHeaderPressedForegroundBrushPropertyKey = DependencyProperty.RegisterReadOnly("TreeGridHeaderPressedForegroundBrush", typeof(Brush), typeof(Theme), new FrameworkPropertyMetadata());
        public static DependencyProperty TreeGridHeaderPressedForegroundBrushProperty = _TreeGridHeaderPressedForegroundBrushPropertyKey.DependencyProperty;
        public static DependencyProperty TreeGridLinesColorProperty = DependencyProperty.Register("TreeGridLinesColor", typeof(Color), typeof(Theme));
        static DependencyPropertyKey _TreeGridLinesBrushPropertyKey = DependencyProperty.RegisterReadOnly("TreeGridLinesBrush", typeof(Brush), typeof(Theme), new FrameworkPropertyMetadata());
        public static DependencyProperty TreeGridLinesBrushProperty = _TreeGridLinesBrushPropertyKey.DependencyProperty;
        public static DependencyProperty TreeGridSelectedBackgroundColorProperty = DependencyProperty.Register("TreeGridSelectedBackgroundColor", typeof(Color), typeof(Theme));
        static DependencyPropertyKey _TreeGridSelectedBackgroundBrushPropertyKey = DependencyProperty.RegisterReadOnly("TreeGridSelectedBackgroundBrush", typeof(Brush), typeof(Theme), new FrameworkPropertyMetadata());
        public static DependencyProperty TreeGridSelectedBackgroundBrushProperty = _TreeGridSelectedBackgroundBrushPropertyKey.DependencyProperty;
        public static DependencyProperty TreeGridSelectedForegroundColorProperty = DependencyProperty.Register("TreeGridSelectedForegroundColor", typeof(Color), typeof(Theme));
        static DependencyPropertyKey _TreeGridSelectedForegroundBrushPropertyKey = DependencyProperty.RegisterReadOnly("TreeGridSelectedForegroundBrush", typeof(Brush), typeof(Theme), new FrameworkPropertyMetadata());
        public static DependencyProperty TreeGridSelectedForegroundBrushProperty = _TreeGridSelectedForegroundBrushPropertyKey.DependencyProperty;
        public static DependencyProperty TreeViewItemFocusedSelectedBackgroundColorProperty = DependencyProperty.Register("TreeViewItemFocusedSelectedBackgroundColor", typeof(Color), typeof(Theme));
        static DependencyPropertyKey _TreeViewItemFocusedSelectedBackgroundBrushPropertyKey = DependencyProperty.RegisterReadOnly("TreeViewItemFocusedSelectedBackgroundBrush", typeof(Brush), typeof(Theme), new FrameworkPropertyMetadata());
        public static DependencyProperty TreeViewItemFocusedSelectedBackgroundBrushProperty = _TreeViewItemFocusedSelectedBackgroundBrushPropertyKey.DependencyProperty;
        public static DependencyProperty TreeViewItemFocusedSelectedForegroundColorProperty = DependencyProperty.Register("TreeViewItemFocusedSelectedForegroundColor", typeof(Color), typeof(Theme));
        static DependencyPropertyKey _TreeViewItemFocusedSelectedForegroundBrushPropertyKey = DependencyProperty.RegisterReadOnly("TreeViewItemFocusedSelectedForegroundBrush", typeof(Brush), typeof(Theme), new FrameworkPropertyMetadata());
        public static DependencyProperty TreeViewItemFocusedSelectedForegroundBrushProperty = _TreeViewItemFocusedSelectedForegroundBrushPropertyKey.DependencyProperty;
        public static DependencyProperty TreeViewItemMarginProperty = DependencyProperty.Register("TreeViewItemMargin", typeof(Thickness), typeof(Theme), new FrameworkPropertyMetadata(new Thickness(6,2,6,2)));
        public static DependencyProperty TreeViewItemSelectedBackgroundColorProperty = DependencyProperty.Register("TreeViewItemSelectedBackgroundColor", typeof(Color), typeof(Theme));
        static DependencyPropertyKey _TreeViewItemSelectedBackgroundBrushPropertyKey = DependencyProperty.RegisterReadOnly("TreeViewItemSelectedBackgroundBrush", typeof(Brush), typeof(Theme), new FrameworkPropertyMetadata());
        public static DependencyProperty TreeViewItemSelectedBackgroundBrushProperty = _TreeViewItemSelectedBackgroundBrushPropertyKey.DependencyProperty;
        public static DependencyProperty TreeViewItemSelectedForegroundColorProperty = DependencyProperty.Register("TreeViewItemSelectedForegroundColor", typeof(Color), typeof(Theme));
        static DependencyPropertyKey _TreeViewItemSelectedForegroundBrushPropertyKey = DependencyProperty.RegisterReadOnly("TreeViewItemSelectedForegroundBrush", typeof(Brush), typeof(Theme), new FrameworkPropertyMetadata());
        public static DependencyProperty TreeViewItemSelectedForegroundBrushProperty = _TreeViewItemSelectedForegroundBrushPropertyKey.DependencyProperty;
        public static DependencyProperty ViewBackgroundColorProperty = DependencyProperty.Register("ViewBackgroundColor", typeof(Color), typeof(Theme));
        static DependencyPropertyKey _ViewBackgroundBrushPropertyKey = DependencyProperty.RegisterReadOnly("ViewBackgroundBrush", typeof(Brush), typeof(Theme), new FrameworkPropertyMetadata());
        public static DependencyProperty ViewBackgroundBrushProperty = _ViewBackgroundBrushPropertyKey.DependencyProperty;
        public static DependencyProperty ViewBorderColorProperty = DependencyProperty.Register("ViewBorderColor", typeof(Color), typeof(Theme));
        static DependencyPropertyKey _ViewBorderBrushPropertyKey = DependencyProperty.RegisterReadOnly("ViewBorderBrush", typeof(Brush), typeof(Theme), new FrameworkPropertyMetadata());
        public static DependencyProperty ViewBorderBrushProperty = _ViewBorderBrushPropertyKey.DependencyProperty;
        public static DependencyProperty ViewBorderThicknessProperty = DependencyProperty.Register("ViewBorderThickness", typeof(Thickness), typeof(Theme), new FrameworkPropertyMetadata(new Thickness(1)));
        public static DependencyProperty ViewMarginProperty = DependencyProperty.Register("ViewMargin", typeof(Thickness), typeof(Theme), new FrameworkPropertyMetadata(new Thickness(12)));
        public static DependencyProperty ViewSpacingProperty = DependencyProperty.Register("ViewSpacing", typeof(double), typeof(Theme), new FrameworkPropertyMetadata(12d));
        public static DependencyProperty ViewGroupHeaderFontFamilyProperty = DependencyProperty.Register("ViewGroupHeaderFontFamily", typeof(FontFamily), typeof(Theme), new FrameworkPropertyMetadata(new FontFamily("Segoe UI")));
        public static DependencyProperty ViewGroupHeaderFontSizeProperty = DependencyProperty.Register("ViewGroupHeaderFontSize", typeof(double), typeof(Theme), new FrameworkPropertyMetadata(13d));
        public static DependencyProperty ViewGroupHeaderFontWeightProperty = DependencyProperty.Register("ViewGroupHeaderFontWeight", typeof(FontWeight), typeof(Theme), new FrameworkPropertyMetadata(FontWeights.Bold));
        public static DependencyProperty ViewGroupHeaderFontStyleProperty = DependencyProperty.Register("ViewGroupHeaderFontStyle", typeof(FontStyle), typeof(Theme), new FrameworkPropertyMetadata(FontStyles.Normal));
        public static DependencyProperty AccentBackgroundColorProperty = DependencyProperty.Register("AccentBackgroundColor", typeof(Color), typeof(Theme));
        static DependencyPropertyKey _AccentBackgroundBrushPropertyKey = DependencyProperty.RegisterReadOnly("AccentBackgroundBrush", typeof(Brush), typeof(Theme), new FrameworkPropertyMetadata());
        public static DependencyProperty AccentBackgroundBrushProperty = _AccentBackgroundBrushPropertyKey.DependencyProperty;
        public static DependencyProperty AccentForegroundColorProperty = DependencyProperty.Register("AccentForegroundColor", typeof(Color), typeof(Theme));
        static DependencyPropertyKey _AccentForegroundBrushPropertyKey = DependencyProperty.RegisterReadOnly("AccentForegroundBrush", typeof(Brush), typeof(Theme), new FrameworkPropertyMetadata());
        public static DependencyProperty AccentForegroundBrushProperty = _AccentForegroundBrushPropertyKey.DependencyProperty;
        public static DependencyProperty TitleBarButtonBackgroundColorProperty = DependencyProperty.Register("TitleBarButtonBackgroundColor", typeof(Color), typeof(Theme));
        static DependencyPropertyKey _TitleBarButtonBackgroundBrushPropertyKey = DependencyProperty.RegisterReadOnly("TitleBarButtonBackgroundBrush", typeof(Brush), typeof(Theme), new FrameworkPropertyMetadata());
        public static DependencyProperty TitleBarButtonBackgroundBrushProperty = _TitleBarButtonBackgroundBrushPropertyKey.DependencyProperty;
        public static DependencyProperty TitleBarButtonForegroundColorProperty = DependencyProperty.Register("TitleBarButtonForegroundColor", typeof(Color), typeof(Theme));
        static DependencyPropertyKey _TitleBarButtonForegroundBrushPropertyKey = DependencyProperty.RegisterReadOnly("TitleBarButtonForegroundBrush", typeof(Brush), typeof(Theme), new FrameworkPropertyMetadata());
        public static DependencyProperty TitleBarButtonForegroundBrushProperty = _TitleBarButtonForegroundBrushPropertyKey.DependencyProperty;
        public static DependencyProperty TitleBarButtonHoverBackgroundColorProperty = DependencyProperty.Register("TitleBarButtonHoverBackgroundColor", typeof(Color), typeof(Theme));
        static DependencyPropertyKey _TitleBarButtonHoverBackgroundBrushPropertyKey = DependencyProperty.RegisterReadOnly("TitleBarButtonHoverBackgroundBrush", typeof(Brush), typeof(Theme), new FrameworkPropertyMetadata());
        public static DependencyProperty TitleBarButtonHoverBackgroundBrushProperty = _TitleBarButtonHoverBackgroundBrushPropertyKey.DependencyProperty;
        public static DependencyProperty TitleBarButtonHoverForegroundColorProperty = DependencyProperty.Register("TitleBarButtonHoverForegroundColor", typeof(Color), typeof(Theme));
        static DependencyPropertyKey _TitleBarButtonHoverForegroundBrushPropertyKey = DependencyProperty.RegisterReadOnly("TitleBarButtonHoverForegroundBrush", typeof(Brush), typeof(Theme), new FrameworkPropertyMetadata());
        public static DependencyProperty TitleBarButtonHoverForegroundBrushProperty = _TitleBarButtonHoverForegroundBrushPropertyKey.DependencyProperty;
        public static DependencyProperty TitleBarButtonPressedBackgroundColorProperty = DependencyProperty.Register("TitleBarButtonPressedBackgroundColor", typeof(Color), typeof(Theme));
        static DependencyPropertyKey _TitleBarButtonPressedBackgroundBrushPropertyKey = DependencyProperty.RegisterReadOnly("TitleBarButtonPressedBackgroundBrush", typeof(Brush), typeof(Theme), new FrameworkPropertyMetadata());
        public static DependencyProperty TitleBarButtonPressedBackgroundBrushProperty = _TitleBarButtonPressedBackgroundBrushPropertyKey.DependencyProperty;
        public static DependencyProperty TitleBarButtonPressedForegroundColorProperty = DependencyProperty.Register("TitleBarButtonPressedForegroundColor", typeof(Color), typeof(Theme));
        static DependencyPropertyKey _TitleBarButtonPressedForegroundBrushPropertyKey = DependencyProperty.RegisterReadOnly("TitleBarButtonPressedForegroundBrush", typeof(Brush), typeof(Theme), new FrameworkPropertyMetadata());
        public static DependencyProperty TitleBarButtonPressedForegroundBrushProperty = _TitleBarButtonPressedForegroundBrushPropertyKey.DependencyProperty;

        [ThemeProperty("BladeControl")]
        public Color BladePageHoverBackgroundColor { get { return (Color)GetValue(BladePageHoverBackgroundColorProperty); } set { SetValue(BladePageHoverBackgroundColorProperty, value); } }
        public Brush BladePageHoverBackgroundBrush { get { return (Brush)GetValue(BladePageHoverBackgroundBrushProperty); } private set { SetValue(_BladePageHoverBackgroundBrushPropertyKey, value); } }
        [ThemeProperty("BladeControl")]
        public Color BladePageHoverForegroundColor { get { return (Color)GetValue(BladePageHoverForegroundColorProperty); } set { SetValue(BladePageHoverForegroundColorProperty, value); } }
        public Brush BladePageHoverForegroundBrush { get { return (Brush)GetValue(BladePageHoverForegroundBrushProperty); } private set { SetValue(_BladePageHoverForegroundBrushPropertyKey, value); } }
        [ThemeProperty("Button")]
        public Thickness ButtonPadding { get { return (Thickness)GetValue(ButtonPaddingProperty); } set { SetValue(ButtonPaddingProperty, value); } }
        [ThemeProperty("CheckBox")]
        public Thickness CheckBoxContentMargin { get { return (Thickness)GetValue(CheckBoxContentMarginProperty); } set { SetValue(CheckBoxContentMarginProperty, value); } }
        [ThemeProperty("ComboBox")]
        public Color ComboBoxDropdownBackgroundColor { get { return (Color)GetValue(ComboBoxDropdownBackgroundColorProperty); } set { SetValue(ComboBoxDropdownBackgroundColorProperty, value); } }
        public Brush ComboBoxDropdownBackgroundBrush { get { return (Brush)GetValue(ComboBoxDropdownBackgroundBrushProperty); } private set { SetValue(_ComboBoxDropdownBackgroundBrushPropertyKey, value); } }
        [ThemeProperty("ComboBox")]
        public Color ComboBoxItemHighlightedBackgroundColor { get { return (Color)GetValue(ComboBoxItemHighlightedBackgroundColorProperty); } set { SetValue(ComboBoxItemHighlightedBackgroundColorProperty, value); } }
        public Brush ComboBoxItemHighlightedBackgroundBrush { get { return (Brush)GetValue(ComboBoxItemHighlightedBackgroundBrushProperty); } private set { SetValue(_ComboBoxItemHighlightedBackgroundBrushPropertyKey, value); } }
        [ThemeProperty("ComboBox")]
        public Color ComboBoxItemHighlightedForegroundColor { get { return (Color)GetValue(ComboBoxItemHighlightedForegroundColorProperty); } set { SetValue(ComboBoxItemHighlightedForegroundColorProperty, value); } }
        public Brush ComboBoxItemHighlightedForegroundBrush { get { return (Brush)GetValue(ComboBoxItemHighlightedForegroundBrushProperty); } private set { SetValue(_ComboBoxItemHighlightedForegroundBrushPropertyKey, value); } }
        [ThemeProperty("ComboBox")]
        public Thickness ComboBoxItemMargin { get { return (Thickness)GetValue(ComboBoxItemMarginProperty); } set { SetValue(ComboBoxItemMarginProperty, value); } }
        [ThemeProperty("ComboBox")]
        public Color ComboBoxItemSelectedBackgroundColor { get { return (Color)GetValue(ComboBoxItemSelectedBackgroundColorProperty); } set { SetValue(ComboBoxItemSelectedBackgroundColorProperty, value); } }
        public Brush ComboBoxItemSelectedBackgroundBrush { get { return (Brush)GetValue(ComboBoxItemSelectedBackgroundBrushProperty); } private set { SetValue(_ComboBoxItemSelectedBackgroundBrushPropertyKey, value); } }
        [ThemeProperty("ComboBox")]
        public Color ComboBoxItemSelectedForegroundColor { get { return (Color)GetValue(ComboBoxItemSelectedForegroundColorProperty); } set { SetValue(ComboBoxItemSelectedForegroundColorProperty, value); } }
        public Brush ComboBoxItemSelectedForegroundBrush { get { return (Brush)GetValue(ComboBoxItemSelectedForegroundBrushProperty); } private set { SetValue(_ComboBoxItemSelectedForegroundBrushPropertyKey, value); } }
        [ThemeProperty("Control")]
        public Color ControlBackgroundColor { get { return (Color)GetValue(ControlBackgroundColorProperty); } set { SetValue(ControlBackgroundColorProperty, value); } }
        public Brush ControlBackgroundBrush { get { return (Brush)GetValue(ControlBackgroundBrushProperty); } private set { SetValue(_ControlBackgroundBrushPropertyKey, value); } }
        [ThemeProperty("Control")]
        public Color ControlBorderColor { get { return (Color)GetValue(ControlBorderColorProperty); } set { SetValue(ControlBorderColorProperty, value); } }
        public Brush ControlBorderBrush { get { return (Brush)GetValue(ControlBorderBrushProperty); } private set { SetValue(_ControlBorderBrushPropertyKey, value); } }
        [ThemeProperty("Control")]
        public Thickness ControlBorderThickness { get { return (Thickness)GetValue(ControlBorderThicknessProperty); } set { SetValue(ControlBorderThicknessProperty, value); } }
        [ThemeProperty("Control")]
        public Color ControlDisabledBackgroundColor { get { return (Color)GetValue(ControlDisabledBackgroundColorProperty); } set { SetValue(ControlDisabledBackgroundColorProperty, value); } }
        public Brush ControlDisabledBackgroundBrush { get { return (Brush)GetValue(ControlDisabledBackgroundBrushProperty); } private set { SetValue(_ControlDisabledBackgroundBrushPropertyKey, value); } }
        [ThemeProperty("Control")]
        public Color ControlDisabledBorderColor { get { return (Color)GetValue(ControlDisabledBorderColorProperty); } set { SetValue(ControlDisabledBorderColorProperty, value); } }
        public Brush ControlDisabledBorderBrush { get { return (Brush)GetValue(ControlDisabledBorderBrushProperty); } private set { SetValue(_ControlDisabledBorderBrushPropertyKey, value); } }
        [ThemeProperty("Control")]
        public Color ControlDisabledForegroundColor { get { return (Color)GetValue(ControlDisabledForegroundColorProperty); } set { SetValue(ControlDisabledForegroundColorProperty, value); } }
        public Brush ControlDisabledForegroundBrush { get { return (Brush)GetValue(ControlDisabledForegroundBrushProperty); } private set { SetValue(_ControlDisabledForegroundBrushPropertyKey, value); } }
        [ThemeProperty("Control")]
        public Color ControlFocusedBackgroundColor { get { return (Color)GetValue(ControlFocusedBackgroundColorProperty); } set { SetValue(ControlFocusedBackgroundColorProperty, value); } }
        public Brush ControlFocusedBackgroundBrush { get { return (Brush)GetValue(ControlFocusedBackgroundBrushProperty); } private set { SetValue(_ControlFocusedBackgroundBrushPropertyKey, value); } }
        [ThemeProperty("Control")]
        public Color ControlFocusedBorderColor { get { return (Color)GetValue(ControlFocusedBorderColorProperty); } set { SetValue(ControlFocusedBorderColorProperty, value); } }
        public Brush ControlFocusedBorderBrush { get { return (Brush)GetValue(ControlFocusedBorderBrushProperty); } private set { SetValue(_ControlFocusedBorderBrushPropertyKey, value); } }
        [ThemeProperty("Control")]
        public Color ControlFocusedForegroundColor { get { return (Color)GetValue(ControlFocusedForegroundColorProperty); } set { SetValue(ControlFocusedForegroundColorProperty, value); } }
        public Brush ControlFocusedForegroundBrush { get { return (Brush)GetValue(ControlFocusedForegroundBrushProperty); } private set { SetValue(_ControlFocusedForegroundBrushPropertyKey, value); } }
        [ThemeProperty("Control")]
        public Color ControlFocusedHoverBackgroundColor { get { return (Color)GetValue(ControlFocusedHoverBackgroundColorProperty); } set { SetValue(ControlFocusedHoverBackgroundColorProperty, value); } }
        public Brush ControlFocusedHoverBackgroundBrush { get { return (Brush)GetValue(ControlFocusedHoverBackgroundBrushProperty); } private set { SetValue(_ControlFocusedHoverBackgroundBrushPropertyKey, value); } }
        [ThemeProperty("Control")]
        public Color ControlFocusedHoverBorderColor { get { return (Color)GetValue(ControlFocusedHoverBorderColorProperty); } set { SetValue(ControlFocusedHoverBorderColorProperty, value); } }
        public Brush ControlFocusedHoverBorderBrush { get { return (Brush)GetValue(ControlFocusedHoverBorderBrushProperty); } private set { SetValue(_ControlFocusedHoverBorderBrushPropertyKey, value); } }
        [ThemeProperty("Control")]
        public Color ControlFocusedHoverForegroundColor { get { return (Color)GetValue(ControlFocusedHoverForegroundColorProperty); } set { SetValue(ControlFocusedHoverForegroundColorProperty, value); } }
        public Brush ControlFocusedHoverForegroundBrush { get { return (Brush)GetValue(ControlFocusedHoverForegroundBrushProperty); } private set { SetValue(_ControlFocusedHoverForegroundBrushPropertyKey, value); } }
        [ThemeProperty("Control")]
        public Color ControlForegroundColor { get { return (Color)GetValue(ControlForegroundColorProperty); } set { SetValue(ControlForegroundColorProperty, value); } }
        public Brush ControlForegroundBrush { get { return (Brush)GetValue(ControlForegroundBrushProperty); } private set { SetValue(_ControlForegroundBrushPropertyKey, value); } }
        [ThemeProperty("Control")]
        public Color ControlHoverBackgroundColor { get { return (Color)GetValue(ControlHoverBackgroundColorProperty); } set { SetValue(ControlHoverBackgroundColorProperty, value); } }
        public Brush ControlHoverBackgroundBrush { get { return (Brush)GetValue(ControlHoverBackgroundBrushProperty); } private set { SetValue(_ControlHoverBackgroundBrushPropertyKey, value); } }
        [ThemeProperty("Control")]
        public Color ControlHoverBorderColor { get { return (Color)GetValue(ControlHoverBorderColorProperty); } set { SetValue(ControlHoverBorderColorProperty, value); } }
        public Brush ControlHoverBorderBrush { get { return (Brush)GetValue(ControlHoverBorderBrushProperty); } private set { SetValue(_ControlHoverBorderBrushPropertyKey, value); } }
        [ThemeProperty("Control")]
        public Color ControlHoverForegroundColor { get { return (Color)GetValue(ControlHoverForegroundColorProperty); } set { SetValue(ControlHoverForegroundColorProperty, value); } }
        public Brush ControlHoverForegroundBrush { get { return (Brush)GetValue(ControlHoverForegroundBrushProperty); } private set { SetValue(_ControlHoverForegroundBrushPropertyKey, value); } }
        [ThemeProperty("Control")]
        public Color ControlPressedBackgroundColor { get { return (Color)GetValue(ControlPressedBackgroundColorProperty); } set { SetValue(ControlPressedBackgroundColorProperty, value); } }
        public Brush ControlPressedBackgroundBrush { get { return (Brush)GetValue(ControlPressedBackgroundBrushProperty); } private set { SetValue(_ControlPressedBackgroundBrushPropertyKey, value); } }
        [ThemeProperty("Control")]
        public Color ControlPressedBorderColor { get { return (Color)GetValue(ControlPressedBorderColorProperty); } set { SetValue(ControlPressedBorderColorProperty, value); } }
        public Brush ControlPressedBorderBrush { get { return (Brush)GetValue(ControlPressedBorderBrushProperty); } private set { SetValue(_ControlPressedBorderBrushPropertyKey, value); } }
        [ThemeProperty("Control")]
        public Color ControlPressedForegroundColor { get { return (Color)GetValue(ControlPressedForegroundColorProperty); } set { SetValue(ControlPressedForegroundColorProperty, value); } }
        public Brush ControlPressedForegroundBrush { get { return (Brush)GetValue(ControlPressedForegroundBrushProperty); } private set { SetValue(_ControlPressedForegroundBrushPropertyKey, value); } }
        [ThemeProperty("Control")]
        public Color DarkFocusVisualColor { get { return (Color)GetValue(DarkFocusVisualColorProperty); } set { SetValue(DarkFocusVisualColorProperty, value); } }
        public Brush DarkFocusVisualBrush { get { return (Brush)GetValue(DarkFocusVisualBrushProperty); } private set { SetValue(_DarkFocusVisualBrushPropertyKey, value); } }
        [ThemeProperty("Control")]
        public Color LightFocusVisualColor { get { return (Color)GetValue(LightFocusVisualColorProperty); } set { SetValue(LightFocusVisualColorProperty, value); } }
        public Brush LightFocusVisualBrush { get { return (Brush)GetValue(LightFocusVisualBrushProperty); } private set { SetValue(_LightFocusVisualBrushPropertyKey, value); } }
        [ThemeProperty("Document")]
        public double DocumentAffinityFade { get { return (double)GetValue(DocumentAffinityFadeProperty); } set { SetValue(DocumentAffinityFadeProperty, value); } }
        [ThemeProperty("Document")]
        public double DocumentAffinityLineThickness { get { return (double)GetValue(DocumentAffinityLineThicknessProperty); } set { SetValue(DocumentAffinityLineThicknessProperty, value); } }
        [ThemeProperty("Document")]
        public Thickness DocumentAffinityMargin { get { return (Thickness)GetValue(DocumentAffinityMarginProperty); } set { SetValue(DocumentAffinityMarginProperty, value); } }
        [ThemeProperty("EventLane")]
        public double EventLaneBarHeight { get { return (double)GetValue(EventLaneBarHeightProperty); } set { SetValue(EventLaneBarHeightProperty, value); } }
        [ThemeProperty("EventLane")]
        public Color EventLaneFocusedBackgroundColor { get { return (Color)GetValue(EventLaneFocusedBackgroundColorProperty); } set { SetValue(EventLaneFocusedBackgroundColorProperty, value); } }
        public Brush EventLaneFocusedBackgroundBrush { get { return (Brush)GetValue(EventLaneFocusedBackgroundBrushProperty); } private set { SetValue(_EventLaneFocusedBackgroundBrushPropertyKey, value); } }
        [ThemeProperty("EventLane")]
        public Color EventLaneFocusedForegroundColor { get { return (Color)GetValue(EventLaneFocusedForegroundColorProperty); } set { SetValue(EventLaneFocusedForegroundColorProperty, value); } }
        public Brush EventLaneFocusedForegroundBrush { get { return (Brush)GetValue(EventLaneFocusedForegroundBrushProperty); } private set { SetValue(_EventLaneFocusedForegroundBrushPropertyKey, value); } }
        [ThemeProperty("EventLane")]
        public Color EventLaneFocusedSelectionBackgroundColor { get { return (Color)GetValue(EventLaneFocusedSelectionBackgroundColorProperty); } set { SetValue(EventLaneFocusedSelectionBackgroundColorProperty, value); } }
        public Brush EventLaneFocusedSelectionBackgroundBrush { get { return (Brush)GetValue(EventLaneFocusedSelectionBackgroundBrushProperty); } private set { SetValue(_EventLaneFocusedSelectionBackgroundBrushPropertyKey, value); } }
        [ThemeProperty("EventLane")]
        public Color EventLaneFocusedSelectionForegroundColor { get { return (Color)GetValue(EventLaneFocusedSelectionForegroundColorProperty); } set { SetValue(EventLaneFocusedSelectionForegroundColorProperty, value); } }
        public Brush EventLaneFocusedSelectionForegroundBrush { get { return (Brush)GetValue(EventLaneFocusedSelectionForegroundBrushProperty); } private set { SetValue(_EventLaneFocusedSelectionForegroundBrushPropertyKey, value); } }
        [ThemeProperty("EventLane")]
        public FontFamily EventLaneLabelFontFamily { get { return (FontFamily)GetValue(EventLaneLabelFontFamilyProperty); } set { SetValue(EventLaneLabelFontFamilyProperty, value); } }
        [ThemeProperty("EventLane")]
        public double EventLaneLabelFontSize { get { return (double)GetValue(EventLaneLabelFontSizeProperty); } set { SetValue(EventLaneLabelFontSizeProperty, value); } }
        [ThemeProperty("EventLane")]
        public FontWeight EventLaneLabelFontWeight { get { return (FontWeight)GetValue(EventLaneLabelFontWeightProperty); } set { SetValue(EventLaneLabelFontWeightProperty, value); } }
        [ThemeProperty("EventLane")]
        public FontStyle EventLaneLabelFontStyle { get { return (FontStyle)GetValue(EventLaneLabelFontStyleProperty); } set { SetValue(EventLaneLabelFontStyleProperty, value); } }
        [ThemeProperty("EventLane")]
        public Color EventLaneSelectionBackgroundColor { get { return (Color)GetValue(EventLaneSelectionBackgroundColorProperty); } set { SetValue(EventLaneSelectionBackgroundColorProperty, value); } }
        public Brush EventLaneSelectionBackgroundBrush { get { return (Brush)GetValue(EventLaneSelectionBackgroundBrushProperty); } private set { SetValue(_EventLaneSelectionBackgroundBrushPropertyKey, value); } }
        [ThemeProperty("EventLane")]
        public Color EventLaneSelectionForegroundColor { get { return (Color)GetValue(EventLaneSelectionForegroundColorProperty); } set { SetValue(EventLaneSelectionForegroundColorProperty, value); } }
        public Brush EventLaneSelectionForegroundBrush { get { return (Brush)GetValue(EventLaneSelectionForegroundBrushProperty); } private set { SetValue(_EventLaneSelectionForegroundBrushPropertyKey, value); } }
        [ThemeProperty("General")]
        public FontFamily DefaultFontFamily { get { return (FontFamily)GetValue(DefaultFontFamilyProperty); } set { SetValue(DefaultFontFamilyProperty, value); } }
        [ThemeProperty("General")]
        public double DefaultFontSize { get { return (double)GetValue(DefaultFontSizeProperty); } set { SetValue(DefaultFontSizeProperty, value); } }
        [ThemeProperty("General")]
        public FontWeight DefaultFontWeight { get { return (FontWeight)GetValue(DefaultFontWeightProperty); } set { SetValue(DefaultFontWeightProperty, value); } }
        [ThemeProperty("General")]
        public FontStyle DefaultFontStyle { get { return (FontStyle)GetValue(DefaultFontStyleProperty); } set { SetValue(DefaultFontStyleProperty, value); } }
        [ThemeProperty("General")]
        public FontFamily Heading1FontFamily { get { return (FontFamily)GetValue(Heading1FontFamilyProperty); } set { SetValue(Heading1FontFamilyProperty, value); } }
        [ThemeProperty("General")]
        public double Heading1FontSize { get { return (double)GetValue(Heading1FontSizeProperty); } set { SetValue(Heading1FontSizeProperty, value); } }
        [ThemeProperty("General")]
        public FontWeight Heading1FontWeight { get { return (FontWeight)GetValue(Heading1FontWeightProperty); } set { SetValue(Heading1FontWeightProperty, value); } }
        [ThemeProperty("General")]
        public FontStyle Heading1FontStyle { get { return (FontStyle)GetValue(Heading1FontStyleProperty); } set { SetValue(Heading1FontStyleProperty, value); } }
        [ThemeProperty("General")]
        public Color Heading1ForegroundColor { get { return (Color)GetValue(Heading1ForegroundColorProperty); } set { SetValue(Heading1ForegroundColorProperty, value); } }
        public Brush Heading1ForegroundBrush { get { return (Brush)GetValue(Heading1ForegroundBrushProperty); } private set { SetValue(_Heading1ForegroundBrushPropertyKey, value); } }
        [ThemeProperty("General")]
        public FontFamily Heading2FontFamily { get { return (FontFamily)GetValue(Heading2FontFamilyProperty); } set { SetValue(Heading2FontFamilyProperty, value); } }
        [ThemeProperty("General")]
        public double Heading2FontSize { get { return (double)GetValue(Heading2FontSizeProperty); } set { SetValue(Heading2FontSizeProperty, value); } }
        [ThemeProperty("General")]
        public FontWeight Heading2FontWeight { get { return (FontWeight)GetValue(Heading2FontWeightProperty); } set { SetValue(Heading2FontWeightProperty, value); } }
        [ThemeProperty("General")]
        public FontStyle Heading2FontStyle { get { return (FontStyle)GetValue(Heading2FontStyleProperty); } set { SetValue(Heading2FontStyleProperty, value); } }
        [ThemeProperty("General")]
        public Color Heading2ForegroundColor { get { return (Color)GetValue(Heading2ForegroundColorProperty); } set { SetValue(Heading2ForegroundColorProperty, value); } }
        public Brush Heading2ForegroundBrush { get { return (Brush)GetValue(Heading2ForegroundBrushProperty); } private set { SetValue(_Heading2ForegroundBrushPropertyKey, value); } }
        [ThemeProperty("GroupBox")]
        public Thickness GroupBoxContentPadding { get { return (Thickness)GetValue(GroupBoxContentPaddingProperty); } set { SetValue(GroupBoxContentPaddingProperty, value); } }
        [ThemeProperty("GroupBox")]
        public Color GroupBoxHeaderBackgroundColor { get { return (Color)GetValue(GroupBoxHeaderBackgroundColorProperty); } set { SetValue(GroupBoxHeaderBackgroundColorProperty, value); } }
        public Brush GroupBoxHeaderBackgroundBrush { get { return (Brush)GetValue(GroupBoxHeaderBackgroundBrushProperty); } private set { SetValue(_GroupBoxHeaderBackgroundBrushPropertyKey, value); } }
        [ThemeProperty("GroupBox")]
        public Color GroupBoxHeaderForegroundColor { get { return (Color)GetValue(GroupBoxHeaderForegroundColorProperty); } set { SetValue(GroupBoxHeaderForegroundColorProperty, value); } }
        public Brush GroupBoxHeaderForegroundBrush { get { return (Brush)GetValue(GroupBoxHeaderForegroundBrushProperty); } private set { SetValue(_GroupBoxHeaderForegroundBrushPropertyKey, value); } }
        [ThemeProperty("GroupBox")]
        public FontFamily GroupBoxHeaderFontFamily { get { return (FontFamily)GetValue(GroupBoxHeaderFontFamilyProperty); } set { SetValue(GroupBoxHeaderFontFamilyProperty, value); } }
        [ThemeProperty("GroupBox")]
        public double GroupBoxHeaderFontSize { get { return (double)GetValue(GroupBoxHeaderFontSizeProperty); } set { SetValue(GroupBoxHeaderFontSizeProperty, value); } }
        [ThemeProperty("GroupBox")]
        public FontWeight GroupBoxHeaderFontWeight { get { return (FontWeight)GetValue(GroupBoxHeaderFontWeightProperty); } set { SetValue(GroupBoxHeaderFontWeightProperty, value); } }
        [ThemeProperty("GroupBox")]
        public FontStyle GroupBoxHeaderFontStyle { get { return (FontStyle)GetValue(GroupBoxHeaderFontStyleProperty); } set { SetValue(GroupBoxHeaderFontStyleProperty, value); } }
        [ThemeProperty("GroupBox")]
        public Thickness GroupBoxHeaderPadding { get { return (Thickness)GetValue(GroupBoxHeaderPaddingProperty); } set { SetValue(GroupBoxHeaderPaddingProperty, value); } }
        [ThemeProperty("LayoutTabControl")]
        public Color CloseFileButtonForegroundColor { get { return (Color)GetValue(CloseFileButtonForegroundColorProperty); } set { SetValue(CloseFileButtonForegroundColorProperty, value); } }
        public Brush CloseFileButtonForegroundBrush { get { return (Brush)GetValue(CloseFileButtonForegroundBrushProperty); } private set { SetValue(_CloseFileButtonForegroundBrushPropertyKey, value); } }
        [ThemeProperty("LayoutTabControl")]
        public Color CloseFileButtonHoverForegroundColor { get { return (Color)GetValue(CloseFileButtonHoverForegroundColorProperty); } set { SetValue(CloseFileButtonHoverForegroundColorProperty, value); } }
        public Brush CloseFileButtonHoverForegroundBrush { get { return (Brush)GetValue(CloseFileButtonHoverForegroundBrushProperty); } private set { SetValue(_CloseFileButtonHoverForegroundBrushPropertyKey, value); } }
        [ThemeProperty("LayoutTabControl")]
        public Color FileButtonBackgroundColor { get { return (Color)GetValue(FileButtonBackgroundColorProperty); } set { SetValue(FileButtonBackgroundColorProperty, value); } }
        public Brush FileButtonBackgroundBrush { get { return (Brush)GetValue(FileButtonBackgroundBrushProperty); } private set { SetValue(_FileButtonBackgroundBrushPropertyKey, value); } }
        [ThemeProperty("LayoutTabControl")]
        public Color FileButtonForegroundColor { get { return (Color)GetValue(FileButtonForegroundColorProperty); } set { SetValue(FileButtonForegroundColorProperty, value); } }
        public Brush FileButtonForegroundBrush { get { return (Brush)GetValue(FileButtonForegroundBrushProperty); } private set { SetValue(_FileButtonForegroundBrushPropertyKey, value); } }
        [ThemeProperty("LayoutTabControl")]
        public Color FileButtonHoverBackgroundColor { get { return (Color)GetValue(FileButtonHoverBackgroundColorProperty); } set { SetValue(FileButtonHoverBackgroundColorProperty, value); } }
        public Brush FileButtonHoverBackgroundBrush { get { return (Brush)GetValue(FileButtonHoverBackgroundBrushProperty); } private set { SetValue(_FileButtonHoverBackgroundBrushPropertyKey, value); } }
        [ThemeProperty("LayoutTabControl")]
        public Color FileButtonHoverForegroundColor { get { return (Color)GetValue(FileButtonHoverForegroundColorProperty); } set { SetValue(FileButtonHoverForegroundColorProperty, value); } }
        public Brush FileButtonHoverForegroundBrush { get { return (Brush)GetValue(FileButtonHoverForegroundBrushProperty); } private set { SetValue(_FileButtonHoverForegroundBrushPropertyKey, value); } }
        [ThemeProperty("LayoutTabControl")]
        public FontFamily FileTabHeaderFontFamily { get { return (FontFamily)GetValue(FileTabHeaderFontFamilyProperty); } set { SetValue(FileTabHeaderFontFamilyProperty, value); } }
        [ThemeProperty("LayoutTabControl")]
        public double FileTabHeaderFontSize { get { return (double)GetValue(FileTabHeaderFontSizeProperty); } set { SetValue(FileTabHeaderFontSizeProperty, value); } }
        [ThemeProperty("LayoutTabControl")]
        public FontWeight FileTabHeaderFontWeight { get { return (FontWeight)GetValue(FileTabHeaderFontWeightProperty); } set { SetValue(FileTabHeaderFontWeightProperty, value); } }
        [ThemeProperty("LayoutTabControl")]
        public FontStyle FileTabHeaderFontStyle { get { return (FontStyle)GetValue(FileTabHeaderFontStyleProperty); } set { SetValue(FileTabHeaderFontStyleProperty, value); } }
        [ThemeProperty("LayoutTabControl")]
        public Color FileTabItemBackgroundColor { get { return (Color)GetValue(FileTabItemBackgroundColorProperty); } set { SetValue(FileTabItemBackgroundColorProperty, value); } }
        public Brush FileTabItemBackgroundBrush { get { return (Brush)GetValue(FileTabItemBackgroundBrushProperty); } private set { SetValue(_FileTabItemBackgroundBrushPropertyKey, value); } }
        [ThemeProperty("LayoutTabControl")]
        public Color FileTabItemDisabledBackgroundColor { get { return (Color)GetValue(FileTabItemDisabledBackgroundColorProperty); } set { SetValue(FileTabItemDisabledBackgroundColorProperty, value); } }
        public Brush FileTabItemDisabledBackgroundBrush { get { return (Brush)GetValue(FileTabItemDisabledBackgroundBrushProperty); } private set { SetValue(_FileTabItemDisabledBackgroundBrushPropertyKey, value); } }
        [ThemeProperty("LayoutTabControl")]
        public Color FileTabItemDisabledForegroundColor { get { return (Color)GetValue(FileTabItemDisabledForegroundColorProperty); } set { SetValue(FileTabItemDisabledForegroundColorProperty, value); } }
        public Brush FileTabItemDisabledForegroundBrush { get { return (Brush)GetValue(FileTabItemDisabledForegroundBrushProperty); } private set { SetValue(_FileTabItemDisabledForegroundBrushPropertyKey, value); } }
        [ThemeProperty("LayoutTabControl")]
        public Color FileTabItemForegroundColor { get { return (Color)GetValue(FileTabItemForegroundColorProperty); } set { SetValue(FileTabItemForegroundColorProperty, value); } }
        public Brush FileTabItemForegroundBrush { get { return (Brush)GetValue(FileTabItemForegroundBrushProperty); } private set { SetValue(_FileTabItemForegroundBrushPropertyKey, value); } }
        [ThemeProperty("LayoutTabControl")]
        public Color FileTabItemHoverBackgroundColor { get { return (Color)GetValue(FileTabItemHoverBackgroundColorProperty); } set { SetValue(FileTabItemHoverBackgroundColorProperty, value); } }
        public Brush FileTabItemHoverBackgroundBrush { get { return (Brush)GetValue(FileTabItemHoverBackgroundBrushProperty); } private set { SetValue(_FileTabItemHoverBackgroundBrushPropertyKey, value); } }
        [ThemeProperty("LayoutTabControl")]
        public Color FileTabItemHoverForegroundColor { get { return (Color)GetValue(FileTabItemHoverForegroundColorProperty); } set { SetValue(FileTabItemHoverForegroundColorProperty, value); } }
        public Brush FileTabItemHoverForegroundBrush { get { return (Brush)GetValue(FileTabItemHoverForegroundBrushProperty); } private set { SetValue(_FileTabItemHoverForegroundBrushPropertyKey, value); } }
        [ThemeProperty("LayoutTabControl")]
        public Color FileTabItemSelectedBackgroundColor { get { return (Color)GetValue(FileTabItemSelectedBackgroundColorProperty); } set { SetValue(FileTabItemSelectedBackgroundColorProperty, value); } }
        public Brush FileTabItemSelectedBackgroundBrush { get { return (Brush)GetValue(FileTabItemSelectedBackgroundBrushProperty); } private set { SetValue(_FileTabItemSelectedBackgroundBrushPropertyKey, value); } }
        [ThemeProperty("LayoutTabControl")]
        public Color FileTabItemSelectedForegroundColor { get { return (Color)GetValue(FileTabItemSelectedForegroundColorProperty); } set { SetValue(FileTabItemSelectedForegroundColorProperty, value); } }
        public Brush FileTabItemSelectedForegroundBrush { get { return (Brush)GetValue(FileTabItemSelectedForegroundBrushProperty); } private set { SetValue(_FileTabItemSelectedForegroundBrushPropertyKey, value); } }
        [ThemeProperty("LayoutTabControl")]
        public Color LayoutTabControlBackgroundColor { get { return (Color)GetValue(LayoutTabControlBackgroundColorProperty); } set { SetValue(LayoutTabControlBackgroundColorProperty, value); } }
        public Brush LayoutTabControlBackgroundBrush { get { return (Brush)GetValue(LayoutTabControlBackgroundBrushProperty); } private set { SetValue(_LayoutTabControlBackgroundBrushPropertyKey, value); } }
        [ThemeProperty("LayoutTabControl")]
        public Color LayoutTabItemBackgroundColor { get { return (Color)GetValue(LayoutTabItemBackgroundColorProperty); } set { SetValue(LayoutTabItemBackgroundColorProperty, value); } }
        public Brush LayoutTabItemBackgroundBrush { get { return (Brush)GetValue(LayoutTabItemBackgroundBrushProperty); } private set { SetValue(_LayoutTabItemBackgroundBrushPropertyKey, value); } }
        [ThemeProperty("LayoutTabControl")]
        public Color LayoutTabItemBorderColor { get { return (Color)GetValue(LayoutTabItemBorderColorProperty); } set { SetValue(LayoutTabItemBorderColorProperty, value); } }
        public Brush LayoutTabItemBorderBrush { get { return (Brush)GetValue(LayoutTabItemBorderBrushProperty); } private set { SetValue(_LayoutTabItemBorderBrushPropertyKey, value); } }
        [ThemeProperty("LayoutTabControl")]
        public Color LayoutTabItemForegroundColor { get { return (Color)GetValue(LayoutTabItemForegroundColorProperty); } set { SetValue(LayoutTabItemForegroundColorProperty, value); } }
        public Brush LayoutTabItemForegroundBrush { get { return (Brush)GetValue(LayoutTabItemForegroundBrushProperty); } private set { SetValue(_LayoutTabItemForegroundBrushPropertyKey, value); } }
        [ThemeProperty("LayoutTabControl")]
        public Color LayoutTabItemHoverBackgroundColor { get { return (Color)GetValue(LayoutTabItemHoverBackgroundColorProperty); } set { SetValue(LayoutTabItemHoverBackgroundColorProperty, value); } }
        public Brush LayoutTabItemHoverBackgroundBrush { get { return (Brush)GetValue(LayoutTabItemHoverBackgroundBrushProperty); } private set { SetValue(_LayoutTabItemHoverBackgroundBrushPropertyKey, value); } }
        [ThemeProperty("LayoutTabControl")]
        public Color LayoutTabItemHoverForegroundColor { get { return (Color)GetValue(LayoutTabItemHoverForegroundColorProperty); } set { SetValue(LayoutTabItemHoverForegroundColorProperty, value); } }
        public Brush LayoutTabItemHoverForegroundBrush { get { return (Brush)GetValue(LayoutTabItemHoverForegroundBrushProperty); } private set { SetValue(_LayoutTabItemHoverForegroundBrushPropertyKey, value); } }
        [ThemeProperty("LayoutTabControl")]
        public Color LayoutTabItemSelectedBackgroundColor { get { return (Color)GetValue(LayoutTabItemSelectedBackgroundColorProperty); } set { SetValue(LayoutTabItemSelectedBackgroundColorProperty, value); } }
        public Brush LayoutTabItemSelectedBackgroundBrush { get { return (Brush)GetValue(LayoutTabItemSelectedBackgroundBrushProperty); } private set { SetValue(_LayoutTabItemSelectedBackgroundBrushPropertyKey, value); } }
        [ThemeProperty("LayoutTabControl")]
        public Color LayoutTabItemSelectedForegroundColor { get { return (Color)GetValue(LayoutTabItemSelectedForegroundColorProperty); } set { SetValue(LayoutTabItemSelectedForegroundColorProperty, value); } }
        public Brush LayoutTabItemSelectedForegroundBrush { get { return (Brush)GetValue(LayoutTabItemSelectedForegroundBrushProperty); } private set { SetValue(_LayoutTabItemSelectedForegroundBrushPropertyKey, value); } }
        [ThemeProperty("LayoutTabControl")]
        public Color OpenTabBorderColor { get { return (Color)GetValue(OpenTabBorderColorProperty); } set { SetValue(OpenTabBorderColorProperty, value); } }
        public Brush OpenTabBorderBrush { get { return (Brush)GetValue(OpenTabBorderBrushProperty); } private set { SetValue(_OpenTabBorderBrushPropertyKey, value); } }
        [ThemeProperty("LayoutTabControl")]
        public Color OpenTabItemBackgroundColor { get { return (Color)GetValue(OpenTabItemBackgroundColorProperty); } set { SetValue(OpenTabItemBackgroundColorProperty, value); } }
        public Brush OpenTabItemBackgroundBrush { get { return (Brush)GetValue(OpenTabItemBackgroundBrushProperty); } private set { SetValue(_OpenTabItemBackgroundBrushPropertyKey, value); } }
        [ThemeProperty("LayoutTabControl")]
        public Color OpenTabItemForegroundColor { get { return (Color)GetValue(OpenTabItemForegroundColorProperty); } set { SetValue(OpenTabItemForegroundColorProperty, value); } }
        public Brush OpenTabItemForegroundBrush { get { return (Brush)GetValue(OpenTabItemForegroundBrushProperty); } private set { SetValue(_OpenTabItemForegroundBrushPropertyKey, value); } }
        [ThemeProperty("LayoutTabControl")]
        public Color OpenTabItemHoverBackgroundColor { get { return (Color)GetValue(OpenTabItemHoverBackgroundColorProperty); } set { SetValue(OpenTabItemHoverBackgroundColorProperty, value); } }
        public Brush OpenTabItemHoverBackgroundBrush { get { return (Brush)GetValue(OpenTabItemHoverBackgroundBrushProperty); } private set { SetValue(_OpenTabItemHoverBackgroundBrushPropertyKey, value); } }
        [ThemeProperty("LayoutTabControl")]
        public Color OpenTabItemHoverForegroundColor { get { return (Color)GetValue(OpenTabItemHoverForegroundColorProperty); } set { SetValue(OpenTabItemHoverForegroundColorProperty, value); } }
        public Brush OpenTabItemHoverForegroundBrush { get { return (Brush)GetValue(OpenTabItemHoverForegroundBrushProperty); } private set { SetValue(_OpenTabItemHoverForegroundBrushPropertyKey, value); } }
        [ThemeProperty("LayoutTabControl")]
        public Color OpenTabItemSelectedBackgroundColor { get { return (Color)GetValue(OpenTabItemSelectedBackgroundColorProperty); } set { SetValue(OpenTabItemSelectedBackgroundColorProperty, value); } }
        public Brush OpenTabItemSelectedBackgroundBrush { get { return (Brush)GetValue(OpenTabItemSelectedBackgroundBrushProperty); } private set { SetValue(_OpenTabItemSelectedBackgroundBrushPropertyKey, value); } }
        [ThemeProperty("LayoutTabControl")]
        public Color OpenTabItemSelectedForegroundColor { get { return (Color)GetValue(OpenTabItemSelectedForegroundColorProperty); } set { SetValue(OpenTabItemSelectedForegroundColorProperty, value); } }
        public Brush OpenTabItemSelectedForegroundBrush { get { return (Brush)GetValue(OpenTabItemSelectedForegroundBrushProperty); } private set { SetValue(_OpenTabItemSelectedForegroundBrushPropertyKey, value); } }
        [ThemeProperty("ListBox")]
        public Color ListBoxItemFocusedSelectedBackgroundColor { get { return (Color)GetValue(ListBoxItemFocusedSelectedBackgroundColorProperty); } set { SetValue(ListBoxItemFocusedSelectedBackgroundColorProperty, value); } }
        public Brush ListBoxItemFocusedSelectedBackgroundBrush { get { return (Brush)GetValue(ListBoxItemFocusedSelectedBackgroundBrushProperty); } private set { SetValue(_ListBoxItemFocusedSelectedBackgroundBrushPropertyKey, value); } }
        [ThemeProperty("ListBox")]
        public Color ListBoxItemFocusedSelectedForegroundColor { get { return (Color)GetValue(ListBoxItemFocusedSelectedForegroundColorProperty); } set { SetValue(ListBoxItemFocusedSelectedForegroundColorProperty, value); } }
        public Brush ListBoxItemFocusedSelectedForegroundBrush { get { return (Brush)GetValue(ListBoxItemFocusedSelectedForegroundBrushProperty); } private set { SetValue(_ListBoxItemFocusedSelectedForegroundBrushPropertyKey, value); } }
        [ThemeProperty("ListBox")]
        public Thickness ListBoxItemMargin { get { return (Thickness)GetValue(ListBoxItemMarginProperty); } set { SetValue(ListBoxItemMarginProperty, value); } }
        [ThemeProperty("ListBox")]
        public Color ListBoxItemSelectedBackgroundColor { get { return (Color)GetValue(ListBoxItemSelectedBackgroundColorProperty); } set { SetValue(ListBoxItemSelectedBackgroundColorProperty, value); } }
        public Brush ListBoxItemSelectedBackgroundBrush { get { return (Brush)GetValue(ListBoxItemSelectedBackgroundBrushProperty); } private set { SetValue(_ListBoxItemSelectedBackgroundBrushPropertyKey, value); } }
        [ThemeProperty("ListBox")]
        public Color ListBoxItemSelectedForegroundColor { get { return (Color)GetValue(ListBoxItemSelectedForegroundColorProperty); } set { SetValue(ListBoxItemSelectedForegroundColorProperty, value); } }
        public Brush ListBoxItemSelectedForegroundBrush { get { return (Brush)GetValue(ListBoxItemSelectedForegroundBrushProperty); } private set { SetValue(_ListBoxItemSelectedForegroundBrushPropertyKey, value); } }
        [ThemeProperty("MainWindow")]
        public Color WindowBackgroundColor { get { return (Color)GetValue(WindowBackgroundColorProperty); } set { SetValue(WindowBackgroundColorProperty, value); } }
        public Brush WindowBackgroundBrush { get { return (Brush)GetValue(WindowBackgroundBrushProperty); } private set { SetValue(_WindowBackgroundBrushPropertyKey, value); } }
        [ThemeProperty("MainWindow")]
        public Color WindowTitleForegroundColor { get { return (Color)GetValue(WindowTitleForegroundColorProperty); } set { SetValue(WindowTitleForegroundColorProperty, value); } }
        public Brush WindowTitleForegroundBrush { get { return (Brush)GetValue(WindowTitleForegroundBrushProperty); } private set { SetValue(_WindowTitleForegroundBrushPropertyKey, value); } }
        [ThemeProperty("MainWindow")]
        public Color WindowTitleInactiveForegroundColor { get { return (Color)GetValue(WindowTitleInactiveForegroundColorProperty); } set { SetValue(WindowTitleInactiveForegroundColorProperty, value); } }
        public Brush WindowTitleInactiveForegroundBrush { get { return (Brush)GetValue(WindowTitleInactiveForegroundBrushProperty); } private set { SetValue(_WindowTitleInactiveForegroundBrushPropertyKey, value); } }
        [ThemeProperty("MainWindow")]
        public FontFamily WindowTitleFontFamily { get { return (FontFamily)GetValue(WindowTitleFontFamilyProperty); } set { SetValue(WindowTitleFontFamilyProperty, value); } }
        [ThemeProperty("MainWindow")]
        public double WindowTitleFontSize { get { return (double)GetValue(WindowTitleFontSizeProperty); } set { SetValue(WindowTitleFontSizeProperty, value); } }
        [ThemeProperty("MainWindow")]
        public FontWeight WindowTitleFontWeight { get { return (FontWeight)GetValue(WindowTitleFontWeightProperty); } set { SetValue(WindowTitleFontWeightProperty, value); } }
        [ThemeProperty("MainWindow")]
        public FontStyle WindowTitleFontStyle { get { return (FontStyle)GetValue(WindowTitleFontStyleProperty); } set { SetValue(WindowTitleFontStyleProperty, value); } }
        [ThemeProperty("ScrollBar")]
        public Color ScrollBarThumbColor { get { return (Color)GetValue(ScrollBarThumbColorProperty); } set { SetValue(ScrollBarThumbColorProperty, value); } }
        public Brush ScrollBarThumbBrush { get { return (Brush)GetValue(ScrollBarThumbBrushProperty); } private set { SetValue(_ScrollBarThumbBrushPropertyKey, value); } }
        [ThemeProperty("ScrollBar")]
        public Color ScrollBarThumbHoverColor { get { return (Color)GetValue(ScrollBarThumbHoverColorProperty); } set { SetValue(ScrollBarThumbHoverColorProperty, value); } }
        public Brush ScrollBarThumbHoverBrush { get { return (Brush)GetValue(ScrollBarThumbHoverBrushProperty); } private set { SetValue(_ScrollBarThumbHoverBrushPropertyKey, value); } }
        [ThemeProperty("ScrollBar")]
        public Color ScrollBarThumbPressedColor { get { return (Color)GetValue(ScrollBarThumbPressedColorProperty); } set { SetValue(ScrollBarThumbPressedColorProperty, value); } }
        public Brush ScrollBarThumbPressedBrush { get { return (Brush)GetValue(ScrollBarThumbPressedBrushProperty); } private set { SetValue(_ScrollBarThumbPressedBrushPropertyKey, value); } }
        [ThemeProperty("TabControl")]
        public Color TabControlActiveBackgroundColor { get { return (Color)GetValue(TabControlActiveBackgroundColorProperty); } set { SetValue(TabControlActiveBackgroundColorProperty, value); } }
        public Brush TabControlActiveBackgroundBrush { get { return (Brush)GetValue(TabControlActiveBackgroundBrushProperty); } private set { SetValue(_TabControlActiveBackgroundBrushPropertyKey, value); } }
        [ThemeProperty("TabControl")]
        public Color TabControlActiveBorderColor { get { return (Color)GetValue(TabControlActiveBorderColorProperty); } set { SetValue(TabControlActiveBorderColorProperty, value); } }
        public Brush TabControlActiveBorderBrush { get { return (Brush)GetValue(TabControlActiveBorderBrushProperty); } private set { SetValue(_TabControlActiveBorderBrushPropertyKey, value); } }
        [ThemeProperty("TabControl")]
        public Color TabControlBackgroundColor { get { return (Color)GetValue(TabControlBackgroundColorProperty); } set { SetValue(TabControlBackgroundColorProperty, value); } }
        public Brush TabControlBackgroundBrush { get { return (Brush)GetValue(TabControlBackgroundBrushProperty); } private set { SetValue(_TabControlBackgroundBrushPropertyKey, value); } }
        [ThemeProperty("TabControl")]
        public Color TabControlBorderColor { get { return (Color)GetValue(TabControlBorderColorProperty); } set { SetValue(TabControlBorderColorProperty, value); } }
        public Brush TabControlBorderBrush { get { return (Brush)GetValue(TabControlBorderBrushProperty); } private set { SetValue(_TabControlBorderBrushPropertyKey, value); } }
        [ThemeProperty("TabControl")]
        public Thickness TabControlBorderThickness { get { return (Thickness)GetValue(TabControlBorderThicknessProperty); } set { SetValue(TabControlBorderThicknessProperty, value); } }
        [ThemeProperty("TabControl")]
        public Color TabItemActiveBackgroundColor { get { return (Color)GetValue(TabItemActiveBackgroundColorProperty); } set { SetValue(TabItemActiveBackgroundColorProperty, value); } }
        public Brush TabItemActiveBackgroundBrush { get { return (Brush)GetValue(TabItemActiveBackgroundBrushProperty); } private set { SetValue(_TabItemActiveBackgroundBrushPropertyKey, value); } }
        [ThemeProperty("TabControl")]
        public Color TabItemActiveBorderColor { get { return (Color)GetValue(TabItemActiveBorderColorProperty); } set { SetValue(TabItemActiveBorderColorProperty, value); } }
        public Brush TabItemActiveBorderBrush { get { return (Brush)GetValue(TabItemActiveBorderBrushProperty); } private set { SetValue(_TabItemActiveBorderBrushPropertyKey, value); } }
        [ThemeProperty("TabControl")]
        public Color TabItemActiveForegroundColor { get { return (Color)GetValue(TabItemActiveForegroundColorProperty); } set { SetValue(TabItemActiveForegroundColorProperty, value); } }
        public Brush TabItemActiveForegroundBrush { get { return (Brush)GetValue(TabItemActiveForegroundBrushProperty); } private set { SetValue(_TabItemActiveForegroundBrushPropertyKey, value); } }
        [ThemeProperty("TabControl")]
        public Color TabItemActiveSelectedBackgroundColor { get { return (Color)GetValue(TabItemActiveSelectedBackgroundColorProperty); } set { SetValue(TabItemActiveSelectedBackgroundColorProperty, value); } }
        public Brush TabItemActiveSelectedBackgroundBrush { get { return (Brush)GetValue(TabItemActiveSelectedBackgroundBrushProperty); } private set { SetValue(_TabItemActiveSelectedBackgroundBrushPropertyKey, value); } }
        [ThemeProperty("TabControl")]
        public Color TabItemActiveSelectedBorderColor { get { return (Color)GetValue(TabItemActiveSelectedBorderColorProperty); } set { SetValue(TabItemActiveSelectedBorderColorProperty, value); } }
        public Brush TabItemActiveSelectedBorderBrush { get { return (Brush)GetValue(TabItemActiveSelectedBorderBrushProperty); } private set { SetValue(_TabItemActiveSelectedBorderBrushPropertyKey, value); } }
        [ThemeProperty("TabControl")]
        public Color TabItemActiveSelectedForegroundColor { get { return (Color)GetValue(TabItemActiveSelectedForegroundColorProperty); } set { SetValue(TabItemActiveSelectedForegroundColorProperty, value); } }
        public Brush TabItemActiveSelectedForegroundBrush { get { return (Brush)GetValue(TabItemActiveSelectedForegroundBrushProperty); } private set { SetValue(_TabItemActiveSelectedForegroundBrushPropertyKey, value); } }
        [ThemeProperty("TabControl")]
        public Color TabItemBackgroundColor { get { return (Color)GetValue(TabItemBackgroundColorProperty); } set { SetValue(TabItemBackgroundColorProperty, value); } }
        public Brush TabItemBackgroundBrush { get { return (Brush)GetValue(TabItemBackgroundBrushProperty); } private set { SetValue(_TabItemBackgroundBrushPropertyKey, value); } }
        [ThemeProperty("TabControl")]
        public Color TabItemBorderColor { get { return (Color)GetValue(TabItemBorderColorProperty); } set { SetValue(TabItemBorderColorProperty, value); } }
        public Brush TabItemBorderBrush { get { return (Brush)GetValue(TabItemBorderBrushProperty); } private set { SetValue(_TabItemBorderBrushPropertyKey, value); } }
        [ThemeProperty("TabControl")]
        public Thickness TabItemBorderPadding { get { return (Thickness)GetValue(TabItemBorderPaddingProperty); } set { SetValue(TabItemBorderPaddingProperty, value); } }
        [ThemeProperty("TabControl")]
        public Thickness TabItemBorderMargin { get { return (Thickness)GetValue(TabItemBorderMarginProperty); } set { SetValue(TabItemBorderMarginProperty, value); } }
        [ThemeProperty("TabControl")]
        public Thickness TabItemBorderThickness { get { return (Thickness)GetValue(TabItemBorderThicknessProperty); } set { SetValue(TabItemBorderThicknessProperty, value); } }
        [ThemeProperty("TabControl")]
        public Color TabItemForegroundColor { get { return (Color)GetValue(TabItemForegroundColorProperty); } set { SetValue(TabItemForegroundColorProperty, value); } }
        public Brush TabItemForegroundBrush { get { return (Brush)GetValue(TabItemForegroundBrushProperty); } private set { SetValue(_TabItemForegroundBrushPropertyKey, value); } }
        [ThemeProperty("TabControl")]
        public FontFamily TabItemFontFamily { get { return (FontFamily)GetValue(TabItemFontFamilyProperty); } set { SetValue(TabItemFontFamilyProperty, value); } }
        [ThemeProperty("TabControl")]
        public double TabItemFontSize { get { return (double)GetValue(TabItemFontSizeProperty); } set { SetValue(TabItemFontSizeProperty, value); } }
        [ThemeProperty("TabControl")]
        public FontWeight TabItemFontWeight { get { return (FontWeight)GetValue(TabItemFontWeightProperty); } set { SetValue(TabItemFontWeightProperty, value); } }
        [ThemeProperty("TabControl")]
        public FontStyle TabItemFontStyle { get { return (FontStyle)GetValue(TabItemFontStyleProperty); } set { SetValue(TabItemFontStyleProperty, value); } }
        [ThemeProperty("TabControl")]
        public Thickness TabItemHeaderMargin { get { return (Thickness)GetValue(TabItemHeaderMarginProperty); } set { SetValue(TabItemHeaderMarginProperty, value); } }
        [ThemeProperty("TabControl")]
        public Color TabItemHoverBackgroundColor { get { return (Color)GetValue(TabItemHoverBackgroundColorProperty); } set { SetValue(TabItemHoverBackgroundColorProperty, value); } }
        public Brush TabItemHoverBackgroundBrush { get { return (Brush)GetValue(TabItemHoverBackgroundBrushProperty); } private set { SetValue(_TabItemHoverBackgroundBrushPropertyKey, value); } }
        [ThemeProperty("TabControl")]
        public Color TabItemHoverBorderColor { get { return (Color)GetValue(TabItemHoverBorderColorProperty); } set { SetValue(TabItemHoverBorderColorProperty, value); } }
        public Brush TabItemHoverBorderBrush { get { return (Brush)GetValue(TabItemHoverBorderBrushProperty); } private set { SetValue(_TabItemHoverBorderBrushPropertyKey, value); } }
        [ThemeProperty("TabControl")]
        public Color TabItemHoverForegroundColor { get { return (Color)GetValue(TabItemHoverForegroundColorProperty); } set { SetValue(TabItemHoverForegroundColorProperty, value); } }
        public Brush TabItemHoverForegroundBrush { get { return (Brush)GetValue(TabItemHoverForegroundBrushProperty); } private set { SetValue(_TabItemHoverForegroundBrushPropertyKey, value); } }
        [ThemeProperty("TabControl")]
        public Color TabItemSelectedBackgroundColor { get { return (Color)GetValue(TabItemSelectedBackgroundColorProperty); } set { SetValue(TabItemSelectedBackgroundColorProperty, value); } }
        public Brush TabItemSelectedBackgroundBrush { get { return (Brush)GetValue(TabItemSelectedBackgroundBrushProperty); } private set { SetValue(_TabItemSelectedBackgroundBrushPropertyKey, value); } }
        [ThemeProperty("TabControl")]
        public Color TabItemSelectedBorderColor { get { return (Color)GetValue(TabItemSelectedBorderColorProperty); } set { SetValue(TabItemSelectedBorderColorProperty, value); } }
        public Brush TabItemSelectedBorderBrush { get { return (Brush)GetValue(TabItemSelectedBorderBrushProperty); } private set { SetValue(_TabItemSelectedBorderBrushPropertyKey, value); } }
        [ThemeProperty("TabControl")]
        public Color TabItemSelectedForegroundColor { get { return (Color)GetValue(TabItemSelectedForegroundColorProperty); } set { SetValue(TabItemSelectedForegroundColorProperty, value); } }
        public Brush TabItemSelectedForegroundBrush { get { return (Brush)GetValue(TabItemSelectedForegroundBrushProperty); } private set { SetValue(_TabItemSelectedForegroundBrushPropertyKey, value); } }
        [ThemeProperty("TabControl")]
        public FontFamily TabItemSelectedFontFamily { get { return (FontFamily)GetValue(TabItemSelectedFontFamilyProperty); } set { SetValue(TabItemSelectedFontFamilyProperty, value); } }
        [ThemeProperty("TabControl")]
        public double TabItemSelectedFontSize { get { return (double)GetValue(TabItemSelectedFontSizeProperty); } set { SetValue(TabItemSelectedFontSizeProperty, value); } }
        [ThemeProperty("TabControl")]
        public FontWeight TabItemSelectedFontWeight { get { return (FontWeight)GetValue(TabItemSelectedFontWeightProperty); } set { SetValue(TabItemSelectedFontWeightProperty, value); } }
        [ThemeProperty("TabControl")]
        public FontStyle TabItemSelectedFontStyle { get { return (FontStyle)GetValue(TabItemSelectedFontStyleProperty); } set { SetValue(TabItemSelectedFontStyleProperty, value); } }
        [ThemeProperty("TabControl")]
        public Color TabPanelActiveBackgroundColor { get { return (Color)GetValue(TabPanelActiveBackgroundColorProperty); } set { SetValue(TabPanelActiveBackgroundColorProperty, value); } }
        public Brush TabPanelActiveBackgroundBrush { get { return (Brush)GetValue(TabPanelActiveBackgroundBrushProperty); } private set { SetValue(_TabPanelActiveBackgroundBrushPropertyKey, value); } }
        [ThemeProperty("TabControl")]
        public Color TabPanelBackgroundColor { get { return (Color)GetValue(TabPanelBackgroundColorProperty); } set { SetValue(TabPanelBackgroundColorProperty, value); } }
        public Brush TabPanelBackgroundBrush { get { return (Brush)GetValue(TabPanelBackgroundBrushProperty); } private set { SetValue(_TabPanelBackgroundBrushPropertyKey, value); } }
        [ThemeProperty("TabControl")]
        public Color TabPanelBorderColor { get { return (Color)GetValue(TabPanelBorderColorProperty); } set { SetValue(TabPanelBorderColorProperty, value); } }
        public Brush TabPanelBorderBrush { get { return (Brush)GetValue(TabPanelBorderBrushProperty); } private set { SetValue(_TabPanelBorderBrushPropertyKey, value); } }
        [ThemeProperty("TabControl")]
        public Thickness TabPanelBorderThickness { get { return (Thickness)GetValue(TabPanelBorderThicknessProperty); } set { SetValue(TabPanelBorderThicknessProperty, value); } }
        [ThemeProperty("TabControl")]
        public Thickness TabPanelMargin { get { return (Thickness)GetValue(TabPanelMarginProperty); } set { SetValue(TabPanelMarginProperty, value); } }
        [ThemeProperty("TextBox")]
        public Thickness TextBoxContentMargin { get { return (Thickness)GetValue(TextBoxContentMarginProperty); } set { SetValue(TextBoxContentMarginProperty, value); } }
        [ThemeProperty("TextBox")]
        public Thickness TextBoxBorderThickness { get { return (Thickness)GetValue(TextBoxBorderThicknessProperty); } set { SetValue(TextBoxBorderThicknessProperty, value); } }
        [ThemeProperty("TextBox")]
        public Color TextBoxSelectionColor { get { return (Color)GetValue(TextBoxSelectionColorProperty); } set { SetValue(TextBoxSelectionColorProperty, value); } }
        public Brush TextBoxSelectionBrush { get { return (Brush)GetValue(TextBoxSelectionBrushProperty); } private set { SetValue(_TextBoxSelectionBrushPropertyKey, value); } }
        [ThemeProperty("TextBox")]
        public double TextBoxSelectionOpacity { get { return (double)GetValue(TextBoxSelectionOpacityProperty); } set { SetValue(TextBoxSelectionOpacityProperty, value); } }
        [ThemeProperty("TextEditor")]
        public Color TextEditorFocusedSelectionBorderColor { get { return (Color)GetValue(TextEditorFocusedSelectionBorderColorProperty); } set { SetValue(TextEditorFocusedSelectionBorderColorProperty, value); } }
        public Brush TextEditorFocusedSelectionBorderBrush { get { return (Brush)GetValue(TextEditorFocusedSelectionBorderBrushProperty); } private set { SetValue(_TextEditorFocusedSelectionBorderBrushPropertyKey, value); } }
        [ThemeProperty("TextEditor")]
        public Color TextEditorFocusedSelectionColor { get { return (Color)GetValue(TextEditorFocusedSelectionColorProperty); } set { SetValue(TextEditorFocusedSelectionColorProperty, value); } }
        public Brush TextEditorFocusedSelectionBrush { get { return (Brush)GetValue(TextEditorFocusedSelectionBrushProperty); } private set { SetValue(_TextEditorFocusedSelectionBrushPropertyKey, value); } }
        [ThemeProperty("TextEditor")]
        public double TextEditorSelectionBorderThickness { get { return (double)GetValue(TextEditorSelectionBorderThicknessProperty); } set { SetValue(TextEditorSelectionBorderThicknessProperty, value); } }
        [ThemeProperty("TextEditor")]
        public Color TextEditorSelectionBorderColor { get { return (Color)GetValue(TextEditorSelectionBorderColorProperty); } set { SetValue(TextEditorSelectionBorderColorProperty, value); } }
        public Brush TextEditorSelectionBorderBrush { get { return (Brush)GetValue(TextEditorSelectionBorderBrushProperty); } private set { SetValue(_TextEditorSelectionBorderBrushPropertyKey, value); } }
        [ThemeProperty("TextEditor")]
        public Color TextEditorSelectionColor { get { return (Color)GetValue(TextEditorSelectionColorProperty); } set { SetValue(TextEditorSelectionColorProperty, value); } }
        public Brush TextEditorSelectionBrush { get { return (Brush)GetValue(TextEditorSelectionBrushProperty); } private set { SetValue(_TextEditorSelectionBrushPropertyKey, value); } }
        [ThemeProperty("TimelineControl")]
        public Color TimelineSelectionBorderColor { get { return (Color)GetValue(TimelineSelectionBorderColorProperty); } set { SetValue(TimelineSelectionBorderColorProperty, value); } }
        public Brush TimelineSelectionBorderBrush { get { return (Brush)GetValue(TimelineSelectionBorderBrushProperty); } private set { SetValue(_TimelineSelectionBorderBrushPropertyKey, value); } }
        [ThemeProperty("TimelineControl")]
        public Color TimelineSelectionColor { get { return (Color)GetValue(TimelineSelectionColorProperty); } set { SetValue(TimelineSelectionColorProperty, value); } }
        public Brush TimelineSelectionBrush { get { return (Brush)GetValue(TimelineSelectionBrushProperty); } private set { SetValue(_TimelineSelectionBrushPropertyKey, value); } }
        [ThemeProperty("TimelineControl")]
        public Color TimelineMousePointColor { get { return (Color)GetValue(TimelineMousePointColorProperty); } set { SetValue(TimelineMousePointColorProperty, value); } }
        public Brush TimelineMousePointBrush { get { return (Brush)GetValue(TimelineMousePointBrushProperty); } private set { SetValue(_TimelineMousePointBrushPropertyKey, value); } }
        [ThemeProperty("TimelineControl")]
        public FontFamily TimelineFontFamily { get { return (FontFamily)GetValue(TimelineFontFamilyProperty); } set { SetValue(TimelineFontFamilyProperty, value); } }
        [ThemeProperty("TimelineControl")]
        public double TimelineFontSize { get { return (double)GetValue(TimelineFontSizeProperty); } set { SetValue(TimelineFontSizeProperty, value); } }
        [ThemeProperty("TimelineControl")]
        public FontWeight TimelineFontWeight { get { return (FontWeight)GetValue(TimelineFontWeightProperty); } set { SetValue(TimelineFontWeightProperty, value); } }
        [ThemeProperty("TimelineControl")]
        public FontStyle TimelineFontStyle { get { return (FontStyle)GetValue(TimelineFontStyleProperty); } set { SetValue(TimelineFontStyleProperty, value); } }
        [ThemeProperty("ToggleButton")]
        public Color ToggleButtonCheckedBackgroundColor { get { return (Color)GetValue(ToggleButtonCheckedBackgroundColorProperty); } set { SetValue(ToggleButtonCheckedBackgroundColorProperty, value); } }
        public Brush ToggleButtonCheckedBackgroundBrush { get { return (Brush)GetValue(ToggleButtonCheckedBackgroundBrushProperty); } private set { SetValue(_ToggleButtonCheckedBackgroundBrushPropertyKey, value); } }
        [ThemeProperty("ToggleButton")]
        public Color ToggleButtonCheckedBorderColor { get { return (Color)GetValue(ToggleButtonCheckedBorderColorProperty); } set { SetValue(ToggleButtonCheckedBorderColorProperty, value); } }
        public Brush ToggleButtonCheckedBorderBrush { get { return (Brush)GetValue(ToggleButtonCheckedBorderBrushProperty); } private set { SetValue(_ToggleButtonCheckedBorderBrushPropertyKey, value); } }
        [ThemeProperty("ToggleButton")]
        public Color ToggleButtonCheckedForegroundColor { get { return (Color)GetValue(ToggleButtonCheckedForegroundColorProperty); } set { SetValue(ToggleButtonCheckedForegroundColorProperty, value); } }
        public Brush ToggleButtonCheckedForegroundBrush { get { return (Brush)GetValue(ToggleButtonCheckedForegroundBrushProperty); } private set { SetValue(_ToggleButtonCheckedForegroundBrushPropertyKey, value); } }
        [ThemeProperty("ToggleButton")]
        public Color ToggleButtonDisabledCheckedBackgroundColor { get { return (Color)GetValue(ToggleButtonDisabledCheckedBackgroundColorProperty); } set { SetValue(ToggleButtonDisabledCheckedBackgroundColorProperty, value); } }
        public Brush ToggleButtonDisabledCheckedBackgroundBrush { get { return (Brush)GetValue(ToggleButtonDisabledCheckedBackgroundBrushProperty); } private set { SetValue(_ToggleButtonDisabledCheckedBackgroundBrushPropertyKey, value); } }
        [ThemeProperty("ToggleButton")]
        public Color ToggleButtonDisabledCheckedBorderColor { get { return (Color)GetValue(ToggleButtonDisabledCheckedBorderColorProperty); } set { SetValue(ToggleButtonDisabledCheckedBorderColorProperty, value); } }
        public Brush ToggleButtonDisabledCheckedBorderBrush { get { return (Brush)GetValue(ToggleButtonDisabledCheckedBorderBrushProperty); } private set { SetValue(_ToggleButtonDisabledCheckedBorderBrushPropertyKey, value); } }
        [ThemeProperty("ToggleButton")]
        public Color ToggleButtonDisabledCheckedForegroundColor { get { return (Color)GetValue(ToggleButtonDisabledCheckedForegroundColorProperty); } set { SetValue(ToggleButtonDisabledCheckedForegroundColorProperty, value); } }
        public Brush ToggleButtonDisabledCheckedForegroundBrush { get { return (Brush)GetValue(ToggleButtonDisabledCheckedForegroundBrushProperty); } private set { SetValue(_ToggleButtonDisabledCheckedForegroundBrushPropertyKey, value); } }
        [ThemeProperty("ToggleButton")]
        public Color ToggleButtonFocusedCheckedBackgroundColor { get { return (Color)GetValue(ToggleButtonFocusedCheckedBackgroundColorProperty); } set { SetValue(ToggleButtonFocusedCheckedBackgroundColorProperty, value); } }
        public Brush ToggleButtonFocusedCheckedBackgroundBrush { get { return (Brush)GetValue(ToggleButtonFocusedCheckedBackgroundBrushProperty); } private set { SetValue(_ToggleButtonFocusedCheckedBackgroundBrushPropertyKey, value); } }
        [ThemeProperty("ToggleButton")]
        public Color ToggleButtonFocusedCheckedBorderColor { get { return (Color)GetValue(ToggleButtonFocusedCheckedBorderColorProperty); } set { SetValue(ToggleButtonFocusedCheckedBorderColorProperty, value); } }
        public Brush ToggleButtonFocusedCheckedBorderBrush { get { return (Brush)GetValue(ToggleButtonFocusedCheckedBorderBrushProperty); } private set { SetValue(_ToggleButtonFocusedCheckedBorderBrushPropertyKey, value); } }
        [ThemeProperty("ToggleButton")]
        public Color ToggleButtonFocusedCheckedForegroundColor { get { return (Color)GetValue(ToggleButtonFocusedCheckedForegroundColorProperty); } set { SetValue(ToggleButtonFocusedCheckedForegroundColorProperty, value); } }
        public Brush ToggleButtonFocusedCheckedForegroundBrush { get { return (Brush)GetValue(ToggleButtonFocusedCheckedForegroundBrushProperty); } private set { SetValue(_ToggleButtonFocusedCheckedForegroundBrushPropertyKey, value); } }
        [ThemeProperty("ToggleButton")]
        public Color ToggleButtonHoverCheckedBackgroundColor { get { return (Color)GetValue(ToggleButtonHoverCheckedBackgroundColorProperty); } set { SetValue(ToggleButtonHoverCheckedBackgroundColorProperty, value); } }
        public Brush ToggleButtonHoverCheckedBackgroundBrush { get { return (Brush)GetValue(ToggleButtonHoverCheckedBackgroundBrushProperty); } private set { SetValue(_ToggleButtonHoverCheckedBackgroundBrushPropertyKey, value); } }
        [ThemeProperty("ToggleButton")]
        public Color ToggleButtonHoverCheckedBorderColor { get { return (Color)GetValue(ToggleButtonHoverCheckedBorderColorProperty); } set { SetValue(ToggleButtonHoverCheckedBorderColorProperty, value); } }
        public Brush ToggleButtonHoverCheckedBorderBrush { get { return (Brush)GetValue(ToggleButtonHoverCheckedBorderBrushProperty); } private set { SetValue(_ToggleButtonHoverCheckedBorderBrushPropertyKey, value); } }
        [ThemeProperty("ToggleButton")]
        public Color ToggleButtonHoverCheckedForegroundColor { get { return (Color)GetValue(ToggleButtonHoverCheckedForegroundColorProperty); } set { SetValue(ToggleButtonHoverCheckedForegroundColorProperty, value); } }
        public Brush ToggleButtonHoverCheckedForegroundBrush { get { return (Brush)GetValue(ToggleButtonHoverCheckedForegroundBrushProperty); } private set { SetValue(_ToggleButtonHoverCheckedForegroundBrushPropertyKey, value); } }
        [ThemeProperty("TreeGrid")]
        public Color TreeGridBackgroundColor { get { return (Color)GetValue(TreeGridBackgroundColorProperty); } set { SetValue(TreeGridBackgroundColorProperty, value); } }
        public Brush TreeGridBackgroundBrush { get { return (Brush)GetValue(TreeGridBackgroundBrushProperty); } private set { SetValue(_TreeGridBackgroundBrushPropertyKey, value); } }
        [ThemeProperty("TreeGrid")]
        public Color TreeGridCurrentRowBorderColor { get { return (Color)GetValue(TreeGridCurrentRowBorderColorProperty); } set { SetValue(TreeGridCurrentRowBorderColorProperty, value); } }
        public Brush TreeGridCurrentRowBorderBrush { get { return (Brush)GetValue(TreeGridCurrentRowBorderBrushProperty); } private set { SetValue(_TreeGridCurrentRowBorderBrushPropertyKey, value); } }
        [ThemeProperty("TreeGrid")]
        public Color TreeGridFocusedCurrentRowBorderColor { get { return (Color)GetValue(TreeGridFocusedCurrentRowBorderColorProperty); } set { SetValue(TreeGridFocusedCurrentRowBorderColorProperty, value); } }
        public Brush TreeGridFocusedCurrentRowBorderBrush { get { return (Brush)GetValue(TreeGridFocusedCurrentRowBorderBrushProperty); } private set { SetValue(_TreeGridFocusedCurrentRowBorderBrushPropertyKey, value); } }
        [ThemeProperty("TreeGrid")]
        public Color TreeGridFocusedSelectedBackgroundColor { get { return (Color)GetValue(TreeGridFocusedSelectedBackgroundColorProperty); } set { SetValue(TreeGridFocusedSelectedBackgroundColorProperty, value); } }
        public Brush TreeGridFocusedSelectedBackgroundBrush { get { return (Brush)GetValue(TreeGridFocusedSelectedBackgroundBrushProperty); } private set { SetValue(_TreeGridFocusedSelectedBackgroundBrushPropertyKey, value); } }
        [ThemeProperty("TreeGrid")]
        public Color TreeGridFocusedSelectedForegroundColor { get { return (Color)GetValue(TreeGridFocusedSelectedForegroundColorProperty); } set { SetValue(TreeGridFocusedSelectedForegroundColorProperty, value); } }
        public Brush TreeGridFocusedSelectedForegroundBrush { get { return (Brush)GetValue(TreeGridFocusedSelectedForegroundBrushProperty); } private set { SetValue(_TreeGridFocusedSelectedForegroundBrushPropertyKey, value); } }
        [ThemeProperty("TreeGrid")]
        public Color TreeGridForegroundColor { get { return (Color)GetValue(TreeGridForegroundColorProperty); } set { SetValue(TreeGridForegroundColorProperty, value); } }
        public Brush TreeGridForegroundBrush { get { return (Brush)GetValue(TreeGridForegroundBrushProperty); } private set { SetValue(_TreeGridForegroundBrushPropertyKey, value); } }
        [ThemeProperty("TreeGrid")]
        public Color TreeGridHeaderBackgroundColor { get { return (Color)GetValue(TreeGridHeaderBackgroundColorProperty); } set { SetValue(TreeGridHeaderBackgroundColorProperty, value); } }
        public Brush TreeGridHeaderBackgroundBrush { get { return (Brush)GetValue(TreeGridHeaderBackgroundBrushProperty); } private set { SetValue(_TreeGridHeaderBackgroundBrushPropertyKey, value); } }
        [ThemeProperty("TreeGrid")]
        public Color TreeGridHeaderFocusedBackgroundColor { get { return (Color)GetValue(TreeGridHeaderFocusedBackgroundColorProperty); } set { SetValue(TreeGridHeaderFocusedBackgroundColorProperty, value); } }
        public Brush TreeGridHeaderFocusedBackgroundBrush { get { return (Brush)GetValue(TreeGridHeaderFocusedBackgroundBrushProperty); } private set { SetValue(_TreeGridHeaderFocusedBackgroundBrushPropertyKey, value); } }
        [ThemeProperty("TreeGrid")]
        public Color TreeGridHeaderFocusedForegroundColor { get { return (Color)GetValue(TreeGridHeaderFocusedForegroundColorProperty); } set { SetValue(TreeGridHeaderFocusedForegroundColorProperty, value); } }
        public Brush TreeGridHeaderFocusedForegroundBrush { get { return (Brush)GetValue(TreeGridHeaderFocusedForegroundBrushProperty); } private set { SetValue(_TreeGridHeaderFocusedForegroundBrushPropertyKey, value); } }
        [ThemeProperty("TreeGrid")]
        public Color TreeGridHeaderFocusedHoverBackgroundColor { get { return (Color)GetValue(TreeGridHeaderFocusedHoverBackgroundColorProperty); } set { SetValue(TreeGridHeaderFocusedHoverBackgroundColorProperty, value); } }
        public Brush TreeGridHeaderFocusedHoverBackgroundBrush { get { return (Brush)GetValue(TreeGridHeaderFocusedHoverBackgroundBrushProperty); } private set { SetValue(_TreeGridHeaderFocusedHoverBackgroundBrushPropertyKey, value); } }
        [ThemeProperty("TreeGrid")]
        public Color TreeGridHeaderFocusedHoverForegroundColor { get { return (Color)GetValue(TreeGridHeaderFocusedHoverForegroundColorProperty); } set { SetValue(TreeGridHeaderFocusedHoverForegroundColorProperty, value); } }
        public Brush TreeGridHeaderFocusedHoverForegroundBrush { get { return (Brush)GetValue(TreeGridHeaderFocusedHoverForegroundBrushProperty); } private set { SetValue(_TreeGridHeaderFocusedHoverForegroundBrushPropertyKey, value); } }
        [ThemeProperty("TreeGrid")]
        public FontFamily TreeGridHeaderFontFamily { get { return (FontFamily)GetValue(TreeGridHeaderFontFamilyProperty); } set { SetValue(TreeGridHeaderFontFamilyProperty, value); } }
        [ThemeProperty("TreeGrid")]
        public double TreeGridHeaderFontSize { get { return (double)GetValue(TreeGridHeaderFontSizeProperty); } set { SetValue(TreeGridHeaderFontSizeProperty, value); } }
        [ThemeProperty("TreeGrid")]
        public FontWeight TreeGridHeaderFontWeight { get { return (FontWeight)GetValue(TreeGridHeaderFontWeightProperty); } set { SetValue(TreeGridHeaderFontWeightProperty, value); } }
        [ThemeProperty("TreeGrid")]
        public FontStyle TreeGridHeaderFontStyle { get { return (FontStyle)GetValue(TreeGridHeaderFontStyleProperty); } set { SetValue(TreeGridHeaderFontStyleProperty, value); } }
        [ThemeProperty("TreeGrid")]
        public Color TreeGridHeaderForegroundColor { get { return (Color)GetValue(TreeGridHeaderForegroundColorProperty); } set { SetValue(TreeGridHeaderForegroundColorProperty, value); } }
        public Brush TreeGridHeaderForegroundBrush { get { return (Brush)GetValue(TreeGridHeaderForegroundBrushProperty); } private set { SetValue(_TreeGridHeaderForegroundBrushPropertyKey, value); } }
        [ThemeProperty("TreeGrid")]
        public Color TreeGridHeaderHoverBackgroundColor { get { return (Color)GetValue(TreeGridHeaderHoverBackgroundColorProperty); } set { SetValue(TreeGridHeaderHoverBackgroundColorProperty, value); } }
        public Brush TreeGridHeaderHoverBackgroundBrush { get { return (Brush)GetValue(TreeGridHeaderHoverBackgroundBrushProperty); } private set { SetValue(_TreeGridHeaderHoverBackgroundBrushPropertyKey, value); } }
        [ThemeProperty("TreeGrid")]
        public Color TreeGridHeaderHoverForegroundColor { get { return (Color)GetValue(TreeGridHeaderHoverForegroundColorProperty); } set { SetValue(TreeGridHeaderHoverForegroundColorProperty, value); } }
        public Brush TreeGridHeaderHoverForegroundBrush { get { return (Brush)GetValue(TreeGridHeaderHoverForegroundBrushProperty); } private set { SetValue(_TreeGridHeaderHoverForegroundBrushPropertyKey, value); } }
        [ThemeProperty("TreeGrid")]
        public Color TreeGridHeaderPressedBackgroundColor { get { return (Color)GetValue(TreeGridHeaderPressedBackgroundColorProperty); } set { SetValue(TreeGridHeaderPressedBackgroundColorProperty, value); } }
        public Brush TreeGridHeaderPressedBackgroundBrush { get { return (Brush)GetValue(TreeGridHeaderPressedBackgroundBrushProperty); } private set { SetValue(_TreeGridHeaderPressedBackgroundBrushPropertyKey, value); } }
        [ThemeProperty("TreeGrid")]
        public Color TreeGridHeaderPressedForegroundColor { get { return (Color)GetValue(TreeGridHeaderPressedForegroundColorProperty); } set { SetValue(TreeGridHeaderPressedForegroundColorProperty, value); } }
        public Brush TreeGridHeaderPressedForegroundBrush { get { return (Brush)GetValue(TreeGridHeaderPressedForegroundBrushProperty); } private set { SetValue(_TreeGridHeaderPressedForegroundBrushPropertyKey, value); } }
        [ThemeProperty("TreeGrid")]
        public Color TreeGridLinesColor { get { return (Color)GetValue(TreeGridLinesColorProperty); } set { SetValue(TreeGridLinesColorProperty, value); } }
        public Brush TreeGridLinesBrush { get { return (Brush)GetValue(TreeGridLinesBrushProperty); } private set { SetValue(_TreeGridLinesBrushPropertyKey, value); } }
        [ThemeProperty("TreeGrid")]
        public Color TreeGridSelectedBackgroundColor { get { return (Color)GetValue(TreeGridSelectedBackgroundColorProperty); } set { SetValue(TreeGridSelectedBackgroundColorProperty, value); } }
        public Brush TreeGridSelectedBackgroundBrush { get { return (Brush)GetValue(TreeGridSelectedBackgroundBrushProperty); } private set { SetValue(_TreeGridSelectedBackgroundBrushPropertyKey, value); } }
        [ThemeProperty("TreeGrid")]
        public Color TreeGridSelectedForegroundColor { get { return (Color)GetValue(TreeGridSelectedForegroundColorProperty); } set { SetValue(TreeGridSelectedForegroundColorProperty, value); } }
        public Brush TreeGridSelectedForegroundBrush { get { return (Brush)GetValue(TreeGridSelectedForegroundBrushProperty); } private set { SetValue(_TreeGridSelectedForegroundBrushPropertyKey, value); } }
        [ThemeProperty("TreeView")]
        public Color TreeViewItemFocusedSelectedBackgroundColor { get { return (Color)GetValue(TreeViewItemFocusedSelectedBackgroundColorProperty); } set { SetValue(TreeViewItemFocusedSelectedBackgroundColorProperty, value); } }
        public Brush TreeViewItemFocusedSelectedBackgroundBrush { get { return (Brush)GetValue(TreeViewItemFocusedSelectedBackgroundBrushProperty); } private set { SetValue(_TreeViewItemFocusedSelectedBackgroundBrushPropertyKey, value); } }
        [ThemeProperty("TreeView")]
        public Color TreeViewItemFocusedSelectedForegroundColor { get { return (Color)GetValue(TreeViewItemFocusedSelectedForegroundColorProperty); } set { SetValue(TreeViewItemFocusedSelectedForegroundColorProperty, value); } }
        public Brush TreeViewItemFocusedSelectedForegroundBrush { get { return (Brush)GetValue(TreeViewItemFocusedSelectedForegroundBrushProperty); } private set { SetValue(_TreeViewItemFocusedSelectedForegroundBrushPropertyKey, value); } }
        [ThemeProperty("TreeView")]
        public Thickness TreeViewItemMargin { get { return (Thickness)GetValue(TreeViewItemMarginProperty); } set { SetValue(TreeViewItemMarginProperty, value); } }
        [ThemeProperty("TreeView")]
        public Color TreeViewItemSelectedBackgroundColor { get { return (Color)GetValue(TreeViewItemSelectedBackgroundColorProperty); } set { SetValue(TreeViewItemSelectedBackgroundColorProperty, value); } }
        public Brush TreeViewItemSelectedBackgroundBrush { get { return (Brush)GetValue(TreeViewItemSelectedBackgroundBrushProperty); } private set { SetValue(_TreeViewItemSelectedBackgroundBrushPropertyKey, value); } }
        [ThemeProperty("TreeView")]
        public Color TreeViewItemSelectedForegroundColor { get { return (Color)GetValue(TreeViewItemSelectedForegroundColorProperty); } set { SetValue(TreeViewItemSelectedForegroundColorProperty, value); } }
        public Brush TreeViewItemSelectedForegroundBrush { get { return (Brush)GetValue(TreeViewItemSelectedForegroundBrushProperty); } private set { SetValue(_TreeViewItemSelectedForegroundBrushPropertyKey, value); } }
        [ThemeProperty("View")]
        public Color ViewBackgroundColor { get { return (Color)GetValue(ViewBackgroundColorProperty); } set { SetValue(ViewBackgroundColorProperty, value); } }
        public Brush ViewBackgroundBrush { get { return (Brush)GetValue(ViewBackgroundBrushProperty); } private set { SetValue(_ViewBackgroundBrushPropertyKey, value); } }
        [ThemeProperty("View")]
        public Color ViewBorderColor { get { return (Color)GetValue(ViewBorderColorProperty); } set { SetValue(ViewBorderColorProperty, value); } }
        public Brush ViewBorderBrush { get { return (Brush)GetValue(ViewBorderBrushProperty); } private set { SetValue(_ViewBorderBrushPropertyKey, value); } }
        [ThemeProperty("View")]
        public Thickness ViewBorderThickness { get { return (Thickness)GetValue(ViewBorderThicknessProperty); } set { SetValue(ViewBorderThicknessProperty, value); } }
        [ThemeProperty("View")]
        public Thickness ViewMargin { get { return (Thickness)GetValue(ViewMarginProperty); } set { SetValue(ViewMarginProperty, value); } }
        [ThemeProperty("View")]
        public double ViewSpacing { get { return (double)GetValue(ViewSpacingProperty); } set { SetValue(ViewSpacingProperty, value); } }
        [ThemeProperty("ViewLayoutEditor")]
        public FontFamily ViewGroupHeaderFontFamily { get { return (FontFamily)GetValue(ViewGroupHeaderFontFamilyProperty); } set { SetValue(ViewGroupHeaderFontFamilyProperty, value); } }
        [ThemeProperty("ViewLayoutEditor")]
        public double ViewGroupHeaderFontSize { get { return (double)GetValue(ViewGroupHeaderFontSizeProperty); } set { SetValue(ViewGroupHeaderFontSizeProperty, value); } }
        [ThemeProperty("ViewLayoutEditor")]
        public FontWeight ViewGroupHeaderFontWeight { get { return (FontWeight)GetValue(ViewGroupHeaderFontWeightProperty); } set { SetValue(ViewGroupHeaderFontWeightProperty, value); } }
        [ThemeProperty("ViewLayoutEditor")]
        public FontStyle ViewGroupHeaderFontStyle { get { return (FontStyle)GetValue(ViewGroupHeaderFontStyleProperty); } set { SetValue(ViewGroupHeaderFontStyleProperty, value); } }
        [ThemeProperty("Window")]
        public Color AccentBackgroundColor { get { return (Color)GetValue(AccentBackgroundColorProperty); } set { SetValue(AccentBackgroundColorProperty, value); } }
        public Brush AccentBackgroundBrush { get { return (Brush)GetValue(AccentBackgroundBrushProperty); } private set { SetValue(_AccentBackgroundBrushPropertyKey, value); } }
        [ThemeProperty("Window")]
        public Color AccentForegroundColor { get { return (Color)GetValue(AccentForegroundColorProperty); } set { SetValue(AccentForegroundColorProperty, value); } }
        public Brush AccentForegroundBrush { get { return (Brush)GetValue(AccentForegroundBrushProperty); } private set { SetValue(_AccentForegroundBrushPropertyKey, value); } }
        [ThemeProperty("Window")]
        public Color TitleBarButtonBackgroundColor { get { return (Color)GetValue(TitleBarButtonBackgroundColorProperty); } set { SetValue(TitleBarButtonBackgroundColorProperty, value); } }
        public Brush TitleBarButtonBackgroundBrush { get { return (Brush)GetValue(TitleBarButtonBackgroundBrushProperty); } private set { SetValue(_TitleBarButtonBackgroundBrushPropertyKey, value); } }
        [ThemeProperty("Window")]
        public Color TitleBarButtonForegroundColor { get { return (Color)GetValue(TitleBarButtonForegroundColorProperty); } set { SetValue(TitleBarButtonForegroundColorProperty, value); } }
        public Brush TitleBarButtonForegroundBrush { get { return (Brush)GetValue(TitleBarButtonForegroundBrushProperty); } private set { SetValue(_TitleBarButtonForegroundBrushPropertyKey, value); } }
        [ThemeProperty("Window")]
        public Color TitleBarButtonHoverBackgroundColor { get { return (Color)GetValue(TitleBarButtonHoverBackgroundColorProperty); } set { SetValue(TitleBarButtonHoverBackgroundColorProperty, value); } }
        public Brush TitleBarButtonHoverBackgroundBrush { get { return (Brush)GetValue(TitleBarButtonHoverBackgroundBrushProperty); } private set { SetValue(_TitleBarButtonHoverBackgroundBrushPropertyKey, value); } }
        [ThemeProperty("Window")]
        public Color TitleBarButtonHoverForegroundColor { get { return (Color)GetValue(TitleBarButtonHoverForegroundColorProperty); } set { SetValue(TitleBarButtonHoverForegroundColorProperty, value); } }
        public Brush TitleBarButtonHoverForegroundBrush { get { return (Brush)GetValue(TitleBarButtonHoverForegroundBrushProperty); } private set { SetValue(_TitleBarButtonHoverForegroundBrushPropertyKey, value); } }
        [ThemeProperty("Window")]
        public Color TitleBarButtonPressedBackgroundColor { get { return (Color)GetValue(TitleBarButtonPressedBackgroundColorProperty); } set { SetValue(TitleBarButtonPressedBackgroundColorProperty, value); } }
        public Brush TitleBarButtonPressedBackgroundBrush { get { return (Brush)GetValue(TitleBarButtonPressedBackgroundBrushProperty); } private set { SetValue(_TitleBarButtonPressedBackgroundBrushPropertyKey, value); } }
        [ThemeProperty("Window")]
        public Color TitleBarButtonPressedForegroundColor { get { return (Color)GetValue(TitleBarButtonPressedForegroundColorProperty); } set { SetValue(TitleBarButtonPressedForegroundColorProperty, value); } }
        public Brush TitleBarButtonPressedForegroundBrush { get { return (Brush)GetValue(TitleBarButtonPressedForegroundBrushProperty); } private set { SetValue(_TitleBarButtonPressedForegroundBrushPropertyKey, value); } }


        public BaseTheme()
        {
            SetBindings();
        }

        void SetBindings()
        {
            var palette = this.Palette.ToDictionary(pc => pc.Name);

            if (!palette.ContainsKey("Black"))
            {
                var pc = new PaletteColor { Name = "Black", Color = Color.FromArgb(0xFF, 0x00, 0x00, 0x00) };
                palette["Black"] = pc;
                this.Palette.Add(pc);
            }

            if (!palette.ContainsKey("White"))
            {
                var pc = new PaletteColor { Name = "White", Color = Color.FromArgb(0xFF, 0xFF, 0xFF, 0xFF) };
                palette["White"] = pc;
                this.Palette.Add(pc);
            }

            if (!palette.ContainsKey("Gray"))
            {
                var pc = new PaletteColor { Name = "Gray", Color = Color.FromArgb(0xFF, 0x80, 0x80, 0x80) };
                palette["Gray"] = pc;
                this.Palette.Add(pc);
            }

            if (!palette.ContainsKey("MediumGray"))
            {
                var pc = new PaletteColor { Name = "MediumGray", Color = Color.FromArgb(0xFF, 0xB8, 0xB8, 0xB8) };
                palette["MediumGray"] = pc;
                this.Palette.Add(pc);
            }

            if (!palette.ContainsKey("LightGray"))
            {
                var pc = new PaletteColor { Name = "LightGray", Color = Color.FromArgb(0xFF, 0xD9, 0xD9, 0xD9) };
                palette["LightGray"] = pc;
                this.Palette.Add(pc);
            }

            if (!palette.ContainsKey("LighterGray"))
            {
                var pc = new PaletteColor { Name = "LighterGray", Color = Color.FromArgb(0xFF, 0xE5, 0xE5, 0xE5) };
                palette["LighterGray"] = pc;
                this.Palette.Add(pc);
            }

            if (!palette.ContainsKey("XboxGreen"))
            {
                var pc = new PaletteColor { Name = "XboxGreen", Color = Color.FromArgb(0xFF, 0x10, 0x7C, 0x0F) };
                palette["XboxGreen"] = pc;
                this.Palette.Add(pc);
            }

            if (!palette.ContainsKey("XboxGreenLight"))
            {
                var pc = new PaletteColor { Name = "XboxGreenLight", Color = Color.FromArgb(0xFF, 0xC4, 0xEE, 0xB3) };
                palette["XboxGreenLight"] = pc;
                this.Palette.Add(pc);
            }

            if (!palette.ContainsKey("XboxGreenMedium"))
            {
                var pc = new PaletteColor { Name = "XboxGreenMedium", Color = Color.FromArgb(0xFF, 0x3F, 0xAC, 0x30) };
                palette["XboxGreenMedium"] = pc;
                this.Palette.Add(pc);
            }

            if (!palette.ContainsKey("XboxGreenDark"))
            {
                var pc = new PaletteColor { Name = "XboxGreenDark", Color = Color.FromArgb(0xFF, 0x10, 0x66, 0x0F) };
                palette["XboxGreenDark"] = pc;
                this.Palette.Add(pc);
            }

            if (!palette.ContainsKey("Transparent"))
            {
                var pc = new PaletteColor { Name = "Transparent", Color = Color.FromArgb(0x00, 0xFF, 0xFF, 0xFF) };
                palette["Transparent"] = pc;
                this.Palette.Add(pc);
            }

            if (!palette.ContainsKey("TimelineSelection"))
            {
                var pc = new PaletteColor { Name = "TimelineSelection", Color = Color.FromArgb(0x86, 0xC4, 0xEE, 0xB3) };
                palette["TimelineSelection"] = pc;
                this.Palette.Add(pc);
            }

            this.BladePageHoverBackgroundBrush = new SolidColorBrush();
            BindingOperations.SetBinding(this.BladePageHoverBackgroundBrush, SolidColorBrush.ColorProperty, new Binding { Source = this, Path = new PropertyPath(BladePageHoverBackgroundColorProperty) });
            BindingOperations.SetBinding(this, BladePageHoverBackgroundColorProperty, new Binding { Source = palette["LightGray"], Path = new PropertyPath(PaletteColor.ColorProperty) });
            this.BladePageHoverForegroundBrush = new SolidColorBrush();
            BindingOperations.SetBinding(this.BladePageHoverForegroundBrush, SolidColorBrush.ColorProperty, new Binding { Source = this, Path = new PropertyPath(BladePageHoverForegroundColorProperty) });
            BindingOperations.SetBinding(this, BladePageHoverForegroundColorProperty, new Binding { Source = palette["Black"], Path = new PropertyPath(PaletteColor.ColorProperty) });
            this.ComboBoxDropdownBackgroundBrush = new SolidColorBrush();
            BindingOperations.SetBinding(this.ComboBoxDropdownBackgroundBrush, SolidColorBrush.ColorProperty, new Binding { Source = this, Path = new PropertyPath(ComboBoxDropdownBackgroundColorProperty) });
            BindingOperations.SetBinding(this, ComboBoxDropdownBackgroundColorProperty, new Binding { Source = palette["White"], Path = new PropertyPath(PaletteColor.ColorProperty) });
            this.ComboBoxItemHighlightedBackgroundBrush = new SolidColorBrush();
            BindingOperations.SetBinding(this.ComboBoxItemHighlightedBackgroundBrush, SolidColorBrush.ColorProperty, new Binding { Source = this, Path = new PropertyPath(ComboBoxItemHighlightedBackgroundColorProperty) });
            BindingOperations.SetBinding(this, ComboBoxItemHighlightedBackgroundColorProperty, new Binding { Source = palette["XboxGreenLight"], Path = new PropertyPath(PaletteColor.ColorProperty) });
            this.ComboBoxItemHighlightedForegroundBrush = new SolidColorBrush();
            BindingOperations.SetBinding(this.ComboBoxItemHighlightedForegroundBrush, SolidColorBrush.ColorProperty, new Binding { Source = this, Path = new PropertyPath(ComboBoxItemHighlightedForegroundColorProperty) });
            BindingOperations.SetBinding(this, ComboBoxItemHighlightedForegroundColorProperty, new Binding { Source = palette["Black"], Path = new PropertyPath(PaletteColor.ColorProperty) });
            this.ComboBoxItemSelectedBackgroundBrush = new SolidColorBrush();
            BindingOperations.SetBinding(this.ComboBoxItemSelectedBackgroundBrush, SolidColorBrush.ColorProperty, new Binding { Source = this, Path = new PropertyPath(ComboBoxItemSelectedBackgroundColorProperty) });
            BindingOperations.SetBinding(this, ComboBoxItemSelectedBackgroundColorProperty, new Binding { Source = palette["XboxGreen"], Path = new PropertyPath(PaletteColor.ColorProperty) });
            this.ComboBoxItemSelectedForegroundBrush = new SolidColorBrush();
            BindingOperations.SetBinding(this.ComboBoxItemSelectedForegroundBrush, SolidColorBrush.ColorProperty, new Binding { Source = this, Path = new PropertyPath(ComboBoxItemSelectedForegroundColorProperty) });
            BindingOperations.SetBinding(this, ComboBoxItemSelectedForegroundColorProperty, new Binding { Source = palette["White"], Path = new PropertyPath(PaletteColor.ColorProperty) });
            this.ControlBackgroundBrush = new SolidColorBrush();
            BindingOperations.SetBinding(this.ControlBackgroundBrush, SolidColorBrush.ColorProperty, new Binding { Source = this, Path = new PropertyPath(ControlBackgroundColorProperty) });
            BindingOperations.SetBinding(this, ControlBackgroundColorProperty, new Binding { Source = palette["White"], Path = new PropertyPath(PaletteColor.ColorProperty) });
            this.ControlBorderBrush = new SolidColorBrush();
            BindingOperations.SetBinding(this.ControlBorderBrush, SolidColorBrush.ColorProperty, new Binding { Source = this, Path = new PropertyPath(ControlBorderColorProperty) });
            BindingOperations.SetBinding(this, ControlBorderColorProperty, new Binding { Source = palette["Gray"], Path = new PropertyPath(PaletteColor.ColorProperty) });
            this.ControlDisabledBackgroundBrush = new SolidColorBrush();
            BindingOperations.SetBinding(this.ControlDisabledBackgroundBrush, SolidColorBrush.ColorProperty, new Binding { Source = this, Path = new PropertyPath(ControlDisabledBackgroundColorProperty) });
            BindingOperations.SetBinding(this, ControlDisabledBackgroundColorProperty, new Binding { Source = palette["White"], Path = new PropertyPath(PaletteColor.ColorProperty) });
            this.ControlDisabledBorderBrush = new SolidColorBrush();
            BindingOperations.SetBinding(this.ControlDisabledBorderBrush, SolidColorBrush.ColorProperty, new Binding { Source = this, Path = new PropertyPath(ControlDisabledBorderColorProperty) });
            BindingOperations.SetBinding(this, ControlDisabledBorderColorProperty, new Binding { Source = palette["LighterGray"], Path = new PropertyPath(PaletteColor.ColorProperty) });
            this.ControlDisabledForegroundBrush = new SolidColorBrush();
            BindingOperations.SetBinding(this.ControlDisabledForegroundBrush, SolidColorBrush.ColorProperty, new Binding { Source = this, Path = new PropertyPath(ControlDisabledForegroundColorProperty) });
            BindingOperations.SetBinding(this, ControlDisabledForegroundColorProperty, new Binding { Source = palette["Gray"], Path = new PropertyPath(PaletteColor.ColorProperty) });
            this.ControlFocusedBackgroundBrush = new SolidColorBrush();
            BindingOperations.SetBinding(this.ControlFocusedBackgroundBrush, SolidColorBrush.ColorProperty, new Binding { Source = this, Path = new PropertyPath(ControlFocusedBackgroundColorProperty) });
            BindingOperations.SetBinding(this, ControlFocusedBackgroundColorProperty, new Binding { Source = palette["White"], Path = new PropertyPath(PaletteColor.ColorProperty) });
            this.ControlFocusedBorderBrush = new SolidColorBrush();
            BindingOperations.SetBinding(this.ControlFocusedBorderBrush, SolidColorBrush.ColorProperty, new Binding { Source = this, Path = new PropertyPath(ControlFocusedBorderColorProperty) });
            BindingOperations.SetBinding(this, ControlFocusedBorderColorProperty, new Binding { Source = palette["XboxGreen"], Path = new PropertyPath(PaletteColor.ColorProperty) });
            this.ControlFocusedForegroundBrush = new SolidColorBrush();
            BindingOperations.SetBinding(this.ControlFocusedForegroundBrush, SolidColorBrush.ColorProperty, new Binding { Source = this, Path = new PropertyPath(ControlFocusedForegroundColorProperty) });
            BindingOperations.SetBinding(this, ControlFocusedForegroundColorProperty, new Binding { Source = palette["Black"], Path = new PropertyPath(PaletteColor.ColorProperty) });
            this.ControlFocusedHoverBackgroundBrush = new SolidColorBrush();
            BindingOperations.SetBinding(this.ControlFocusedHoverBackgroundBrush, SolidColorBrush.ColorProperty, new Binding { Source = this, Path = new PropertyPath(ControlFocusedHoverBackgroundColorProperty) });
            BindingOperations.SetBinding(this, ControlFocusedHoverBackgroundColorProperty, new Binding { Source = palette["XboxGreenLight"], Path = new PropertyPath(PaletteColor.ColorProperty) });
            this.ControlFocusedHoverBorderBrush = new SolidColorBrush();
            BindingOperations.SetBinding(this.ControlFocusedHoverBorderBrush, SolidColorBrush.ColorProperty, new Binding { Source = this, Path = new PropertyPath(ControlFocusedHoverBorderColorProperty) });
            BindingOperations.SetBinding(this, ControlFocusedHoverBorderColorProperty, new Binding { Source = palette["Black"], Path = new PropertyPath(PaletteColor.ColorProperty) });
            this.ControlFocusedHoverForegroundBrush = new SolidColorBrush();
            BindingOperations.SetBinding(this.ControlFocusedHoverForegroundBrush, SolidColorBrush.ColorProperty, new Binding { Source = this, Path = new PropertyPath(ControlFocusedHoverForegroundColorProperty) });
            BindingOperations.SetBinding(this, ControlFocusedHoverForegroundColorProperty, new Binding { Source = palette["Black"], Path = new PropertyPath(PaletteColor.ColorProperty) });
            this.ControlForegroundBrush = new SolidColorBrush();
            BindingOperations.SetBinding(this.ControlForegroundBrush, SolidColorBrush.ColorProperty, new Binding { Source = this, Path = new PropertyPath(ControlForegroundColorProperty) });
            BindingOperations.SetBinding(this, ControlForegroundColorProperty, new Binding { Source = palette["Black"], Path = new PropertyPath(PaletteColor.ColorProperty) });
            this.ControlHoverBackgroundBrush = new SolidColorBrush();
            BindingOperations.SetBinding(this.ControlHoverBackgroundBrush, SolidColorBrush.ColorProperty, new Binding { Source = this, Path = new PropertyPath(ControlHoverBackgroundColorProperty) });
            BindingOperations.SetBinding(this, ControlHoverBackgroundColorProperty, new Binding { Source = palette["LightGray"], Path = new PropertyPath(PaletteColor.ColorProperty) });
            this.ControlHoverBorderBrush = new SolidColorBrush();
            BindingOperations.SetBinding(this.ControlHoverBorderBrush, SolidColorBrush.ColorProperty, new Binding { Source = this, Path = new PropertyPath(ControlHoverBorderColorProperty) });
            BindingOperations.SetBinding(this, ControlHoverBorderColorProperty, new Binding { Source = palette["Black"], Path = new PropertyPath(PaletteColor.ColorProperty) });
            this.ControlHoverForegroundBrush = new SolidColorBrush();
            BindingOperations.SetBinding(this.ControlHoverForegroundBrush, SolidColorBrush.ColorProperty, new Binding { Source = this, Path = new PropertyPath(ControlHoverForegroundColorProperty) });
            BindingOperations.SetBinding(this, ControlHoverForegroundColorProperty, new Binding { Source = palette["Black"], Path = new PropertyPath(PaletteColor.ColorProperty) });
            this.ControlPressedBackgroundBrush = new SolidColorBrush();
            BindingOperations.SetBinding(this.ControlPressedBackgroundBrush, SolidColorBrush.ColorProperty, new Binding { Source = this, Path = new PropertyPath(ControlPressedBackgroundColorProperty) });
            BindingOperations.SetBinding(this, ControlPressedBackgroundColorProperty, new Binding { Source = palette["XboxGreen"], Path = new PropertyPath(PaletteColor.ColorProperty) });
            this.ControlPressedBorderBrush = new SolidColorBrush();
            BindingOperations.SetBinding(this.ControlPressedBorderBrush, SolidColorBrush.ColorProperty, new Binding { Source = this, Path = new PropertyPath(ControlPressedBorderColorProperty) });
            BindingOperations.SetBinding(this, ControlPressedBorderColorProperty, new Binding { Source = palette["White"], Path = new PropertyPath(PaletteColor.ColorProperty) });
            this.ControlPressedForegroundBrush = new SolidColorBrush();
            BindingOperations.SetBinding(this.ControlPressedForegroundBrush, SolidColorBrush.ColorProperty, new Binding { Source = this, Path = new PropertyPath(ControlPressedForegroundColorProperty) });
            BindingOperations.SetBinding(this, ControlPressedForegroundColorProperty, new Binding { Source = palette["White"], Path = new PropertyPath(PaletteColor.ColorProperty) });
            this.DarkFocusVisualBrush = new SolidColorBrush();
            BindingOperations.SetBinding(this.DarkFocusVisualBrush, SolidColorBrush.ColorProperty, new Binding { Source = this, Path = new PropertyPath(DarkFocusVisualColorProperty) });
            BindingOperations.SetBinding(this, DarkFocusVisualColorProperty, new Binding { Source = palette["Black"], Path = new PropertyPath(PaletteColor.ColorProperty) });
            this.LightFocusVisualBrush = new SolidColorBrush();
            BindingOperations.SetBinding(this.LightFocusVisualBrush, SolidColorBrush.ColorProperty, new Binding { Source = this, Path = new PropertyPath(LightFocusVisualColorProperty) });
            BindingOperations.SetBinding(this, LightFocusVisualColorProperty, new Binding { Source = palette["White"], Path = new PropertyPath(PaletteColor.ColorProperty) });
            this.EventLaneFocusedBackgroundBrush = new SolidColorBrush();
            BindingOperations.SetBinding(this.EventLaneFocusedBackgroundBrush, SolidColorBrush.ColorProperty, new Binding { Source = this, Path = new PropertyPath(EventLaneFocusedBackgroundColorProperty) });
            BindingOperations.SetBinding(this, EventLaneFocusedBackgroundColorProperty, new Binding { Source = palette["White"], Path = new PropertyPath(PaletteColor.ColorProperty) });
            this.EventLaneFocusedForegroundBrush = new SolidColorBrush();
            BindingOperations.SetBinding(this.EventLaneFocusedForegroundBrush, SolidColorBrush.ColorProperty, new Binding { Source = this, Path = new PropertyPath(EventLaneFocusedForegroundColorProperty) });
            BindingOperations.SetBinding(this, EventLaneFocusedForegroundColorProperty, new Binding { Source = palette["Black"], Path = new PropertyPath(PaletteColor.ColorProperty) });
            this.EventLaneFocusedSelectionBackgroundBrush = new SolidColorBrush();
            BindingOperations.SetBinding(this.EventLaneFocusedSelectionBackgroundBrush, SolidColorBrush.ColorProperty, new Binding { Source = this, Path = new PropertyPath(EventLaneFocusedSelectionBackgroundColorProperty) });
            BindingOperations.SetBinding(this, EventLaneFocusedSelectionBackgroundColorProperty, new Binding { Source = palette["White"], Path = new PropertyPath(PaletteColor.ColorProperty) });
            this.EventLaneFocusedSelectionForegroundBrush = new SolidColorBrush();
            BindingOperations.SetBinding(this.EventLaneFocusedSelectionForegroundBrush, SolidColorBrush.ColorProperty, new Binding { Source = this, Path = new PropertyPath(EventLaneFocusedSelectionForegroundColorProperty) });
            BindingOperations.SetBinding(this, EventLaneFocusedSelectionForegroundColorProperty, new Binding { Source = palette["Black"], Path = new PropertyPath(PaletteColor.ColorProperty) });
            this.EventLaneSelectionBackgroundBrush = new SolidColorBrush();
            BindingOperations.SetBinding(this.EventLaneSelectionBackgroundBrush, SolidColorBrush.ColorProperty, new Binding { Source = this, Path = new PropertyPath(EventLaneSelectionBackgroundColorProperty) });
            BindingOperations.SetBinding(this, EventLaneSelectionBackgroundColorProperty, new Binding { Source = palette["White"], Path = new PropertyPath(PaletteColor.ColorProperty) });
            this.EventLaneSelectionForegroundBrush = new SolidColorBrush();
            BindingOperations.SetBinding(this.EventLaneSelectionForegroundBrush, SolidColorBrush.ColorProperty, new Binding { Source = this, Path = new PropertyPath(EventLaneSelectionForegroundColorProperty) });
            BindingOperations.SetBinding(this, EventLaneSelectionForegroundColorProperty, new Binding { Source = palette["Black"], Path = new PropertyPath(PaletteColor.ColorProperty) });
            this.Heading1ForegroundBrush = new SolidColorBrush();
            BindingOperations.SetBinding(this.Heading1ForegroundBrush, SolidColorBrush.ColorProperty, new Binding { Source = this, Path = new PropertyPath(Heading1ForegroundColorProperty) });
            BindingOperations.SetBinding(this, Heading1ForegroundColorProperty, new Binding { Source = palette["XboxGreen"], Path = new PropertyPath(PaletteColor.ColorProperty) });
            this.Heading2ForegroundBrush = new SolidColorBrush();
            BindingOperations.SetBinding(this.Heading2ForegroundBrush, SolidColorBrush.ColorProperty, new Binding { Source = this, Path = new PropertyPath(Heading2ForegroundColorProperty) });
            BindingOperations.SetBinding(this, Heading2ForegroundColorProperty, new Binding { Source = palette["Black"], Path = new PropertyPath(PaletteColor.ColorProperty) });
            this.GroupBoxHeaderBackgroundBrush = new SolidColorBrush();
            BindingOperations.SetBinding(this.GroupBoxHeaderBackgroundBrush, SolidColorBrush.ColorProperty, new Binding { Source = this, Path = new PropertyPath(GroupBoxHeaderBackgroundColorProperty) });
            BindingOperations.SetBinding(this, GroupBoxHeaderBackgroundColorProperty, new Binding { Source = palette["LighterGray"], Path = new PropertyPath(PaletteColor.ColorProperty) });
            this.GroupBoxHeaderForegroundBrush = new SolidColorBrush();
            BindingOperations.SetBinding(this.GroupBoxHeaderForegroundBrush, SolidColorBrush.ColorProperty, new Binding { Source = this, Path = new PropertyPath(GroupBoxHeaderForegroundColorProperty) });
            BindingOperations.SetBinding(this, GroupBoxHeaderForegroundColorProperty, new Binding { Source = palette["XboxGreenDark"], Path = new PropertyPath(PaletteColor.ColorProperty) });
            this.CloseFileButtonForegroundBrush = new SolidColorBrush();
            BindingOperations.SetBinding(this.CloseFileButtonForegroundBrush, SolidColorBrush.ColorProperty, new Binding { Source = this, Path = new PropertyPath(CloseFileButtonForegroundColorProperty) });
            BindingOperations.SetBinding(this, CloseFileButtonForegroundColorProperty, new Binding { Source = palette["White"], Path = new PropertyPath(PaletteColor.ColorProperty) });
            this.CloseFileButtonHoverForegroundBrush = new SolidColorBrush();
            BindingOperations.SetBinding(this.CloseFileButtonHoverForegroundBrush, SolidColorBrush.ColorProperty, new Binding { Source = this, Path = new PropertyPath(CloseFileButtonHoverForegroundColorProperty) });
            BindingOperations.SetBinding(this, CloseFileButtonHoverForegroundColorProperty, new Binding { Source = palette["XboxGreenLight"], Path = new PropertyPath(PaletteColor.ColorProperty) });
            this.FileButtonBackgroundBrush = new SolidColorBrush();
            BindingOperations.SetBinding(this.FileButtonBackgroundBrush, SolidColorBrush.ColorProperty, new Binding { Source = this, Path = new PropertyPath(FileButtonBackgroundColorProperty) });
            BindingOperations.SetBinding(this, FileButtonBackgroundColorProperty, new Binding { Source = palette["XboxGreen"], Path = new PropertyPath(PaletteColor.ColorProperty) });
            this.FileButtonForegroundBrush = new SolidColorBrush();
            BindingOperations.SetBinding(this.FileButtonForegroundBrush, SolidColorBrush.ColorProperty, new Binding { Source = this, Path = new PropertyPath(FileButtonForegroundColorProperty) });
            BindingOperations.SetBinding(this, FileButtonForegroundColorProperty, new Binding { Source = palette["White"], Path = new PropertyPath(PaletteColor.ColorProperty) });
            this.FileButtonHoverBackgroundBrush = new SolidColorBrush();
            BindingOperations.SetBinding(this.FileButtonHoverBackgroundBrush, SolidColorBrush.ColorProperty, new Binding { Source = this, Path = new PropertyPath(FileButtonHoverBackgroundColorProperty) });
            BindingOperations.SetBinding(this, FileButtonHoverBackgroundColorProperty, new Binding { Source = palette["XboxGreenMedium"], Path = new PropertyPath(PaletteColor.ColorProperty) });
            this.FileButtonHoverForegroundBrush = new SolidColorBrush();
            BindingOperations.SetBinding(this.FileButtonHoverForegroundBrush, SolidColorBrush.ColorProperty, new Binding { Source = this, Path = new PropertyPath(FileButtonHoverForegroundColorProperty) });
            BindingOperations.SetBinding(this, FileButtonHoverForegroundColorProperty, new Binding { Source = palette["White"], Path = new PropertyPath(PaletteColor.ColorProperty) });
            this.FileTabItemBackgroundBrush = new SolidColorBrush();
            BindingOperations.SetBinding(this.FileTabItemBackgroundBrush, SolidColorBrush.ColorProperty, new Binding { Source = this, Path = new PropertyPath(FileTabItemBackgroundColorProperty) });
            BindingOperations.SetBinding(this, FileTabItemBackgroundColorProperty, new Binding { Source = palette["XboxGreen"], Path = new PropertyPath(PaletteColor.ColorProperty) });
            this.FileTabItemDisabledBackgroundBrush = new SolidColorBrush();
            BindingOperations.SetBinding(this.FileTabItemDisabledBackgroundBrush, SolidColorBrush.ColorProperty, new Binding { Source = this, Path = new PropertyPath(FileTabItemDisabledBackgroundColorProperty) });
            BindingOperations.SetBinding(this, FileTabItemDisabledBackgroundColorProperty, new Binding { Source = palette["XboxGreen"], Path = new PropertyPath(PaletteColor.ColorProperty) });
            this.FileTabItemDisabledForegroundBrush = new SolidColorBrush();
            BindingOperations.SetBinding(this.FileTabItemDisabledForegroundBrush, SolidColorBrush.ColorProperty, new Binding { Source = this, Path = new PropertyPath(FileTabItemDisabledForegroundColorProperty) });
            BindingOperations.SetBinding(this, FileTabItemDisabledForegroundColorProperty, new Binding { Source = palette["XboxGreenLight"], Path = new PropertyPath(PaletteColor.ColorProperty) });
            this.FileTabItemForegroundBrush = new SolidColorBrush();
            BindingOperations.SetBinding(this.FileTabItemForegroundBrush, SolidColorBrush.ColorProperty, new Binding { Source = this, Path = new PropertyPath(FileTabItemForegroundColorProperty) });
            BindingOperations.SetBinding(this, FileTabItemForegroundColorProperty, new Binding { Source = palette["White"], Path = new PropertyPath(PaletteColor.ColorProperty) });
            this.FileTabItemHoverBackgroundBrush = new SolidColorBrush();
            BindingOperations.SetBinding(this.FileTabItemHoverBackgroundBrush, SolidColorBrush.ColorProperty, new Binding { Source = this, Path = new PropertyPath(FileTabItemHoverBackgroundColorProperty) });
            BindingOperations.SetBinding(this, FileTabItemHoverBackgroundColorProperty, new Binding { Source = palette["XboxGreenDark"], Path = new PropertyPath(PaletteColor.ColorProperty) });
            this.FileTabItemHoverForegroundBrush = new SolidColorBrush();
            BindingOperations.SetBinding(this.FileTabItemHoverForegroundBrush, SolidColorBrush.ColorProperty, new Binding { Source = this, Path = new PropertyPath(FileTabItemHoverForegroundColorProperty) });
            BindingOperations.SetBinding(this, FileTabItemHoverForegroundColorProperty, new Binding { Source = palette["White"], Path = new PropertyPath(PaletteColor.ColorProperty) });
            this.FileTabItemSelectedBackgroundBrush = new SolidColorBrush();
            BindingOperations.SetBinding(this.FileTabItemSelectedBackgroundBrush, SolidColorBrush.ColorProperty, new Binding { Source = this, Path = new PropertyPath(FileTabItemSelectedBackgroundColorProperty) });
            BindingOperations.SetBinding(this, FileTabItemSelectedBackgroundColorProperty, new Binding { Source = palette["XboxGreenMedium"], Path = new PropertyPath(PaletteColor.ColorProperty) });
            this.FileTabItemSelectedForegroundBrush = new SolidColorBrush();
            BindingOperations.SetBinding(this.FileTabItemSelectedForegroundBrush, SolidColorBrush.ColorProperty, new Binding { Source = this, Path = new PropertyPath(FileTabItemSelectedForegroundColorProperty) });
            BindingOperations.SetBinding(this, FileTabItemSelectedForegroundColorProperty, new Binding { Source = palette["White"], Path = new PropertyPath(PaletteColor.ColorProperty) });
            this.LayoutTabControlBackgroundBrush = new SolidColorBrush();
            BindingOperations.SetBinding(this.LayoutTabControlBackgroundBrush, SolidColorBrush.ColorProperty, new Binding { Source = this, Path = new PropertyPath(LayoutTabControlBackgroundColorProperty) });
            BindingOperations.SetBinding(this, LayoutTabControlBackgroundColorProperty, new Binding { Source = palette["LighterGray"], Path = new PropertyPath(PaletteColor.ColorProperty) });
            this.LayoutTabItemBackgroundBrush = new SolidColorBrush();
            BindingOperations.SetBinding(this.LayoutTabItemBackgroundBrush, SolidColorBrush.ColorProperty, new Binding { Source = this, Path = new PropertyPath(LayoutTabItemBackgroundColorProperty) });
            BindingOperations.SetBinding(this, LayoutTabItemBackgroundColorProperty, new Binding { Source = palette["LightGray"], Path = new PropertyPath(PaletteColor.ColorProperty) });
            this.LayoutTabItemBorderBrush = new SolidColorBrush();
            BindingOperations.SetBinding(this.LayoutTabItemBorderBrush, SolidColorBrush.ColorProperty, new Binding { Source = this, Path = new PropertyPath(LayoutTabItemBorderColorProperty) });
            BindingOperations.SetBinding(this, LayoutTabItemBorderColorProperty, new Binding { Source = palette["Gray"], Path = new PropertyPath(PaletteColor.ColorProperty) });
            this.LayoutTabItemForegroundBrush = new SolidColorBrush();
            BindingOperations.SetBinding(this.LayoutTabItemForegroundBrush, SolidColorBrush.ColorProperty, new Binding { Source = this, Path = new PropertyPath(LayoutTabItemForegroundColorProperty) });
            BindingOperations.SetBinding(this, LayoutTabItemForegroundColorProperty, new Binding { Source = palette["Black"], Path = new PropertyPath(PaletteColor.ColorProperty) });
            this.LayoutTabItemHoverBackgroundBrush = new SolidColorBrush();
            BindingOperations.SetBinding(this.LayoutTabItemHoverBackgroundBrush, SolidColorBrush.ColorProperty, new Binding { Source = this, Path = new PropertyPath(LayoutTabItemHoverBackgroundColorProperty) });
            BindingOperations.SetBinding(this, LayoutTabItemHoverBackgroundColorProperty, new Binding { Source = palette["Transparent"], Path = new PropertyPath(PaletteColor.ColorProperty) });
            this.LayoutTabItemHoverForegroundBrush = new SolidColorBrush();
            BindingOperations.SetBinding(this.LayoutTabItemHoverForegroundBrush, SolidColorBrush.ColorProperty, new Binding { Source = this, Path = new PropertyPath(LayoutTabItemHoverForegroundColorProperty) });
            BindingOperations.SetBinding(this, LayoutTabItemHoverForegroundColorProperty, new Binding { Source = palette["XboxGreen"], Path = new PropertyPath(PaletteColor.ColorProperty) });
            this.LayoutTabItemSelectedBackgroundBrush = new SolidColorBrush();
            BindingOperations.SetBinding(this.LayoutTabItemSelectedBackgroundBrush, SolidColorBrush.ColorProperty, new Binding { Source = this, Path = new PropertyPath(LayoutTabItemSelectedBackgroundColorProperty) });
            BindingOperations.SetBinding(this, LayoutTabItemSelectedBackgroundColorProperty, new Binding { Source = palette["LighterGray"], Path = new PropertyPath(PaletteColor.ColorProperty) });
            this.LayoutTabItemSelectedForegroundBrush = new SolidColorBrush();
            BindingOperations.SetBinding(this.LayoutTabItemSelectedForegroundBrush, SolidColorBrush.ColorProperty, new Binding { Source = this, Path = new PropertyPath(LayoutTabItemSelectedForegroundColorProperty) });
            BindingOperations.SetBinding(this, LayoutTabItemSelectedForegroundColorProperty, new Binding { Source = palette["XboxGreen"], Path = new PropertyPath(PaletteColor.ColorProperty) });
            this.OpenTabBorderBrush = new SolidColorBrush();
            BindingOperations.SetBinding(this.OpenTabBorderBrush, SolidColorBrush.ColorProperty, new Binding { Source = this, Path = new PropertyPath(OpenTabBorderColorProperty) });
            BindingOperations.SetBinding(this, OpenTabBorderColorProperty, new Binding { Source = palette["Gray"], Path = new PropertyPath(PaletteColor.ColorProperty) });
            this.OpenTabItemBackgroundBrush = new SolidColorBrush();
            BindingOperations.SetBinding(this.OpenTabItemBackgroundBrush, SolidColorBrush.ColorProperty, new Binding { Source = this, Path = new PropertyPath(OpenTabItemBackgroundColorProperty) });
            BindingOperations.SetBinding(this, OpenTabItemBackgroundColorProperty, new Binding { Source = palette["Transparent"], Path = new PropertyPath(PaletteColor.ColorProperty) });
            this.OpenTabItemForegroundBrush = new SolidColorBrush();
            BindingOperations.SetBinding(this.OpenTabItemForegroundBrush, SolidColorBrush.ColorProperty, new Binding { Source = this, Path = new PropertyPath(OpenTabItemForegroundColorProperty) });
            BindingOperations.SetBinding(this, OpenTabItemForegroundColorProperty, new Binding { Source = palette["Black"], Path = new PropertyPath(PaletteColor.ColorProperty) });
            this.OpenTabItemHoverBackgroundBrush = new SolidColorBrush();
            BindingOperations.SetBinding(this.OpenTabItemHoverBackgroundBrush, SolidColorBrush.ColorProperty, new Binding { Source = this, Path = new PropertyPath(OpenTabItemHoverBackgroundColorProperty) });
            BindingOperations.SetBinding(this, OpenTabItemHoverBackgroundColorProperty, new Binding { Source = palette["XboxGreenLight"], Path = new PropertyPath(PaletteColor.ColorProperty) });
            this.OpenTabItemHoverForegroundBrush = new SolidColorBrush();
            BindingOperations.SetBinding(this.OpenTabItemHoverForegroundBrush, SolidColorBrush.ColorProperty, new Binding { Source = this, Path = new PropertyPath(OpenTabItemHoverForegroundColorProperty) });
            BindingOperations.SetBinding(this, OpenTabItemHoverForegroundColorProperty, new Binding { Source = palette["Black"], Path = new PropertyPath(PaletteColor.ColorProperty) });
            this.OpenTabItemSelectedBackgroundBrush = new SolidColorBrush();
            BindingOperations.SetBinding(this.OpenTabItemSelectedBackgroundBrush, SolidColorBrush.ColorProperty, new Binding { Source = this, Path = new PropertyPath(OpenTabItemSelectedBackgroundColorProperty) });
            BindingOperations.SetBinding(this, OpenTabItemSelectedBackgroundColorProperty, new Binding { Source = palette["XboxGreen"], Path = new PropertyPath(PaletteColor.ColorProperty) });
            this.OpenTabItemSelectedForegroundBrush = new SolidColorBrush();
            BindingOperations.SetBinding(this.OpenTabItemSelectedForegroundBrush, SolidColorBrush.ColorProperty, new Binding { Source = this, Path = new PropertyPath(OpenTabItemSelectedForegroundColorProperty) });
            BindingOperations.SetBinding(this, OpenTabItemSelectedForegroundColorProperty, new Binding { Source = palette["White"], Path = new PropertyPath(PaletteColor.ColorProperty) });
            this.ListBoxItemFocusedSelectedBackgroundBrush = new SolidColorBrush();
            BindingOperations.SetBinding(this.ListBoxItemFocusedSelectedBackgroundBrush, SolidColorBrush.ColorProperty, new Binding { Source = this, Path = new PropertyPath(ListBoxItemFocusedSelectedBackgroundColorProperty) });
            BindingOperations.SetBinding(this, ListBoxItemFocusedSelectedBackgroundColorProperty, new Binding { Source = palette["XboxGreenLight"], Path = new PropertyPath(PaletteColor.ColorProperty) });
            this.ListBoxItemFocusedSelectedForegroundBrush = new SolidColorBrush();
            BindingOperations.SetBinding(this.ListBoxItemFocusedSelectedForegroundBrush, SolidColorBrush.ColorProperty, new Binding { Source = this, Path = new PropertyPath(ListBoxItemFocusedSelectedForegroundColorProperty) });
            BindingOperations.SetBinding(this, ListBoxItemFocusedSelectedForegroundColorProperty, new Binding { Source = palette["Black"], Path = new PropertyPath(PaletteColor.ColorProperty) });
            this.ListBoxItemSelectedBackgroundBrush = new SolidColorBrush();
            BindingOperations.SetBinding(this.ListBoxItemSelectedBackgroundBrush, SolidColorBrush.ColorProperty, new Binding { Source = this, Path = new PropertyPath(ListBoxItemSelectedBackgroundColorProperty) });
            BindingOperations.SetBinding(this, ListBoxItemSelectedBackgroundColorProperty, new Binding { Source = palette["LightGray"], Path = new PropertyPath(PaletteColor.ColorProperty) });
            this.ListBoxItemSelectedForegroundBrush = new SolidColorBrush();
            BindingOperations.SetBinding(this.ListBoxItemSelectedForegroundBrush, SolidColorBrush.ColorProperty, new Binding { Source = this, Path = new PropertyPath(ListBoxItemSelectedForegroundColorProperty) });
            BindingOperations.SetBinding(this, ListBoxItemSelectedForegroundColorProperty, new Binding { Source = palette["Black"], Path = new PropertyPath(PaletteColor.ColorProperty) });
            this.WindowBackgroundBrush = new SolidColorBrush();
            BindingOperations.SetBinding(this.WindowBackgroundBrush, SolidColorBrush.ColorProperty, new Binding { Source = this, Path = new PropertyPath(WindowBackgroundColorProperty) });
            BindingOperations.SetBinding(this, WindowBackgroundColorProperty, new Binding { Source = palette["LightGray"], Path = new PropertyPath(PaletteColor.ColorProperty) });
            this.WindowTitleForegroundBrush = new SolidColorBrush();
            BindingOperations.SetBinding(this.WindowTitleForegroundBrush, SolidColorBrush.ColorProperty, new Binding { Source = this, Path = new PropertyPath(WindowTitleForegroundColorProperty) });
            BindingOperations.SetBinding(this, WindowTitleForegroundColorProperty, new Binding { Source = palette["Black"], Path = new PropertyPath(PaletteColor.ColorProperty) });
            this.WindowTitleInactiveForegroundBrush = new SolidColorBrush();
            BindingOperations.SetBinding(this.WindowTitleInactiveForegroundBrush, SolidColorBrush.ColorProperty, new Binding { Source = this, Path = new PropertyPath(WindowTitleInactiveForegroundColorProperty) });
            BindingOperations.SetBinding(this, WindowTitleInactiveForegroundColorProperty, new Binding { Source = palette["Gray"], Path = new PropertyPath(PaletteColor.ColorProperty) });
            this.ScrollBarThumbBrush = new SolidColorBrush();
            BindingOperations.SetBinding(this.ScrollBarThumbBrush, SolidColorBrush.ColorProperty, new Binding { Source = this, Path = new PropertyPath(ScrollBarThumbColorProperty) });
            BindingOperations.SetBinding(this, ScrollBarThumbColorProperty, new Binding { Source = palette["LightGray"], Path = new PropertyPath(PaletteColor.ColorProperty) });
            this.ScrollBarThumbHoverBrush = new SolidColorBrush();
            BindingOperations.SetBinding(this.ScrollBarThumbHoverBrush, SolidColorBrush.ColorProperty, new Binding { Source = this, Path = new PropertyPath(ScrollBarThumbHoverColorProperty) });
            BindingOperations.SetBinding(this, ScrollBarThumbHoverColorProperty, new Binding { Source = palette["Gray"], Path = new PropertyPath(PaletteColor.ColorProperty) });
            this.ScrollBarThumbPressedBrush = new SolidColorBrush();
            BindingOperations.SetBinding(this.ScrollBarThumbPressedBrush, SolidColorBrush.ColorProperty, new Binding { Source = this, Path = new PropertyPath(ScrollBarThumbPressedColorProperty) });
            BindingOperations.SetBinding(this, ScrollBarThumbPressedColorProperty, new Binding { Source = palette["Black"], Path = new PropertyPath(PaletteColor.ColorProperty) });
            this.TabControlActiveBackgroundBrush = new SolidColorBrush();
            BindingOperations.SetBinding(this.TabControlActiveBackgroundBrush, SolidColorBrush.ColorProperty, new Binding { Source = this, Path = new PropertyPath(TabControlActiveBackgroundColorProperty) });
            BindingOperations.SetBinding(this, TabControlActiveBackgroundColorProperty, new Binding { Source = palette["White"], Path = new PropertyPath(PaletteColor.ColorProperty) });
            this.TabControlActiveBorderBrush = new SolidColorBrush();
            BindingOperations.SetBinding(this.TabControlActiveBorderBrush, SolidColorBrush.ColorProperty, new Binding { Source = this, Path = new PropertyPath(TabControlActiveBorderColorProperty) });
            BindingOperations.SetBinding(this, TabControlActiveBorderColorProperty, new Binding { Source = palette["XboxGreen"], Path = new PropertyPath(PaletteColor.ColorProperty) });
            this.TabControlBackgroundBrush = new SolidColorBrush();
            BindingOperations.SetBinding(this.TabControlBackgroundBrush, SolidColorBrush.ColorProperty, new Binding { Source = this, Path = new PropertyPath(TabControlBackgroundColorProperty) });
            BindingOperations.SetBinding(this, TabControlBackgroundColorProperty, new Binding { Source = palette["White"], Path = new PropertyPath(PaletteColor.ColorProperty) });
            this.TabControlBorderBrush = new SolidColorBrush();
            BindingOperations.SetBinding(this.TabControlBorderBrush, SolidColorBrush.ColorProperty, new Binding { Source = this, Path = new PropertyPath(TabControlBorderColorProperty) });
            BindingOperations.SetBinding(this, TabControlBorderColorProperty, new Binding { Source = palette["White"], Path = new PropertyPath(PaletteColor.ColorProperty) });
            this.TabItemActiveBackgroundBrush = new SolidColorBrush();
            BindingOperations.SetBinding(this.TabItemActiveBackgroundBrush, SolidColorBrush.ColorProperty, new Binding { Source = this, Path = new PropertyPath(TabItemActiveBackgroundColorProperty) });
            BindingOperations.SetBinding(this, TabItemActiveBackgroundColorProperty, new Binding { Source = palette["White"], Path = new PropertyPath(PaletteColor.ColorProperty) });
            this.TabItemActiveBorderBrush = new SolidColorBrush();
            BindingOperations.SetBinding(this.TabItemActiveBorderBrush, SolidColorBrush.ColorProperty, new Binding { Source = this, Path = new PropertyPath(TabItemActiveBorderColorProperty) });
            BindingOperations.SetBinding(this, TabItemActiveBorderColorProperty, new Binding { Source = palette["Transparent"], Path = new PropertyPath(PaletteColor.ColorProperty) });
            this.TabItemActiveForegroundBrush = new SolidColorBrush();
            BindingOperations.SetBinding(this.TabItemActiveForegroundBrush, SolidColorBrush.ColorProperty, new Binding { Source = this, Path = new PropertyPath(TabItemActiveForegroundColorProperty) });
            BindingOperations.SetBinding(this, TabItemActiveForegroundColorProperty, new Binding { Source = palette["Black"], Path = new PropertyPath(PaletteColor.ColorProperty) });
            this.TabItemActiveSelectedBackgroundBrush = new SolidColorBrush();
            BindingOperations.SetBinding(this.TabItemActiveSelectedBackgroundBrush, SolidColorBrush.ColorProperty, new Binding { Source = this, Path = new PropertyPath(TabItemActiveSelectedBackgroundColorProperty) });
            BindingOperations.SetBinding(this, TabItemActiveSelectedBackgroundColorProperty, new Binding { Source = palette["White"], Path = new PropertyPath(PaletteColor.ColorProperty) });
            this.TabItemActiveSelectedBorderBrush = new SolidColorBrush();
            BindingOperations.SetBinding(this.TabItemActiveSelectedBorderBrush, SolidColorBrush.ColorProperty, new Binding { Source = this, Path = new PropertyPath(TabItemActiveSelectedBorderColorProperty) });
            BindingOperations.SetBinding(this, TabItemActiveSelectedBorderColorProperty, new Binding { Source = palette["XboxGreen"], Path = new PropertyPath(PaletteColor.ColorProperty) });
            this.TabItemActiveSelectedForegroundBrush = new SolidColorBrush();
            BindingOperations.SetBinding(this.TabItemActiveSelectedForegroundBrush, SolidColorBrush.ColorProperty, new Binding { Source = this, Path = new PropertyPath(TabItemActiveSelectedForegroundColorProperty) });
            BindingOperations.SetBinding(this, TabItemActiveSelectedForegroundColorProperty, new Binding { Source = palette["XboxGreen"], Path = new PropertyPath(PaletteColor.ColorProperty) });
            this.TabItemBackgroundBrush = new SolidColorBrush();
            BindingOperations.SetBinding(this.TabItemBackgroundBrush, SolidColorBrush.ColorProperty, new Binding { Source = this, Path = new PropertyPath(TabItemBackgroundColorProperty) });
            BindingOperations.SetBinding(this, TabItemBackgroundColorProperty, new Binding { Source = palette["White"], Path = new PropertyPath(PaletteColor.ColorProperty) });
            this.TabItemBorderBrush = new SolidColorBrush();
            BindingOperations.SetBinding(this.TabItemBorderBrush, SolidColorBrush.ColorProperty, new Binding { Source = this, Path = new PropertyPath(TabItemBorderColorProperty) });
            BindingOperations.SetBinding(this, TabItemBorderColorProperty, new Binding { Source = palette["Transparent"], Path = new PropertyPath(PaletteColor.ColorProperty) });
            this.TabItemForegroundBrush = new SolidColorBrush();
            BindingOperations.SetBinding(this.TabItemForegroundBrush, SolidColorBrush.ColorProperty, new Binding { Source = this, Path = new PropertyPath(TabItemForegroundColorProperty) });
            BindingOperations.SetBinding(this, TabItemForegroundColorProperty, new Binding { Source = palette["Gray"], Path = new PropertyPath(PaletteColor.ColorProperty) });
            this.TabItemHoverBackgroundBrush = new SolidColorBrush();
            BindingOperations.SetBinding(this.TabItemHoverBackgroundBrush, SolidColorBrush.ColorProperty, new Binding { Source = this, Path = new PropertyPath(TabItemHoverBackgroundColorProperty) });
            BindingOperations.SetBinding(this, TabItemHoverBackgroundColorProperty, new Binding { Source = palette["White"], Path = new PropertyPath(PaletteColor.ColorProperty) });
            this.TabItemHoverBorderBrush = new SolidColorBrush();
            BindingOperations.SetBinding(this.TabItemHoverBorderBrush, SolidColorBrush.ColorProperty, new Binding { Source = this, Path = new PropertyPath(TabItemHoverBorderColorProperty) });
            BindingOperations.SetBinding(this, TabItemHoverBorderColorProperty, new Binding { Source = palette["Gray"], Path = new PropertyPath(PaletteColor.ColorProperty) });
            this.TabItemHoverForegroundBrush = new SolidColorBrush();
            BindingOperations.SetBinding(this.TabItemHoverForegroundBrush, SolidColorBrush.ColorProperty, new Binding { Source = this, Path = new PropertyPath(TabItemHoverForegroundColorProperty) });
            BindingOperations.SetBinding(this, TabItemHoverForegroundColorProperty, new Binding { Source = palette["XboxGreen"], Path = new PropertyPath(PaletteColor.ColorProperty) });
            this.TabItemSelectedBackgroundBrush = new SolidColorBrush();
            BindingOperations.SetBinding(this.TabItemSelectedBackgroundBrush, SolidColorBrush.ColorProperty, new Binding { Source = this, Path = new PropertyPath(TabItemSelectedBackgroundColorProperty) });
            BindingOperations.SetBinding(this, TabItemSelectedBackgroundColorProperty, new Binding { Source = palette["White"], Path = new PropertyPath(PaletteColor.ColorProperty) });
            this.TabItemSelectedBorderBrush = new SolidColorBrush();
            BindingOperations.SetBinding(this.TabItemSelectedBorderBrush, SolidColorBrush.ColorProperty, new Binding { Source = this, Path = new PropertyPath(TabItemSelectedBorderColorProperty) });
            BindingOperations.SetBinding(this, TabItemSelectedBorderColorProperty, new Binding { Source = palette["LightGray"], Path = new PropertyPath(PaletteColor.ColorProperty) });
            this.TabItemSelectedForegroundBrush = new SolidColorBrush();
            BindingOperations.SetBinding(this.TabItemSelectedForegroundBrush, SolidColorBrush.ColorProperty, new Binding { Source = this, Path = new PropertyPath(TabItemSelectedForegroundColorProperty) });
            BindingOperations.SetBinding(this, TabItemSelectedForegroundColorProperty, new Binding { Source = palette["XboxGreen"], Path = new PropertyPath(PaletteColor.ColorProperty) });
            this.TabPanelActiveBackgroundBrush = new SolidColorBrush();
            BindingOperations.SetBinding(this.TabPanelActiveBackgroundBrush, SolidColorBrush.ColorProperty, new Binding { Source = this, Path = new PropertyPath(TabPanelActiveBackgroundColorProperty) });
            BindingOperations.SetBinding(this, TabPanelActiveBackgroundColorProperty, new Binding { Source = palette["White"], Path = new PropertyPath(PaletteColor.ColorProperty) });
            this.TabPanelBackgroundBrush = new SolidColorBrush();
            BindingOperations.SetBinding(this.TabPanelBackgroundBrush, SolidColorBrush.ColorProperty, new Binding { Source = this, Path = new PropertyPath(TabPanelBackgroundColorProperty) });
            BindingOperations.SetBinding(this, TabPanelBackgroundColorProperty, new Binding { Source = palette["White"], Path = new PropertyPath(PaletteColor.ColorProperty) });
            this.TabPanelBorderBrush = new SolidColorBrush();
            BindingOperations.SetBinding(this.TabPanelBorderBrush, SolidColorBrush.ColorProperty, new Binding { Source = this, Path = new PropertyPath(TabPanelBorderColorProperty) });
            BindingOperations.SetBinding(this, TabPanelBorderColorProperty, new Binding { Source = palette["LightGray"], Path = new PropertyPath(PaletteColor.ColorProperty) });
            this.TextBoxSelectionBrush = new SolidColorBrush();
            BindingOperations.SetBinding(this.TextBoxSelectionBrush, SolidColorBrush.ColorProperty, new Binding { Source = this, Path = new PropertyPath(TextBoxSelectionColorProperty) });
            BindingOperations.SetBinding(this, TextBoxSelectionColorProperty, new Binding { Source = palette["XboxGreen"], Path = new PropertyPath(PaletteColor.ColorProperty) });
            this.TextEditorFocusedSelectionBorderBrush = new SolidColorBrush();
            BindingOperations.SetBinding(this.TextEditorFocusedSelectionBorderBrush, SolidColorBrush.ColorProperty, new Binding { Source = this, Path = new PropertyPath(TextEditorFocusedSelectionBorderColorProperty) });
            BindingOperations.SetBinding(this, TextEditorFocusedSelectionBorderColorProperty, new Binding { Source = palette["XboxGreen"], Path = new PropertyPath(PaletteColor.ColorProperty) });
            this.TextEditorFocusedSelectionBrush = new SolidColorBrush();
            BindingOperations.SetBinding(this.TextEditorFocusedSelectionBrush, SolidColorBrush.ColorProperty, new Binding { Source = this, Path = new PropertyPath(TextEditorFocusedSelectionColorProperty) });
            this.TextEditorSelectionBorderBrush = new SolidColorBrush();
            BindingOperations.SetBinding(this.TextEditorSelectionBorderBrush, SolidColorBrush.ColorProperty, new Binding { Source = this, Path = new PropertyPath(TextEditorSelectionBorderColorProperty) });
            BindingOperations.SetBinding(this, TextEditorSelectionBorderColorProperty, new Binding { Source = palette["Gray"], Path = new PropertyPath(PaletteColor.ColorProperty) });
            this.TextEditorSelectionBrush = new SolidColorBrush();
            BindingOperations.SetBinding(this.TextEditorSelectionBrush, SolidColorBrush.ColorProperty, new Binding { Source = this, Path = new PropertyPath(TextEditorSelectionColorProperty) });
            this.TimelineSelectionBorderBrush = new SolidColorBrush();
            BindingOperations.SetBinding(this.TimelineSelectionBorderBrush, SolidColorBrush.ColorProperty, new Binding { Source = this, Path = new PropertyPath(TimelineSelectionBorderColorProperty) });
            BindingOperations.SetBinding(this, TimelineSelectionBorderColorProperty, new Binding { Source = palette["White"], Path = new PropertyPath(PaletteColor.ColorProperty) });
            this.TimelineSelectionBrush = new SolidColorBrush();
            BindingOperations.SetBinding(this.TimelineSelectionBrush, SolidColorBrush.ColorProperty, new Binding { Source = this, Path = new PropertyPath(TimelineSelectionColorProperty) });
            BindingOperations.SetBinding(this, TimelineSelectionColorProperty, new Binding { Source = palette["TimelineSelection"], Path = new PropertyPath(PaletteColor.ColorProperty) });
            this.TimelineMousePointBrush = new SolidColorBrush();
            BindingOperations.SetBinding(this.TimelineMousePointBrush, SolidColorBrush.ColorProperty, new Binding { Source = this, Path = new PropertyPath(TimelineMousePointColorProperty) });
            this.ToggleButtonCheckedBackgroundBrush = new SolidColorBrush();
            BindingOperations.SetBinding(this.ToggleButtonCheckedBackgroundBrush, SolidColorBrush.ColorProperty, new Binding { Source = this, Path = new PropertyPath(ToggleButtonCheckedBackgroundColorProperty) });
            BindingOperations.SetBinding(this, ToggleButtonCheckedBackgroundColorProperty, new Binding { Source = palette["Gray"], Path = new PropertyPath(PaletteColor.ColorProperty) });
            this.ToggleButtonCheckedBorderBrush = new SolidColorBrush();
            BindingOperations.SetBinding(this.ToggleButtonCheckedBorderBrush, SolidColorBrush.ColorProperty, new Binding { Source = this, Path = new PropertyPath(ToggleButtonCheckedBorderColorProperty) });
            BindingOperations.SetBinding(this, ToggleButtonCheckedBorderColorProperty, new Binding { Source = palette["White"], Path = new PropertyPath(PaletteColor.ColorProperty) });
            this.ToggleButtonCheckedForegroundBrush = new SolidColorBrush();
            BindingOperations.SetBinding(this.ToggleButtonCheckedForegroundBrush, SolidColorBrush.ColorProperty, new Binding { Source = this, Path = new PropertyPath(ToggleButtonCheckedForegroundColorProperty) });
            BindingOperations.SetBinding(this, ToggleButtonCheckedForegroundColorProperty, new Binding { Source = palette["White"], Path = new PropertyPath(PaletteColor.ColorProperty) });
            this.ToggleButtonDisabledCheckedBackgroundBrush = new SolidColorBrush();
            BindingOperations.SetBinding(this.ToggleButtonDisabledCheckedBackgroundBrush, SolidColorBrush.ColorProperty, new Binding { Source = this, Path = new PropertyPath(ToggleButtonDisabledCheckedBackgroundColorProperty) });
            BindingOperations.SetBinding(this, ToggleButtonDisabledCheckedBackgroundColorProperty, new Binding { Source = palette["LighterGray"], Path = new PropertyPath(PaletteColor.ColorProperty) });
            this.ToggleButtonDisabledCheckedBorderBrush = new SolidColorBrush();
            BindingOperations.SetBinding(this.ToggleButtonDisabledCheckedBorderBrush, SolidColorBrush.ColorProperty, new Binding { Source = this, Path = new PropertyPath(ToggleButtonDisabledCheckedBorderColorProperty) });
            BindingOperations.SetBinding(this, ToggleButtonDisabledCheckedBorderColorProperty, new Binding { Source = palette["LightGray"], Path = new PropertyPath(PaletteColor.ColorProperty) });
            this.ToggleButtonDisabledCheckedForegroundBrush = new SolidColorBrush();
            BindingOperations.SetBinding(this.ToggleButtonDisabledCheckedForegroundBrush, SolidColorBrush.ColorProperty, new Binding { Source = this, Path = new PropertyPath(ToggleButtonDisabledCheckedForegroundColorProperty) });
            BindingOperations.SetBinding(this, ToggleButtonDisabledCheckedForegroundColorProperty, new Binding { Source = palette["Gray"], Path = new PropertyPath(PaletteColor.ColorProperty) });
            this.ToggleButtonFocusedCheckedBackgroundBrush = new SolidColorBrush();
            BindingOperations.SetBinding(this.ToggleButtonFocusedCheckedBackgroundBrush, SolidColorBrush.ColorProperty, new Binding { Source = this, Path = new PropertyPath(ToggleButtonFocusedCheckedBackgroundColorProperty) });
            BindingOperations.SetBinding(this, ToggleButtonFocusedCheckedBackgroundColorProperty, new Binding { Source = palette["XboxGreen"], Path = new PropertyPath(PaletteColor.ColorProperty) });
            this.ToggleButtonFocusedCheckedBorderBrush = new SolidColorBrush();
            BindingOperations.SetBinding(this.ToggleButtonFocusedCheckedBorderBrush, SolidColorBrush.ColorProperty, new Binding { Source = this, Path = new PropertyPath(ToggleButtonFocusedCheckedBorderColorProperty) });
            BindingOperations.SetBinding(this, ToggleButtonFocusedCheckedBorderColorProperty, new Binding { Source = palette["White"], Path = new PropertyPath(PaletteColor.ColorProperty) });
            this.ToggleButtonFocusedCheckedForegroundBrush = new SolidColorBrush();
            BindingOperations.SetBinding(this.ToggleButtonFocusedCheckedForegroundBrush, SolidColorBrush.ColorProperty, new Binding { Source = this, Path = new PropertyPath(ToggleButtonFocusedCheckedForegroundColorProperty) });
            BindingOperations.SetBinding(this, ToggleButtonFocusedCheckedForegroundColorProperty, new Binding { Source = palette["White"], Path = new PropertyPath(PaletteColor.ColorProperty) });
            this.ToggleButtonHoverCheckedBackgroundBrush = new SolidColorBrush();
            BindingOperations.SetBinding(this.ToggleButtonHoverCheckedBackgroundBrush, SolidColorBrush.ColorProperty, new Binding { Source = this, Path = new PropertyPath(ToggleButtonHoverCheckedBackgroundColorProperty) });
            BindingOperations.SetBinding(this, ToggleButtonHoverCheckedBackgroundColorProperty, new Binding { Source = palette["XboxGreenDark"], Path = new PropertyPath(PaletteColor.ColorProperty) });
            this.ToggleButtonHoverCheckedBorderBrush = new SolidColorBrush();
            BindingOperations.SetBinding(this.ToggleButtonHoverCheckedBorderBrush, SolidColorBrush.ColorProperty, new Binding { Source = this, Path = new PropertyPath(ToggleButtonHoverCheckedBorderColorProperty) });
            BindingOperations.SetBinding(this, ToggleButtonHoverCheckedBorderColorProperty, new Binding { Source = palette["White"], Path = new PropertyPath(PaletteColor.ColorProperty) });
            this.ToggleButtonHoverCheckedForegroundBrush = new SolidColorBrush();
            BindingOperations.SetBinding(this.ToggleButtonHoverCheckedForegroundBrush, SolidColorBrush.ColorProperty, new Binding { Source = this, Path = new PropertyPath(ToggleButtonHoverCheckedForegroundColorProperty) });
            BindingOperations.SetBinding(this, ToggleButtonHoverCheckedForegroundColorProperty, new Binding { Source = palette["White"], Path = new PropertyPath(PaletteColor.ColorProperty) });
            this.TreeGridBackgroundBrush = new SolidColorBrush();
            BindingOperations.SetBinding(this.TreeGridBackgroundBrush, SolidColorBrush.ColorProperty, new Binding { Source = this, Path = new PropertyPath(TreeGridBackgroundColorProperty) });
            BindingOperations.SetBinding(this, TreeGridBackgroundColorProperty, new Binding { Source = palette["White"], Path = new PropertyPath(PaletteColor.ColorProperty) });
            this.TreeGridCurrentRowBorderBrush = new SolidColorBrush();
            BindingOperations.SetBinding(this.TreeGridCurrentRowBorderBrush, SolidColorBrush.ColorProperty, new Binding { Source = this, Path = new PropertyPath(TreeGridCurrentRowBorderColorProperty) });
            BindingOperations.SetBinding(this, TreeGridCurrentRowBorderColorProperty, new Binding { Source = palette["MediumGray"], Path = new PropertyPath(PaletteColor.ColorProperty) });
            this.TreeGridFocusedCurrentRowBorderBrush = new SolidColorBrush();
            BindingOperations.SetBinding(this.TreeGridFocusedCurrentRowBorderBrush, SolidColorBrush.ColorProperty, new Binding { Source = this, Path = new PropertyPath(TreeGridFocusedCurrentRowBorderColorProperty) });
            BindingOperations.SetBinding(this, TreeGridFocusedCurrentRowBorderColorProperty, new Binding { Source = palette["XboxGreen"], Path = new PropertyPath(PaletteColor.ColorProperty) });
            this.TreeGridFocusedSelectedBackgroundBrush = new SolidColorBrush();
            BindingOperations.SetBinding(this.TreeGridFocusedSelectedBackgroundBrush, SolidColorBrush.ColorProperty, new Binding { Source = this, Path = new PropertyPath(TreeGridFocusedSelectedBackgroundColorProperty) });
            BindingOperations.SetBinding(this, TreeGridFocusedSelectedBackgroundColorProperty, new Binding { Source = palette["XboxGreenLight"], Path = new PropertyPath(PaletteColor.ColorProperty) });
            this.TreeGridFocusedSelectedForegroundBrush = new SolidColorBrush();
            BindingOperations.SetBinding(this.TreeGridFocusedSelectedForegroundBrush, SolidColorBrush.ColorProperty, new Binding { Source = this, Path = new PropertyPath(TreeGridFocusedSelectedForegroundColorProperty) });
            BindingOperations.SetBinding(this, TreeGridFocusedSelectedForegroundColorProperty, new Binding { Source = palette["Black"], Path = new PropertyPath(PaletteColor.ColorProperty) });
            this.TreeGridForegroundBrush = new SolidColorBrush();
            BindingOperations.SetBinding(this.TreeGridForegroundBrush, SolidColorBrush.ColorProperty, new Binding { Source = this, Path = new PropertyPath(TreeGridForegroundColorProperty) });
            BindingOperations.SetBinding(this, TreeGridForegroundColorProperty, new Binding { Source = palette["Black"], Path = new PropertyPath(PaletteColor.ColorProperty) });
            this.TreeGridHeaderBackgroundBrush = new SolidColorBrush();
            BindingOperations.SetBinding(this.TreeGridHeaderBackgroundBrush, SolidColorBrush.ColorProperty, new Binding { Source = this, Path = new PropertyPath(TreeGridHeaderBackgroundColorProperty) });
            BindingOperations.SetBinding(this, TreeGridHeaderBackgroundColorProperty, new Binding { Source = palette["LightGray"], Path = new PropertyPath(PaletteColor.ColorProperty) });
            this.TreeGridHeaderFocusedBackgroundBrush = new SolidColorBrush();
            BindingOperations.SetBinding(this.TreeGridHeaderFocusedBackgroundBrush, SolidColorBrush.ColorProperty, new Binding { Source = this, Path = new PropertyPath(TreeGridHeaderFocusedBackgroundColorProperty) });
            BindingOperations.SetBinding(this, TreeGridHeaderFocusedBackgroundColorProperty, new Binding { Source = palette["LightGray"], Path = new PropertyPath(PaletteColor.ColorProperty) });
            this.TreeGridHeaderFocusedForegroundBrush = new SolidColorBrush();
            BindingOperations.SetBinding(this.TreeGridHeaderFocusedForegroundBrush, SolidColorBrush.ColorProperty, new Binding { Source = this, Path = new PropertyPath(TreeGridHeaderFocusedForegroundColorProperty) });
            BindingOperations.SetBinding(this, TreeGridHeaderFocusedForegroundColorProperty, new Binding { Source = palette["Black"], Path = new PropertyPath(PaletteColor.ColorProperty) });
            this.TreeGridHeaderFocusedHoverBackgroundBrush = new SolidColorBrush();
            BindingOperations.SetBinding(this.TreeGridHeaderFocusedHoverBackgroundBrush, SolidColorBrush.ColorProperty, new Binding { Source = this, Path = new PropertyPath(TreeGridHeaderFocusedHoverBackgroundColorProperty) });
            BindingOperations.SetBinding(this, TreeGridHeaderFocusedHoverBackgroundColorProperty, new Binding { Source = palette["Gray"], Path = new PropertyPath(PaletteColor.ColorProperty) });
            this.TreeGridHeaderFocusedHoverForegroundBrush = new SolidColorBrush();
            BindingOperations.SetBinding(this.TreeGridHeaderFocusedHoverForegroundBrush, SolidColorBrush.ColorProperty, new Binding { Source = this, Path = new PropertyPath(TreeGridHeaderFocusedHoverForegroundColorProperty) });
            BindingOperations.SetBinding(this, TreeGridHeaderFocusedHoverForegroundColorProperty, new Binding { Source = palette["White"], Path = new PropertyPath(PaletteColor.ColorProperty) });
            this.TreeGridHeaderForegroundBrush = new SolidColorBrush();
            BindingOperations.SetBinding(this.TreeGridHeaderForegroundBrush, SolidColorBrush.ColorProperty, new Binding { Source = this, Path = new PropertyPath(TreeGridHeaderForegroundColorProperty) });
            BindingOperations.SetBinding(this, TreeGridHeaderForegroundColorProperty, new Binding { Source = palette["Black"], Path = new PropertyPath(PaletteColor.ColorProperty) });
            this.TreeGridHeaderHoverBackgroundBrush = new SolidColorBrush();
            BindingOperations.SetBinding(this.TreeGridHeaderHoverBackgroundBrush, SolidColorBrush.ColorProperty, new Binding { Source = this, Path = new PropertyPath(TreeGridHeaderHoverBackgroundColorProperty) });
            BindingOperations.SetBinding(this, TreeGridHeaderHoverBackgroundColorProperty, new Binding { Source = palette["Gray"], Path = new PropertyPath(PaletteColor.ColorProperty) });
            this.TreeGridHeaderHoverForegroundBrush = new SolidColorBrush();
            BindingOperations.SetBinding(this.TreeGridHeaderHoverForegroundBrush, SolidColorBrush.ColorProperty, new Binding { Source = this, Path = new PropertyPath(TreeGridHeaderHoverForegroundColorProperty) });
            BindingOperations.SetBinding(this, TreeGridHeaderHoverForegroundColorProperty, new Binding { Source = palette["White"], Path = new PropertyPath(PaletteColor.ColorProperty) });
            this.TreeGridHeaderPressedBackgroundBrush = new SolidColorBrush();
            BindingOperations.SetBinding(this.TreeGridHeaderPressedBackgroundBrush, SolidColorBrush.ColorProperty, new Binding { Source = this, Path = new PropertyPath(TreeGridHeaderPressedBackgroundColorProperty) });
            BindingOperations.SetBinding(this, TreeGridHeaderPressedBackgroundColorProperty, new Binding { Source = palette["XboxGreen"], Path = new PropertyPath(PaletteColor.ColorProperty) });
            this.TreeGridHeaderPressedForegroundBrush = new SolidColorBrush();
            BindingOperations.SetBinding(this.TreeGridHeaderPressedForegroundBrush, SolidColorBrush.ColorProperty, new Binding { Source = this, Path = new PropertyPath(TreeGridHeaderPressedForegroundColorProperty) });
            BindingOperations.SetBinding(this, TreeGridHeaderPressedForegroundColorProperty, new Binding { Source = palette["White"], Path = new PropertyPath(PaletteColor.ColorProperty) });
            this.TreeGridLinesBrush = new SolidColorBrush();
            BindingOperations.SetBinding(this.TreeGridLinesBrush, SolidColorBrush.ColorProperty, new Binding { Source = this, Path = new PropertyPath(TreeGridLinesColorProperty) });
            BindingOperations.SetBinding(this, TreeGridLinesColorProperty, new Binding { Source = palette["LightGray"], Path = new PropertyPath(PaletteColor.ColorProperty) });
            this.TreeGridSelectedBackgroundBrush = new SolidColorBrush();
            BindingOperations.SetBinding(this.TreeGridSelectedBackgroundBrush, SolidColorBrush.ColorProperty, new Binding { Source = this, Path = new PropertyPath(TreeGridSelectedBackgroundColorProperty) });
            BindingOperations.SetBinding(this, TreeGridSelectedBackgroundColorProperty, new Binding { Source = palette["LightGray"], Path = new PropertyPath(PaletteColor.ColorProperty) });
            this.TreeGridSelectedForegroundBrush = new SolidColorBrush();
            BindingOperations.SetBinding(this.TreeGridSelectedForegroundBrush, SolidColorBrush.ColorProperty, new Binding { Source = this, Path = new PropertyPath(TreeGridSelectedForegroundColorProperty) });
            BindingOperations.SetBinding(this, TreeGridSelectedForegroundColorProperty, new Binding { Source = palette["Black"], Path = new PropertyPath(PaletteColor.ColorProperty) });
            this.TreeViewItemFocusedSelectedBackgroundBrush = new SolidColorBrush();
            BindingOperations.SetBinding(this.TreeViewItemFocusedSelectedBackgroundBrush, SolidColorBrush.ColorProperty, new Binding { Source = this, Path = new PropertyPath(TreeViewItemFocusedSelectedBackgroundColorProperty) });
            BindingOperations.SetBinding(this, TreeViewItemFocusedSelectedBackgroundColorProperty, new Binding { Source = palette["XboxGreenLight"], Path = new PropertyPath(PaletteColor.ColorProperty) });
            this.TreeViewItemFocusedSelectedForegroundBrush = new SolidColorBrush();
            BindingOperations.SetBinding(this.TreeViewItemFocusedSelectedForegroundBrush, SolidColorBrush.ColorProperty, new Binding { Source = this, Path = new PropertyPath(TreeViewItemFocusedSelectedForegroundColorProperty) });
            BindingOperations.SetBinding(this, TreeViewItemFocusedSelectedForegroundColorProperty, new Binding { Source = palette["Black"], Path = new PropertyPath(PaletteColor.ColorProperty) });
            this.TreeViewItemSelectedBackgroundBrush = new SolidColorBrush();
            BindingOperations.SetBinding(this.TreeViewItemSelectedBackgroundBrush, SolidColorBrush.ColorProperty, new Binding { Source = this, Path = new PropertyPath(TreeViewItemSelectedBackgroundColorProperty) });
            BindingOperations.SetBinding(this, TreeViewItemSelectedBackgroundColorProperty, new Binding { Source = palette["LightGray"], Path = new PropertyPath(PaletteColor.ColorProperty) });
            this.TreeViewItemSelectedForegroundBrush = new SolidColorBrush();
            BindingOperations.SetBinding(this.TreeViewItemSelectedForegroundBrush, SolidColorBrush.ColorProperty, new Binding { Source = this, Path = new PropertyPath(TreeViewItemSelectedForegroundColorProperty) });
            BindingOperations.SetBinding(this, TreeViewItemSelectedForegroundColorProperty, new Binding { Source = palette["Black"], Path = new PropertyPath(PaletteColor.ColorProperty) });
            this.ViewBackgroundBrush = new SolidColorBrush();
            BindingOperations.SetBinding(this.ViewBackgroundBrush, SolidColorBrush.ColorProperty, new Binding { Source = this, Path = new PropertyPath(ViewBackgroundColorProperty) });
            BindingOperations.SetBinding(this, ViewBackgroundColorProperty, new Binding { Source = palette["White"], Path = new PropertyPath(PaletteColor.ColorProperty) });
            this.ViewBorderBrush = new SolidColorBrush();
            BindingOperations.SetBinding(this.ViewBorderBrush, SolidColorBrush.ColorProperty, new Binding { Source = this, Path = new PropertyPath(ViewBorderColorProperty) });
            BindingOperations.SetBinding(this, ViewBorderColorProperty, new Binding { Source = palette["LightGray"], Path = new PropertyPath(PaletteColor.ColorProperty) });
            this.AccentBackgroundBrush = new SolidColorBrush();
            BindingOperations.SetBinding(this.AccentBackgroundBrush, SolidColorBrush.ColorProperty, new Binding { Source = this, Path = new PropertyPath(AccentBackgroundColorProperty) });
            BindingOperations.SetBinding(this, AccentBackgroundColorProperty, new Binding { Source = palette["XboxGreen"], Path = new PropertyPath(PaletteColor.ColorProperty) });
            this.AccentForegroundBrush = new SolidColorBrush();
            BindingOperations.SetBinding(this.AccentForegroundBrush, SolidColorBrush.ColorProperty, new Binding { Source = this, Path = new PropertyPath(AccentForegroundColorProperty) });
            BindingOperations.SetBinding(this, AccentForegroundColorProperty, new Binding { Source = palette["White"], Path = new PropertyPath(PaletteColor.ColorProperty) });
            this.TitleBarButtonBackgroundBrush = new SolidColorBrush();
            BindingOperations.SetBinding(this.TitleBarButtonBackgroundBrush, SolidColorBrush.ColorProperty, new Binding { Source = this, Path = new PropertyPath(TitleBarButtonBackgroundColorProperty) });
            BindingOperations.SetBinding(this, TitleBarButtonBackgroundColorProperty, new Binding { Source = palette["LightGray"], Path = new PropertyPath(PaletteColor.ColorProperty) });
            this.TitleBarButtonForegroundBrush = new SolidColorBrush();
            BindingOperations.SetBinding(this.TitleBarButtonForegroundBrush, SolidColorBrush.ColorProperty, new Binding { Source = this, Path = new PropertyPath(TitleBarButtonForegroundColorProperty) });
            BindingOperations.SetBinding(this, TitleBarButtonForegroundColorProperty, new Binding { Source = palette["Black"], Path = new PropertyPath(PaletteColor.ColorProperty) });
            this.TitleBarButtonHoverBackgroundBrush = new SolidColorBrush();
            BindingOperations.SetBinding(this.TitleBarButtonHoverBackgroundBrush, SolidColorBrush.ColorProperty, new Binding { Source = this, Path = new PropertyPath(TitleBarButtonHoverBackgroundColorProperty) });
            BindingOperations.SetBinding(this, TitleBarButtonHoverBackgroundColorProperty, new Binding { Source = palette["LighterGray"], Path = new PropertyPath(PaletteColor.ColorProperty) });
            this.TitleBarButtonHoverForegroundBrush = new SolidColorBrush();
            BindingOperations.SetBinding(this.TitleBarButtonHoverForegroundBrush, SolidColorBrush.ColorProperty, new Binding { Source = this, Path = new PropertyPath(TitleBarButtonHoverForegroundColorProperty) });
            BindingOperations.SetBinding(this, TitleBarButtonHoverForegroundColorProperty, new Binding { Source = palette["Black"], Path = new PropertyPath(PaletteColor.ColorProperty) });
            this.TitleBarButtonPressedBackgroundBrush = new SolidColorBrush();
            BindingOperations.SetBinding(this.TitleBarButtonPressedBackgroundBrush, SolidColorBrush.ColorProperty, new Binding { Source = this, Path = new PropertyPath(TitleBarButtonPressedBackgroundColorProperty) });
            BindingOperations.SetBinding(this, TitleBarButtonPressedBackgroundColorProperty, new Binding { Source = palette["XboxGreen"], Path = new PropertyPath(PaletteColor.ColorProperty) });
            this.TitleBarButtonPressedForegroundBrush = new SolidColorBrush();
            BindingOperations.SetBinding(this.TitleBarButtonPressedForegroundBrush, SolidColorBrush.ColorProperty, new Binding { Source = this, Path = new PropertyPath(TitleBarButtonPressedForegroundColorProperty) });
            BindingOperations.SetBinding(this, TitleBarButtonPressedForegroundColorProperty, new Binding { Source = palette["White"], Path = new PropertyPath(PaletteColor.ColorProperty) });
        }

    }
}
